// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 741},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 761},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 766},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 794},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 21, offset: 1445},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 25, offset: 1449},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 1452},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 30, offset: 1454},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1483},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1496},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1496},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1502},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1513},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1518},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1518},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1619},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1619},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1625},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1684},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1701},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1701},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1701},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1704},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1709},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1712},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1715},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1746},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1763},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1763},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1763},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1763},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1766},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1776},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1778},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1780},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1794},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1797},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1805},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1810},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1899},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1899},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1899},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1902},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1915},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1918},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1923},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1926},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1931},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2090},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2101},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2107},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2120},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2125},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2125},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2226},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2232},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2293},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2305},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2313},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2328},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2340},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2354},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2354},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2354},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2362},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2365},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2369},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2372},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2380},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2390},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2399},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2402},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2499},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2499},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2499},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2508},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2511},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2515},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 24, offset: 2518},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 34, offset: 2528},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 41, offset: 2535},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 44, offset: 2538},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2633},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2646},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2646},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2648},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2657},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2658},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2688},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2688},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2690},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2702},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2703},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2734},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2734},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2734},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2739},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2753},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2754},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2845},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2855},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2855},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2859},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 88, col: 15, offset: 2859},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 21, offset: 2865},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 28, offset: 2872},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 2878},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 90, col: 1, offset: 2884},
			expr: &seqExpr{
				pos: position{line: 90, col: 13, offset: 2896},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 13, offset: 2896},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 90, col: 17, offset: 2900},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 90, col: 18, offset: 2901},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 90, col: 18, offset: 2901},
										expr: &litMatcher{
											pos:        position{line: 90, col: 19, offset: 2902},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2907},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 38, offset: 2921},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 57, offset: 2940},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 90, col: 82, offset: 2965},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 90, col: 88, offset: 2971},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2977},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2988},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2989},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2989},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2992},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2992},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 3002},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 3011},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 3019},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 3019},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 3022},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 3028},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 3046},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 3046},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 3046},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 3052},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 3062},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 3067},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 3067},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3141},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3156},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3156},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3156},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3158},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3166},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3168},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3170},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3220},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3234},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3234},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3240},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3257},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3262},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3263},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3263},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 103, col: 11, offset: 3263},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 103, col: 14, offset: 3266},
												expr: &seqExpr{
													pos: position{line: 103, col: 15, offset: 3267},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 15, offset: 3267},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 24, offset: 3276},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 28, offset: 3280},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 103, col: 31, offset: 3283},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 36, offset: 3288},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3404},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3421},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3421},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3421},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3422},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3422},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3422},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3431},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3435},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3435},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3439},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3443},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3445},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3557},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3570},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3585},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3585},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 5, offset: 3585},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 9, offset: 3589},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 12, offset: 3592},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 17, offset: 3597},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 31, offset: 3611},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 113, col: 34, offset: 3614},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 115, col: 1, offset: 3640},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3653},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3653},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 5, offset: 3653},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 9, offset: 3657},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 12, offset: 3660},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 22, offset: 3670},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 36, offset: 3684},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 39, offset: 3687},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 41, offset: 3689},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4378},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4378},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4378},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 7, offset: 4380},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 12, offset: 4385},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 15, offset: 4388},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 20, offset: 4393},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 34, offset: 4407},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 37, offset: 4410},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 39, offset: 4412},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 143, col: 57, offset: 4430},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 58, offset: 4431},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4545},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 5, offset: 4545},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 7, offset: 4547},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 19, offset: 4559},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 21, offset: 4561},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 29, offset: 4569},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 146, col: 31, offset: 4571},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5253},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5253},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 173, col: 5, offset: 5253},
									expr: &seqExpr{
										pos: position{line: 173, col: 7, offset: 5255},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 173, col: 7, offset: 5255},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 173, col: 19, offset: 5267},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 173, col: 24, offset: 5272},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 26, offset: 5274},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 44, offset: 5292},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 45, offset: 5293},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5410},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 176, col: 5, offset: 5410},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 176, col: 9, offset: 5414},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 10, offset: 5415},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 180, col: 1, offset: 5527},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5543},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5543},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5555},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5555},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 7, offset: 5557},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 186, col: 1, offset: 5664},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 5686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 5686},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5698},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5698},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 7, offset: 5700},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 198, col: 1, offset: 5988},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 6003},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 6003},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 5, offset: 6003},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 10, offset: 6008},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 10, offset: 6008},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 20, offset: 6018},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 199, col: 25, offset: 6023},
								expr: &litMatcher{
									pos:        position{line: 199, col: 26, offset: 6024},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 203, col: 1, offset: 6091},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 6104},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6104},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6104},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 204, col: 5, offset: 6104},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 7, offset: 6106},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 13, offset: 6112},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 15, offset: 6114},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6164},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 207, col: 1, offset: 6173},
			expr: &actionExpr{
				pos: position{line: 207, col: 9, offset: 6181},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 207, col: 9, offset: 6181},
					expr: &litMatcher{
						pos:        position{line: 207, col: 9, offset: 6181},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6218},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6234},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6234},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6247},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6259},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6272},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6284},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6296},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6310},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 217, col: 5, offset: 6327},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 221, col: 1, offset: 6384},
			expr: &ruleRefExpr{
				pos:  position{line: 221, col: 14, offset: 6397},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 223, col: 1, offset: 6417},
			expr: &actionExpr{
				pos: position{line: 223, col: 14, offset: 6430},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 223, col: 15, offset: 6431},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 15, offset: 6431},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 21, offset: 6437},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 28, offset: 6444},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 35, offset: 6451},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 42, offset: 6458},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 48, offset: 6464},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 55, offset: 6471},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 225, col: 1, offset: 6508},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6531},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6531},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6537},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6555},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 10, offset: 6560},
								expr: &actionExpr{
									pos: position{line: 227, col: 11, offset: 6561},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 227, col: 11, offset: 6561},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 227, col: 11, offset: 6561},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 14, offset: 6564},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 17, offset: 6567},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 227, col: 28, offset: 6578},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 31, offset: 6581},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 36, offset: 6586},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 231, col: 1, offset: 6703},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6721},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6721},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6727},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 6745},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 233, col: 10, offset: 6750},
								expr: &actionExpr{
									pos: position{line: 233, col: 11, offset: 6751},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 233, col: 11, offset: 6751},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 11, offset: 6751},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 14, offset: 6754},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 17, offset: 6757},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 233, col: 34, offset: 6774},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 37, offset: 6777},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 42, offset: 6782},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 237, col: 1, offset: 6899},
			expr: &actionExpr{
				pos: position{line: 238, col: 5, offset: 6917},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 238, col: 5, offset: 6917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 6917},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 11, offset: 6923},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 6942},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 10, offset: 6947},
								expr: &actionExpr{
									pos: position{line: 239, col: 11, offset: 6948},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 239, col: 11, offset: 6948},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 239, col: 11, offset: 6948},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 14, offset: 6951},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 17, offset: 6954},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 40, offset: 6977},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 43, offset: 6980},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 48, offset: 6985},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 243, col: 1, offset: 7103},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 7122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 7122},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 244, col: 5, offset: 7122},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 244, col: 5, offset: 7122},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 7, offset: 7124},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 22, offset: 7139},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 244, col: 25, offset: 7142},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 29, offset: 7146},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 32, offset: 7149},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 36, offset: 7153},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7255},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 249, col: 1, offset: 7271},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 7290},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7290},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7304},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 7320},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 252, col: 5, offset: 7320},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 252, col: 5, offset: 7320},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 252, col: 11, offset: 7326},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 252, col: 20, offset: 7335},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 252, col: 25, offset: 7340},
										expr: &ruleRefExpr{
											pos:  position{line: 252, col: 26, offset: 7341},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7413},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7425},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 260, col: 1, offset: 7462},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 7478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7478},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 7478},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 261, col: 5, offset: 7478},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 261, col: 15, offset: 7488},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 21, offset: 7494},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 30, offset: 7503},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 35, offset: 7508},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 47, offset: 7520},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 53, offset: 7526},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7671},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7671},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 264, col: 5, offset: 7671},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 15, offset: 7681},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 21, offset: 7687},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 30, offset: 7696},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 35, offset: 7701},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 50, offset: 7716},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 264, col: 55, offset: 7721},
										expr: &seqExpr{
											pos: position{line: 264, col: 56, offset: 7722},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 264, col: 56, offset: 7722},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 264, col: 58, offset: 7724},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 72, offset: 7738},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 78, offset: 7744},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 272, col: 1, offset: 7977},
			expr: &choiceExpr{
				pos: position{line: 272, col: 13, offset: 7989},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 272, col: 13, offset: 7989},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 272, col: 13, offset: 7989},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 25, offset: 8001},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 272, col: 29, offset: 8005},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 274, col: 1, offset: 8009},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 8022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 8022},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 275, col: 5, offset: 8022},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 275, col: 5, offset: 8022},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 14, offset: 8031},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 275, col: 16, offset: 8033},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 275, col: 20, offset: 8037},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 29, offset: 8046},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 8072},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 276, col: 5, offset: 8072},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 278, col: 1, offset: 8097},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 8113},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 8113},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 279, col: 5, offset: 8113},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 13, offset: 8121},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 15, offset: 8123},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 23, offset: 8131},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 281, col: 1, offset: 8172},
			expr: &choiceExpr{
				pos: position{line: 282, col: 5, offset: 8185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 282, col: 5, offset: 8185},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 282, col: 5, offset: 8185},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 282, col: 5, offset: 8185},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 7, offset: 8187},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 14, offset: 8194},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 16, offset: 8196},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 25, offset: 8205},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 282, col: 27, offset: 8207},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 282, col: 33, offset: 8213},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 8244},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 283, col: 5, offset: 8244},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 288, col: 1, offset: 8504},
			expr: &choiceExpr{
				pos: position{line: 289, col: 5, offset: 8523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8523},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8538},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 290, col: 5, offset: 8538},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 10, offset: 8543},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 292, col: 1, offset: 8635},
			expr: &actionExpr{
				pos: position{line: 293, col: 5, offset: 8655},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 293, col: 5, offset: 8655},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8655},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 11, offset: 8661},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 26, offset: 8676},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 31, offset: 8681},
								expr: &actionExpr{
									pos: position{line: 293, col: 32, offset: 8682},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 293, col: 32, offset: 8682},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 293, col: 32, offset: 8682},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 293, col: 35, offset: 8685},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 293, col: 39, offset: 8689},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 293, col: 42, offset: 8692},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 293, col: 47, offset: 8697},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 297, col: 1, offset: 8819},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8837},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8837},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 298, col: 5, offset: 8837},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 10, offset: 8842},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 15, offset: 8847},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 298, col: 18, offset: 8850},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 22, offset: 8854},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 25, offset: 8857},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 29, offset: 8861},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 8965},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 301, col: 5, offset: 8965},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 9, offset: 8969},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 305, col: 1, offset: 9069},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 9077},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 9077},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 306, col: 5, offset: 9077},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 6, offset: 9078},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 16, offset: 9088},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 19, offset: 9091},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 27, offset: 9099},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9102},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 34, offset: 9106},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 37, offset: 9109},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 42, offset: 9114},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 42, offset: 9114},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 49, offset: 9121},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 52, offset: 9124},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 306, col: 56, offset: 9128},
							expr: &seqExpr{
								pos: position{line: 306, col: 58, offset: 9130},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 306, col: 58, offset: 9130},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 306, col: 61, offset: 9133},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 66, offset: 9138},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 72, offset: 9144},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 72, offset: 9144},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 314, col: 1, offset: 9334},
			expr: &choiceExpr{
				pos: position{line: 315, col: 5, offset: 9346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9346},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9365},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 9378},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 319, col: 1, offset: 9387},
			expr: &actionExpr{
				pos: position{line: 319, col: 15, offset: 9401},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 319, col: 15, offset: 9401},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 319, col: 15, offset: 9401},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 319, col: 17, offset: 9403},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 25, offset: 9411},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 27, offset: 9413},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 32, offset: 9418},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 321, col: 1, offset: 9454},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 9473},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 9473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 9473},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 9479},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 25, offset: 9493},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 30, offset: 9498},
								expr: &seqExpr{
									pos: position{line: 322, col: 31, offset: 9499},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 31, offset: 9499},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 322, col: 34, offset: 9502},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 38, offset: 9506},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 41, offset: 9509},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 330, col: 1, offset: 9710},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 9723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 9723},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9736},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9748},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9760},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9773},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9786},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9799},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9812},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9827},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9840},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9852},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 9867},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 9880},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 9894},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 9907},
						name: "TasteProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 347, col: 1, offset: 9918},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 9931},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 9931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 9931},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 348, col: 13, offset: 9939},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 18, offset: 9944},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 27, offset: 9953},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 348, col: 32, offset: 9958},
								expr: &actionExpr{
									pos: position{line: 348, col: 33, offset: 9959},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 348, col: 33, offset: 9959},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 348, col: 33, offset: 9959},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 348, col: 35, offset: 9961},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 348, col: 37, offset: 9963},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 362, col: 1, offset: 10378},
			expr: &actionExpr{
				pos: position{line: 362, col: 12, offset: 10389},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 362, col: 12, offset: 10389},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 362, col: 17, offset: 10394},
						expr: &actionExpr{
							pos: position{line: 362, col: 18, offset: 10395},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 362, col: 18, offset: 10395},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 362, col: 18, offset: 10395},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 362, col: 20, offset: 10397},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 362, col: 22, offset: 10399},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 364, col: 1, offset: 10455},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10467},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10467},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 365, col: 5, offset: 10467},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10542},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 366, col: 5, offset: 10542},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 366, col: 5, offset: 10542},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 366, col: 14, offset: 10551},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 366, col: 16, offset: 10553},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 366, col: 23, offset: 10560},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 366, col: 24, offset: 10561},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 24, offset: 10561},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 366, col: 34, offset: 10571},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 368, col: 1, offset: 10685},
			expr: &actionExpr{
				pos: position{line: 369, col: 5, offset: 10697},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 369, col: 5, offset: 10697},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 5, offset: 10697},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 369, col: 12, offset: 10704},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 18, offset: 10710},
								expr: &actionExpr{
									pos: position{line: 369, col: 19, offset: 10711},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 369, col: 19, offset: 10711},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 19, offset: 10711},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 21, offset: 10713},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 23, offset: 10715},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 47, offset: 10739},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 53, offset: 10745},
								expr: &seqExpr{
									pos: position{line: 369, col: 54, offset: 10746},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 369, col: 54, offset: 10746},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 369, col: 56, offset: 10748},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 67, offset: 10759},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 74, offset: 10766},
								expr: &actionExpr{
									pos: position{line: 369, col: 75, offset: 10767},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 369, col: 75, offset: 10767},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 75, offset: 10767},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 77, offset: 10769},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 79, offset: 10771},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 383, col: 1, offset: 11116},
			expr: &actionExpr{
				pos: position{line: 384, col: 5, offset: 11128},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 384, col: 5, offset: 11128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 5, offset: 11128},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 384, col: 12, offset: 11135},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 14, offset: 11137},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 19, offset: 11142},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 388, col: 1, offset: 11237},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11250},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11250},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11250},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 13, offset: 11258},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 15, offset: 11260},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 20, offset: 11265},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 393, col: 1, offset: 11361},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 11374},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 11374},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 5, offset: 11374},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 13, offset: 11382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 15, offset: 11384},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 20, offset: 11389},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 398, col: 1, offset: 11480},
			expr: &choiceExpr{
				pos: position{line: 399, col: 5, offset: 11493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11493},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 399, col: 5, offset: 11493},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 5, offset: 11493},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 399, col: 13, offset: 11501},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 399, col: 15, offset: 11503},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 21, offset: 11509},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11589},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 400, col: 5, offset: 11589},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 402, col: 1, offset: 11665},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 11678},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11678},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 403, col: 5, offset: 11678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 5, offset: 11678},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 403, col: 13, offset: 11686},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 15, offset: 11688},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 21, offset: 11694},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11774},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 404, col: 5, offset: 11774},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 406, col: 1, offset: 11850},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 11865},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 11865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 5, offset: 11865},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 407, col: 15, offset: 11875},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 17, offset: 11877},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 20, offset: 11880},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 411, col: 1, offset: 11917},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 11928},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 5, offset: 11928},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 412, col: 10, offset: 11933},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 416, col: 1, offset: 12029},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 12042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12042},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 417, col: 5, offset: 12042},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 12050},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 417, col: 15, offset: 12052},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12141},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 420, col: 5, offset: 12141},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 424, col: 1, offset: 12231},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12243},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 425, col: 5, offset: 12243},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 12, offset: 12250},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 14, offset: 12252},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 19, offset: 12257},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 429, col: 1, offset: 12352},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12367},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 12367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 5, offset: 12367},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 15, offset: 12377},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 17, offset: 12379},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 23, offset: 12385},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 34, offset: 12396},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 39, offset: 12401},
								expr: &actionExpr{
									pos: position{line: 430, col: 40, offset: 12402},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 430, col: 40, offset: 12402},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 430, col: 40, offset: 12402},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 430, col: 43, offset: 12405},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 430, col: 47, offset: 12409},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 430, col: 50, offset: 12412},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 53, offset: 12415},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 438, col: 1, offset: 12822},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12835},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12835},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 5, offset: 12835},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 439, col: 13, offset: 12843},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 12845},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 439, col: 15, offset: 12845},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 439, col: 18, offset: 12848},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 443, col: 1, offset: 12919},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 12933},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 444, col: 5, offset: 12933},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 448, col: 1, offset: 13009},
			expr: &choiceExpr{
				pos: position{line: 449, col: 5, offset: 13022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13022},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13022},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 449, col: 5, offset: 13022},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 11, offset: 13028},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 21, offset: 13038},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 29, offset: 13046},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 449, col: 31, offset: 13048},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 39, offset: 13056},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 47, offset: 13064},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 449, col: 50, offset: 13067},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 54, offset: 13071},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 449, col: 57, offset: 13074},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 66, offset: 13083},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 449, col: 74, offset: 13091},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 449, col: 82, offset: 13099},
										expr: &seqExpr{
											pos: position{line: 449, col: 83, offset: 13100},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 449, col: 83, offset: 13100},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 449, col: 85, offset: 13102},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13368},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 456, col: 5, offset: 13368},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 456, col: 5, offset: 13368},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 11, offset: 13374},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 456, col: 22, offset: 13385},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 456, col: 30, offset: 13393},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 32, offset: 13395},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 36, offset: 13399},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 456, col: 44, offset: 13407},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 456, col: 52, offset: 13415},
										expr: &seqExpr{
											pos: position{line: 456, col: 53, offset: 13416},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 456, col: 53, offset: 13416},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 456, col: 55, offset: 13418},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 464, col: 1, offset: 13672},
			expr: &choiceExpr{
				pos: position{line: 465, col: 5, offset: 13686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13686},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13686},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 465, col: 5, offset: 13686},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 465, col: 14, offset: 13695},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13725},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 13725},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 466, col: 5, offset: 13725},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 14, offset: 13734},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13763},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 13763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 467, col: 5, offset: 13763},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 467, col: 14, offset: 13772},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 5, offset: 13802},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 468, col: 5, offset: 13802},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 470, col: 1, offset: 13838},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13850},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 471, col: 5, offset: 13850},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 13859},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 13859},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 472, col: 5, offset: 13859},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 472, col: 9, offset: 13863},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 14, offset: 13868},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 472, col: 19, offset: 13873},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 474, col: 1, offset: 13899},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 13913},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 13913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 475, col: 5, offset: 13913},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 475, col: 14, offset: 13922},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 16, offset: 13924},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 512, col: 1, offset: 15216},
			expr: &choiceExpr{
				pos: position{line: 513, col: 5, offset: 15230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15230},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 513, col: 5, offset: 15230},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 513, col: 5, offset: 15230},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 513, col: 7, offset: 15232},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 12, offset: 15237},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15266},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 514, col: 5, offset: 15266},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 516, col: 1, offset: 15324},
			expr: &ruleRefExpr{
				pos:  position{line: 516, col: 8, offset: 15331},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 518, col: 1, offset: 15342},
			expr: &ruleRefExpr{
				pos:  position{line: 518, col: 13, offset: 15354},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 520, col: 1, offset: 15360},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15375},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15375},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 521, col: 5, offset: 15375},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 11, offset: 15381},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 21, offset: 15391},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 26, offset: 15396},
								expr: &seqExpr{
									pos: position{line: 521, col: 27, offset: 15397},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 521, col: 27, offset: 15397},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 521, col: 30, offset: 15400},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 34, offset: 15404},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 37, offset: 15407},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 531, col: 1, offset: 15606},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 15616},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 15616},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 5, offset: 15616},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 15622},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 16, offset: 15627},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 21, offset: 15632},
								expr: &seqExpr{
									pos: position{line: 532, col: 22, offset: 15633},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 532, col: 22, offset: 15633},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 532, col: 25, offset: 15636},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 29, offset: 15640},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 32, offset: 15643},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 542, col: 1, offset: 15837},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15852},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 5, offset: 15852},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 9, offset: 15856},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 14, offset: 15861},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 543, col: 17, offset: 15864},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 21, offset: 15868},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 24, offset: 15871},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 28, offset: 15875},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 545, col: 1, offset: 15966},
			expr: &ruleRefExpr{
				pos:  position{line: 545, col: 8, offset: 15973},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 547, col: 1, offset: 15990},
			expr: &choiceExpr{
				pos: position{line: 548, col: 5, offset: 16010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16010},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 548, col: 5, offset: 16010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 548, col: 5, offset: 16010},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 15, offset: 16020},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 29, offset: 16034},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 548, col: 32, offset: 16037},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 36, offset: 16041},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 39, offset: 16044},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 50, offset: 16055},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 55, offset: 16060},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 548, col: 58, offset: 16063},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 62, offset: 16067},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 65, offset: 16070},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 76, offset: 16081},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 16221},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 553, col: 1, offset: 16236},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16254},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16254},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 16260},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 10, offset: 16284},
								expr: &actionExpr{
									pos: position{line: 555, col: 11, offset: 16285},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 555, col: 11, offset: 16285},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 555, col: 11, offset: 16285},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 14, offset: 16288},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 17, offset: 16291},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 555, col: 25, offset: 16299},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 28, offset: 16302},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 33, offset: 16307},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 559, col: 1, offset: 16425},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16444},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 16444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 16444},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 16450},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 16474},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 561, col: 10, offset: 16479},
								expr: &actionExpr{
									pos: position{line: 561, col: 11, offset: 16480},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 561, col: 11, offset: 16480},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 561, col: 11, offset: 16480},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 561, col: 14, offset: 16483},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 561, col: 17, offset: 16486},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 561, col: 26, offset: 16495},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 561, col: 29, offset: 16498},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 561, col: 34, offset: 16503},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 565, col: 1, offset: 16626},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16650},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16650},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16650},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 11, offset: 16656},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 5, offset: 16673},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 567, col: 10, offset: 16678},
								expr: &actionExpr{
									pos: position{line: 567, col: 11, offset: 16679},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 567, col: 11, offset: 16679},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 567, col: 11, offset: 16679},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 567, col: 14, offset: 16682},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 567, col: 19, offset: 16687},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 567, col: 38, offset: 16706},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 567, col: 41, offset: 16709},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 567, col: 46, offset: 16714},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 571, col: 1, offset: 16832},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16853},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 572, col: 6, offset: 16854},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 6, offset: 16854},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 572, col: 12, offset: 16860},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 574, col: 1, offset: 16898},
			expr: &choiceExpr{
				pos: position{line: 575, col: 5, offset: 16921},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 575, col: 5, offset: 16921},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 16942},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 576, col: 5, offset: 16942},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 578, col: 1, offset: 16979},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 16996},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 16996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 16996},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 17002},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 5, offset: 17019},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 580, col: 10, offset: 17024},
								expr: &actionExpr{
									pos: position{line: 580, col: 11, offset: 17025},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 580, col: 11, offset: 17025},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 580, col: 11, offset: 17025},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 14, offset: 17028},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 17, offset: 17031},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 580, col: 34, offset: 17048},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 37, offset: 17051},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 42, offset: 17056},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 584, col: 1, offset: 17172},
			expr: &actionExpr{
				pos: position{line: 584, col: 20, offset: 17191},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 584, col: 21, offset: 17192},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 584, col: 21, offset: 17192},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 28, offset: 17199},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 34, offset: 17205},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 41, offset: 17212},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 586, col: 1, offset: 17249},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17266},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 17266},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 17272},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17295},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 10, offset: 17300},
								expr: &actionExpr{
									pos: position{line: 588, col: 11, offset: 17301},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 588, col: 11, offset: 17301},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 11, offset: 17301},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 14, offset: 17304},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 17, offset: 17307},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 34, offset: 17324},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 37, offset: 17327},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 42, offset: 17332},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 592, col: 1, offset: 17454},
			expr: &actionExpr{
				pos: position{line: 592, col: 20, offset: 17473},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 592, col: 21, offset: 17474},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 592, col: 21, offset: 17474},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 592, col: 27, offset: 17480},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 594, col: 1, offset: 17517},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17540},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17540},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 11, offset: 17546},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 5, offset: 17558},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 596, col: 10, offset: 17563},
								expr: &actionExpr{
									pos: position{line: 596, col: 11, offset: 17564},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 596, col: 11, offset: 17564},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 596, col: 11, offset: 17564},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 596, col: 14, offset: 17567},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 596, col: 17, offset: 17570},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 596, col: 40, offset: 17593},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 596, col: 43, offset: 17596},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 596, col: 48, offset: 17601},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 600, col: 1, offset: 17712},
			expr: &actionExpr{
				pos: position{line: 600, col: 26, offset: 17737},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 600, col: 27, offset: 17738},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 27, offset: 17738},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 600, col: 33, offset: 17744},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 602, col: 1, offset: 17781},
			expr: &choiceExpr{
				pos: position{line: 603, col: 5, offset: 17793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 603, col: 5, offset: 17793},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 603, col: 5, offset: 17793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 603, col: 5, offset: 17793},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 603, col: 9, offset: 17797},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 603, col: 12, offset: 17800},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 603, col: 14, offset: 17802},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 606, col: 5, offset: 17911},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 608, col: 1, offset: 17921},
			expr: &choiceExpr{
				pos: position{line: 609, col: 5, offset: 17934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 17934},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 17934},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 609, col: 5, offset: 17934},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 7, offset: 17936},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 16, offset: 17945},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 609, col: 19, offset: 17948},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 23, offset: 17952},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 609, col: 26, offset: 17955},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 30, offset: 17959},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 5, offset: 18061},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 614, col: 1, offset: 18071},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 18084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18084},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18099},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 5, offset: 18113},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 18129},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 18129},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 618, col: 5, offset: 18129},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 11, offset: 18135},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 618, col: 20, offset: 18144},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 618, col: 25, offset: 18149},
										expr: &ruleRefExpr{
											pos:  position{line: 618, col: 26, offset: 18150},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 621, col: 5, offset: 18221},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 622, col: 5, offset: 18235},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 624, col: 1, offset: 18244},
			expr: &seqExpr{
				pos: position{line: 624, col: 13, offset: 18256},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 13, offset: 18256},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 22, offset: 18265},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 624, col: 25, offset: 18268},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 626, col: 1, offset: 18273},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 18286},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 627, col: 5, offset: 18286},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 628, col: 5, offset: 18296},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 629, col: 5, offset: 18308},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 630, col: 5, offset: 18321},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 632, col: 1, offset: 18329},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18343},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18343},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 5, offset: 18343},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 13, offset: 18351},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 16, offset: 18354},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 633, col: 20, offset: 18358},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 25, offset: 18363},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 39, offset: 18377},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 635, col: 1, offset: 18403},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18418},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18418},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 14, offset: 18427},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 636, col: 17, offset: 18430},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 21, offset: 18434},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 24, offset: 18437},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 29, offset: 18442},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 42, offset: 18455},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 636, col: 45, offset: 18458},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 636, col: 49, offset: 18462},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 57, offset: 18470},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 644, col: 1, offset: 18868},
			expr: &choiceExpr{
				pos: position{line: 645, col: 5, offset: 18880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 18880},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18880},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 645, col: 13, offset: 18888},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 13, offset: 18888},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 18924},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 646, col: 5, offset: 18924},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 648, col: 1, offset: 18948},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 18959},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 18959},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 649, col: 5, offset: 18959},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 649, col: 8, offset: 18962},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 12, offset: 18966},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 649, col: 15, offset: 18969},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 17, offset: 18971},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 651, col: 1, offset: 18999},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19012},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19012},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 5, offset: 19012},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 19013},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 16, offset: 19023},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 19, offset: 19026},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 34, offset: 19041},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 37, offset: 19044},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 41, offset: 19048},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 44, offset: 19051},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 49, offset: 19056},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 62, offset: 19069},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 65, offset: 19072},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 656, col: 1, offset: 19168},
			expr: &choiceExpr{
				pos: position{line: 657, col: 5, offset: 19185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19185},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 657, col: 5, offset: 19185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 657, col: 5, offset: 19185},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 11, offset: 19191},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 657, col: 16, offset: 19196},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 657, col: 21, offset: 19201},
										expr: &actionExpr{
											pos: position{line: 657, col: 22, offset: 19202},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 657, col: 22, offset: 19202},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 657, col: 22, offset: 19202},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 657, col: 25, offset: 19205},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 657, col: 29, offset: 19209},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 657, col: 32, offset: 19212},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 657, col: 34, offset: 19214},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 19326},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 660, col: 5, offset: 19326},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 662, col: 1, offset: 19362},
			expr: &choiceExpr{
				pos: position{line: 663, col: 5, offset: 19376},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19376},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 19376},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 663, col: 5, offset: 19376},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 19382},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 663, col: 17, offset: 19388},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 663, col: 22, offset: 19393},
										expr: &ruleRefExpr{
											pos:  position{line: 663, col: 23, offset: 19394},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19465},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 666, col: 5, offset: 19465},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 19471},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 666, col: 22, offset: 19482},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 666, col: 27, offset: 19487},
										expr: &ruleRefExpr{
											pos:  position{line: 666, col: 28, offset: 19488},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19559},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 669, col: 5, offset: 19559},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 673, col: 1, offset: 19628},
			expr: &choiceExpr{
				pos: position{line: 674, col: 5, offset: 19638},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19638},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 19638},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 674, col: 5, offset: 19638},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 674, col: 9, offset: 19642},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 15, offset: 19648},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19864},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 19864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 683, col: 5, offset: 19864},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 683, col: 9, offset: 19868},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 683, col: 13, offset: 19872},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 18, offset: 19877},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 683, col: 23, offset: 19882},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 693, col: 1, offset: 20087},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20097},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 20097},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 20097},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 694, col: 5, offset: 20097},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 694, col: 9, offset: 20101},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 14, offset: 20106},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 27, offset: 20119},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 694, col: 30, offset: 20122},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 34, offset: 20126},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 37, offset: 20129},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 40, offset: 20132},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 53, offset: 20145},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 20316},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 700, col: 5, offset: 20316},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 700, col: 5, offset: 20316},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 9, offset: 20320},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 700, col: 12, offset: 20323},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 16, offset: 20327},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 700, col: 19, offset: 20330},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 22, offset: 20333},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 700, col: 35, offset: 20346},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20517},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20517},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 706, col: 9, offset: 20521},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 14, offset: 20526},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 27, offset: 20539},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 30, offset: 20542},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 34, offset: 20546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 37, offset: 20549},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20722},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20722},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 9, offset: 20726},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 14, offset: 20731},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 712, col: 19, offset: 20736},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20785},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 713, col: 5, offset: 20785},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 713, col: 9, offset: 20789},
									expr: &litMatcher{
										pos:        position{line: 713, col: 11, offset: 20791},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 16, offset: 20796},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 19, offset: 20799},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 715, col: 1, offset: 20850},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 716, col: 5, offset: 20862},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20874},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 20874},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 717, col: 5, offset: 20874},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 9, offset: 20878},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 12, offset: 20881},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 17, offset: 20886},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 22, offset: 20891},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 25, offset: 20894},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 719, col: 1, offset: 20920},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 20932},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 20932},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 20948},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 20966},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 20984},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 21002},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21021},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21038},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 21057},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 21076},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 730, col: 1, offset: 21089},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21107},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 731, col: 5, offset: 21107},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 731, col: 7, offset: 21109},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 735, col: 1, offset: 21221},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 21239},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 21239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 5, offset: 21239},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 7, offset: 21241},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 736, col: 14, offset: 21248},
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 15, offset: 21249},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 740, col: 1, offset: 21361},
			expr: &choiceExpr{
				pos: position{line: 741, col: 5, offset: 21379},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 21379},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 741, col: 5, offset: 21379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 741, col: 5, offset: 21379},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 741, col: 7, offset: 21381},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 741, col: 14, offset: 21388},
									expr: &ruleRefExpr{
										pos:  position{line: 741, col: 15, offset: 21389},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21503},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 744, col: 5, offset: 21503},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 7, offset: 21505},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 748, col: 1, offset: 21608},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21627},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 21627},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 749, col: 5, offset: 21627},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 7, offset: 21629},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 749, col: 11, offset: 21633},
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 12, offset: 21634},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 21747},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 752, col: 5, offset: 21747},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 7, offset: 21749},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 756, col: 1, offset: 21847},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 21864},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 757, col: 5, offset: 21864},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 757, col: 7, offset: 21866},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 761, col: 1, offset: 21978},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 21997},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 762, col: 5, offset: 21997},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 762, col: 7, offset: 21999},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 766, col: 1, offset: 22107},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 22126},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 767, col: 5, offset: 22126},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 22238},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 768, col: 5, offset: 22238},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 770, col: 1, offset: 22348},
			expr: &actionExpr{
				pos: position{line: 771, col: 5, offset: 22364},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 771, col: 5, offset: 22364},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 773, col: 1, offset: 22469},
			expr: &actionExpr{
				pos: position{line: 774, col: 5, offset: 22485},
				run: (*parser).callonTypeLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 774, col: 5, offset: 22485},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 774, col: 9, offset: 22489},
						name: "TypeExternal",
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 778, col: 1, offset: 22587},
			expr: &choiceExpr{
				pos: position{line: 779, col: 5, offset: 22600},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 779, col: 5, offset: 22600},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 780, col: 5, offset: 22617},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 782, col: 1, offset: 22632},
			expr: &choiceExpr{
				pos: position{line: 783, col: 5, offset: 22649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 22649},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 22649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 783, col: 5, offset: 22649},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 12, offset: 22656},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 15, offset: 22659},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 19, offset: 22663},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 22, offset: 22666},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 26, offset: 22670},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 31, offset: 22675},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 34, offset: 22678},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 22705},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 22705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 784, col: 5, offset: 22705},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 12, offset: 22712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 784, col: 15, offset: 22715},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 19, offset: 22719},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 784, col: 22, offset: 22722},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 26, offset: 22726},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 36, offset: 22736},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 784, col: 39, offset: 22739},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 785, col: 5, offset: 22767},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 22783},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 22783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 786, col: 5, offset: 22783},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 9, offset: 22787},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 786, col: 31, offset: 22809},
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 32, offset: 22810},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 788, col: 1, offset: 22846},
			expr: &choiceExpr{
				pos: position{line: 789, col: 5, offset: 22855},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 22855},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 790, col: 5, offset: 22873},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 792, col: 1, offset: 22886},
			expr: &choiceExpr{
				pos: position{line: 793, col: 5, offset: 22904},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 22904},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 793, col: 5, offset: 22904},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 796, col: 5, offset: 22984},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 796, col: 10, offset: 22989},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 23007},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 23007},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 797, col: 5, offset: 23007},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 10, offset: 23012},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 25, offset: 23027},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 797, col: 28, offset: 23030},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 32, offset: 23034},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 797, col: 35, offset: 23037},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 39, offset: 23041},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 797, col: 42, offset: 23044},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 46, offset: 23048},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 51, offset: 23053},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 797, col: 54, offset: 23056},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23157},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 800, col: 5, offset: 23157},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 10, offset: 23162},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 23264},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 803, col: 5, offset: 23264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 803, col: 5, offset: 23264},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 9, offset: 23268},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 12, offset: 23271},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 14, offset: 23273},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 803, col: 25, offset: 23284},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 805, col: 1, offset: 23307},
			expr: &actionExpr{
				pos: position{line: 806, col: 5, offset: 23321},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 806, col: 5, offset: 23321},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 806, col: 11, offset: 23327},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 810, col: 1, offset: 23423},
			expr: &actionExpr{
				pos: position{line: 811, col: 5, offset: 23436},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 811, col: 5, offset: 23436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 23436},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 23442},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 16, offset: 23447},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 811, col: 21, offset: 23452},
								expr: &ruleRefExpr{
									pos:  position{line: 811, col: 21, offset: 23452},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 815, col: 1, offset: 23546},
			expr: &actionExpr{
				pos: position{line: 815, col: 16, offset: 23561},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 815, col: 16, offset: 23561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 815, col: 16, offset: 23561},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 815, col: 19, offset: 23564},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 815, col: 23, offset: 23568},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 815, col: 26, offset: 23571},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 30, offset: 23575},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 817, col: 1, offset: 23601},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 23617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 23617},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 23617},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 818, col: 5, offset: 23617},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 9, offset: 23621},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 818, col: 12, offset: 23624},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 19, offset: 23631},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 33, offset: 23645},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 818, col: 36, offset: 23648},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23743},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 23743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 23743},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 821, col: 9, offset: 23747},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 821, col: 12, offset: 23750},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 16, offset: 23754},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 821, col: 21, offset: 23759},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 821, col: 24, offset: 23762},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23851},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 23851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 824, col: 5, offset: 23851},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 10, offset: 23856},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 824, col: 13, offset: 23859},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 17, offset: 23863},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 22, offset: 23868},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 824, col: 25, offset: 23871},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 23959},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 827, col: 5, offset: 23959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 827, col: 5, offset: 23959},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 10, offset: 23964},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 827, col: 13, offset: 23967},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 827, col: 21, offset: 23975},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 26, offset: 23980},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 827, col: 29, offset: 23983},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 33, offset: 23987},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 827, col: 36, offset: 23990},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 827, col: 44, offset: 23998},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 49, offset: 24003},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 827, col: 52, offset: 24006},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 831, col: 1, offset: 24120},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 24138},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 832, col: 5, offset: 24138},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 833, col: 5, offset: 24164},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 839, col: 1, offset: 24423},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 24449},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 840, col: 9, offset: 24453},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 840, col: 9, offset: 24453},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 19, offset: 24463},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 30, offset: 24474},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 41, offset: 24485},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 9, offset: 24502},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 18, offset: 24511},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 28, offset: 24521},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 38, offset: 24531},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 9, offset: 24547},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 9, offset: 24565},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 18, offset: 24574},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 852, col: 1, offset: 25058},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 25084},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 853, col: 9, offset: 25088},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 853, col: 9, offset: 25088},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 853, col: 22, offset: 25101},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 854, col: 9, offset: 25116},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 855, col: 9, offset: 25132},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 856, col: 9, offset: 25150},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 856, col: 16, offset: 25157},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 857, col: 9, offset: 25171},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 857, col: 18, offset: 25180},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 861, col: 1, offset: 25297},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 25315},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 25315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 25315},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 25321},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 862, col: 21, offset: 25331},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 862, col: 26, offset: 25336},
								expr: &ruleRefExpr{
									pos:  position{line: 862, col: 26, offset: 25336},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 866, col: 1, offset: 25435},
			expr: &actionExpr{
				pos: position{line: 866, col: 21, offset: 25455},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 866, col: 21, offset: 25455},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 866, col: 21, offset: 25455},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 866, col: 24, offset: 25458},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 866, col: 28, offset: 25462},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 866, col: 31, offset: 25465},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 35, offset: 25469},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 868, col: 1, offset: 25500},
			expr: &actionExpr{
				pos: position{line: 869, col: 5, offset: 25514},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 869, col: 5, offset: 25514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 869, col: 5, offset: 25514},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 10, offset: 25519},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 869, col: 25, offset: 25534},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 869, col: 28, offset: 25537},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 869, col: 32, offset: 25541},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 869, col: 35, offset: 25544},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 39, offset: 25548},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 873, col: 1, offset: 25630},
			expr: &choiceExpr{
				pos: position{line: 874, col: 5, offset: 25648},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 874, col: 5, offset: 25648},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 874, col: 24, offset: 25667},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 876, col: 1, offset: 25685},
			expr: &actionExpr{
				pos: position{line: 876, col: 12, offset: 25696},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 876, col: 12, offset: 25696},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 878, col: 1, offset: 25726},
			expr: &actionExpr{
				pos: position{line: 878, col: 11, offset: 25736},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 878, col: 11, offset: 25736},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 880, col: 1, offset: 25764},
			expr: &actionExpr{
				pos: position{line: 880, col: 11, offset: 25774},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 880, col: 11, offset: 25774},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 882, col: 1, offset: 25802},
			expr: &actionExpr{
				pos: position{line: 882, col: 12, offset: 25813},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 882, col: 12, offset: 25813},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 884, col: 1, offset: 25843},
			expr: &actionExpr{
				pos: position{line: 884, col: 11, offset: 25853},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 884, col: 11, offset: 25853},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 886, col: 1, offset: 25881},
			expr: &charClassMatcher{
				pos:        position{line: 886, col: 19, offset: 25899},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 888, col: 1, offset: 25911},
			expr: &choiceExpr{
				pos: position{line: 888, col: 18, offset: 25928},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 888, col: 18, offset: 25928},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 888, col: 36, offset: 25946},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 890, col: 1, offset: 25953},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25968},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 891, col: 5, offset: 25968},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 891, col: 8, offset: 25971},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 893, col: 1, offset: 26052},
			expr: &choiceExpr{
				pos: position{line: 894, col: 5, offset: 26071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 26071},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 894, col: 5, offset: 26071},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 894, col: 5, offset: 26071},
									expr: &seqExpr{
										pos: position{line: 894, col: 7, offset: 26073},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 894, col: 7, offset: 26073},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 894, col: 15, offset: 26081},
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 16, offset: 26082},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 894, col: 32, offset: 26098},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 894, col: 48, offset: 26114},
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 48, offset: 26114},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 26166},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 895, col: 5, offset: 26166},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 26205},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 26205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 896, col: 5, offset: 26205},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 896, col: 10, offset: 26210},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 13, offset: 26213},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 26304},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 898, col: 5, offset: 26304},
							val:        "type",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 901, col: 1, offset: 26344},
			expr: &choiceExpr{
				pos: position{line: 902, col: 5, offset: 26356},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 902, col: 5, offset: 26356},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 26375},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 904, col: 5, offset: 26391},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 5, offset: 26408},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 907, col: 1, offset: 26421},
			expr: &choiceExpr{
				pos: position{line: 908, col: 5, offset: 26434},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 908, col: 5, offset: 26434},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 909, col: 5, offset: 26446},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 910, col: 5, offset: 26458},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 911, col: 5, offset: 26468},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 911, col: 5, offset: 26468},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 11, offset: 26474},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 911, col: 13, offset: 26476},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 19, offset: 26482},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 21, offset: 26484},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 5, offset: 26496},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 5, offset: 26505},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 915, col: 1, offset: 26512},
			expr: &choiceExpr{
				pos: position{line: 916, col: 5, offset: 26529},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 26529},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 26543},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 918, col: 5, offset: 26556},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 919, col: 5, offset: 26567},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 920, col: 5, offset: 26577},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 922, col: 1, offset: 26582},
			expr: &choiceExpr{
				pos: position{line: 923, col: 5, offset: 26599},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 923, col: 5, offset: 26599},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 924, col: 5, offset: 26613},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 925, col: 5, offset: 26626},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 926, col: 5, offset: 26637},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 5, offset: 26647},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 929, col: 1, offset: 26652},
			expr: &choiceExpr{
				pos: position{line: 930, col: 5, offset: 26667},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 930, col: 5, offset: 26667},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 931, col: 5, offset: 26679},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 932, col: 5, offset: 26689},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 933, col: 5, offset: 26698},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 934, col: 5, offset: 26706},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 936, col: 1, offset: 26714},
			expr: &choiceExpr{
				pos: position{line: 936, col: 13, offset: 26726},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 936, col: 13, offset: 26726},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 936, col: 20, offset: 26733},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 936, col: 26, offset: 26739},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 938, col: 1, offset: 26744},
			expr: &choiceExpr{
				pos: position{line: 938, col: 14, offset: 26757},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 938, col: 14, offset: 26757},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 938, col: 22, offset: 26765},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 938, col: 29, offset: 26772},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 938, col: 35, offset: 26778},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 938, col: 40, offset: 26783},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 940, col: 1, offset: 26788},
			expr: &choiceExpr{
				pos: position{line: 941, col: 5, offset: 26800},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 26800},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 941, col: 5, offset: 26800},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 26886},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 26886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 26886},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 9, offset: 26890},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 14, offset: 26895},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 17, offset: 26898},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 944, col: 1, offset: 26987},
			expr: &choiceExpr{
				pos: position{line: 945, col: 5, offset: 26999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 26999},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 945, col: 5, offset: 26999},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 27086},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 27086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 5, offset: 27086},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 9, offset: 27090},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 14, offset: 27095},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 17, offset: 27098},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 948, col: 1, offset: 27196},
			expr: &choiceExpr{
				pos: position{line: 949, col: 5, offset: 27206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 27206},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 949, col: 5, offset: 27206},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 27293},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 27293},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 950, col: 5, offset: 27293},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 9, offset: 27297},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 14, offset: 27302},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 17, offset: 27305},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 952, col: 1, offset: 27403},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 27412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 27412},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 953, col: 5, offset: 27412},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 27501},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 27501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 5, offset: 27501},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 9, offset: 27505},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 14, offset: 27510},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 17, offset: 27513},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 956, col: 1, offset: 27615},
			expr: &choiceExpr{
				pos: position{line: 957, col: 5, offset: 27625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 27625},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 957, col: 5, offset: 27625},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27717},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 27717},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 958, col: 5, offset: 27717},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 9, offset: 27721},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 14, offset: 27726},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 17, offset: 27729},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 961, col: 1, offset: 27860},
			expr: &actionExpr{
				pos: position{line: 962, col: 5, offset: 27867},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 962, col: 5, offset: 27867},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 962, col: 5, offset: 27867},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 962, col: 10, offset: 27872},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 962, col: 14, offset: 27876},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 962, col: 19, offset: 27881},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 962, col: 23, offset: 27885},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 962, col: 28, offset: 27890},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 962, col: 32, offset: 27894},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 964, col: 1, offset: 27931},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27939},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 965, col: 5, offset: 27939},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 965, col: 5, offset: 27939},
							expr: &seqExpr{
								pos: position{line: 965, col: 8, offset: 27942},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 965, col: 8, offset: 27942},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 965, col: 12, offset: 27946},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 16, offset: 27950},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 965, col: 20, offset: 27954},
										expr: &choiceExpr{
											pos: position{line: 965, col: 22, offset: 27956},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 965, col: 22, offset: 27956},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 965, col: 33, offset: 27967},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 965, col: 39, offset: 27973},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 41, offset: 27975},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 969, col: 1, offset: 28139},
			expr: &choiceExpr{
				pos: position{line: 970, col: 5, offset: 28157},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 28157},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 28157},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 28157},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 970, col: 7, offset: 28159},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 7, offset: 28159},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 970, col: 17, offset: 28169},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 19, offset: 28171},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 28235},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 28235},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 973, col: 5, offset: 28235},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 7, offset: 28237},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 973, col: 11, offset: 28241},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 973, col: 13, offset: 28243},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 13, offset: 28243},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 23, offset: 28253},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 28, offset: 28258},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 973, col: 30, offset: 28260},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 30, offset: 28260},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 973, col: 40, offset: 28270},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 42, offset: 28272},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 28371},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 28371},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 976, col: 5, offset: 28371},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 976, col: 10, offset: 28376},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 976, col: 12, offset: 28378},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 12, offset: 28378},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 976, col: 22, offset: 28388},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 24, offset: 28390},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 28461},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 28461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 979, col: 5, offset: 28461},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 7, offset: 28463},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 979, col: 11, offset: 28467},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 979, col: 13, offset: 28469},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 13, offset: 28469},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 23, offset: 28479},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 28547},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 28547},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 986, col: 1, offset: 28584},
			expr: &choiceExpr{
				pos: position{line: 987, col: 5, offset: 28596},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 28596},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 28603},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 990, col: 1, offset: 28608},
			expr: &actionExpr{
				pos: position{line: 990, col: 12, offset: 28619},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 990, col: 12, offset: 28619},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 990, col: 12, offset: 28619},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 990, col: 16, offset: 28623},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 990, col: 18, offset: 28625},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 992, col: 1, offset: 28663},
			expr: &actionExpr{
				pos: position{line: 992, col: 12, offset: 28674},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 992, col: 12, offset: 28674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 992, col: 12, offset: 28674},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 14, offset: 28676},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 992, col: 18, offset: 28680},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 994, col: 1, offset: 28718},
			expr: &actionExpr{
				pos: position{line: 995, col: 5, offset: 28729},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 995, col: 5, offset: 28729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 995, col: 5, offset: 28729},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 7, offset: 28731},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 995, col: 10, offset: 28734},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 995, col: 14, offset: 28738},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 16, offset: 28740},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 999, col: 1, offset: 28813},
			expr: &actionExpr{
				pos: position{line: 1000, col: 5, offset: 28824},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 5, offset: 28824},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1000, col: 5, offset: 28824},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 7, offset: 28826},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1000, col: 11, offset: 28830},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 15, offset: 28834},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 17, offset: 28836},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1004, col: 1, offset: 28899},
			expr: &actionExpr{
				pos: position{line: 1005, col: 4, offset: 28907},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1005, col: 4, offset: 28907},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1005, col: 6, offset: 28909},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1007, col: 1, offset: 28949},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 28963},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 5, offset: 28978},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1011, col: 1, offset: 28994},
			expr: &actionExpr{
				pos: position{line: 1011, col: 14, offset: 29007},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1011, col: 14, offset: 29007},
					expr: &charClassMatcher{
						pos:        position{line: 1011, col: 14, offset: 29007},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1013, col: 1, offset: 29046},
			expr: &actionExpr{
				pos: position{line: 1014, col: 5, offset: 29065},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 5, offset: 29065},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1014, col: 5, offset: 29065},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1014, col: 9, offset: 29069},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1016, col: 1, offset: 29112},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 29128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 29128},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 29128},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1017, col: 5, offset: 29128},
									expr: &litMatcher{
										pos:        position{line: 1017, col: 5, offset: 29128},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1017, col: 10, offset: 29133},
									expr: &charClassMatcher{
										pos:        position{line: 1017, col: 10, offset: 29133},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1017, col: 17, offset: 29140},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1017, col: 21, offset: 29144},
									expr: &charClassMatcher{
										pos:        position{line: 1017, col: 21, offset: 29144},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1017, col: 28, offset: 29151},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 28, offset: 29151},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 29210},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 29210},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1020, col: 5, offset: 29210},
									expr: &litMatcher{
										pos:        position{line: 1020, col: 5, offset: 29210},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 10, offset: 29215},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1020, col: 14, offset: 29219},
									expr: &charClassMatcher{
										pos:        position{line: 1020, col: 14, offset: 29219},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1020, col: 21, offset: 29226},
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 21, offset: 29226},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1024, col: 1, offset: 29282},
			expr: &seqExpr{
				pos: position{line: 1024, col: 16, offset: 29297},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1024, col: 16, offset: 29297},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1024, col: 21, offset: 29302},
						expr: &charClassMatcher{
							pos:        position{line: 1024, col: 21, offset: 29302},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 27, offset: 29308},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1026, col: 1, offset: 29320},
			expr: &actionExpr{
				pos: position{line: 1026, col: 7, offset: 29326},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1026, col: 7, offset: 29326},
					expr: &ruleRefExpr{
						pos:  position{line: 1026, col: 7, offset: 29326},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1028, col: 1, offset: 29368},
			expr: &charClassMatcher{
				pos:        position{line: 1028, col: 12, offset: 29379},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1031, col: 1, offset: 29393},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 5, offset: 29410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 29410},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1032, col: 5, offset: 29410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1032, col: 5, offset: 29410},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 9, offset: 29414},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1032, col: 11, offset: 29416},
										expr: &ruleRefExpr{
											pos:  position{line: 1032, col: 11, offset: 29416},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 29, offset: 29434},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 29471},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1033, col: 5, offset: 29471},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1033, col: 5, offset: 29471},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 9, offset: 29475},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1033, col: 11, offset: 29477},
										expr: &ruleRefExpr{
											pos:  position{line: 1033, col: 11, offset: 29477},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1033, col: 29, offset: 29495},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1035, col: 1, offset: 29529},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 5, offset: 29550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29550},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 29550},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1036, col: 5, offset: 29550},
									expr: &choiceExpr{
										pos: position{line: 1036, col: 7, offset: 29552},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1036, col: 7, offset: 29552},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1036, col: 13, offset: 29558},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1036, col: 26, offset: 29571,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29608},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29608},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29608},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 10, offset: 29613},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 12, offset: 29615},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1039, col: 1, offset: 29649},
			expr: &actionExpr{
				pos: position{line: 1040, col: 5, offset: 29661},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 5, offset: 29661},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1040, col: 5, offset: 29661},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1040, col: 10, offset: 29666},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1040, col: 23, offset: 29679},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1040, col: 28, offset: 29684},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 28, offset: 29684},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1042, col: 1, offset: 29746},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29763},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29763},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 1043, col: 5, offset: 29763},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 29815},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1046, col: 1, offset: 29827},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 29843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29843},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1048, col: 5, offset: 29860},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1050, col: 1, offset: 29867},
			expr: &actionExpr{
				pos: position{line: 1050, col: 14, offset: 29880},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 14, offset: 29880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1050, col: 14, offset: 29880},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 19, offset: 29885},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1050, col: 22, offset: 29888},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1050, col: 22, offset: 29888},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1050, col: 38, offset: 29904},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1052, col: 1, offset: 29940},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 5, offset: 29961},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 29961},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1053, col: 5, offset: 29961},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1053, col: 5, offset: 29961},
									expr: &choiceExpr{
										pos: position{line: 1053, col: 7, offset: 29963},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1053, col: 7, offset: 29963},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1053, col: 13, offset: 29969},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1053, col: 26, offset: 29982,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 30019},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 30019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1054, col: 5, offset: 30019},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 10, offset: 30024},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 12, offset: 30026},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1056, col: 1, offset: 30060},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 5, offset: 30079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 30079},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 30079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1057, col: 5, offset: 30079},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1057, col: 9, offset: 30083},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1057, col: 18, offset: 30092},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 5, offset: 30143},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 5, offset: 30164},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1061, col: 1, offset: 30179},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 30200},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1062, col: 5, offset: 30200},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1063, col: 5, offset: 30208},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1064, col: 5, offset: 30217},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 30226},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1065, col: 5, offset: 30226},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 30255},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1066, col: 5, offset: 30255},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 30284},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1067, col: 5, offset: 30284},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 30313},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1068, col: 5, offset: 30313},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30342},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1069, col: 5, offset: 30342},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30371},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1070, col: 5, offset: 30371},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1072, col: 1, offset: 30397},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 30415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30415},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1073, col: 5, offset: 30415},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30443},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1074, col: 5, offset: 30443},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1075, col: 5, offset: 30473},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1077, col: 1, offset: 30479},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 30497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 30497},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 30497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1078, col: 5, offset: 30497},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 9, offset: 30501},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1078, col: 16, offset: 30508},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1078, col: 16, offset: 30508},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 25, offset: 30517},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 34, offset: 30526},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 43, offset: 30535},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 30598},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 30598},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 5, offset: 30598},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1081, col: 9, offset: 30602},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 13, offset: 30606},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1081, col: 20, offset: 30613},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1081, col: 20, offset: 30613},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1081, col: 29, offset: 30622},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 29, offset: 30622},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1081, col: 39, offset: 30632},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 39, offset: 30632},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1081, col: 49, offset: 30642},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 49, offset: 30642},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1081, col: 59, offset: 30652},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 59, offset: 30652},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1081, col: 69, offset: 30662},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 69, offset: 30662},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 80, offset: 30673},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1085, col: 1, offset: 30727},
			expr: &actionExpr{
				pos: position{line: 1086, col: 5, offset: 30738},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 5, offset: 30738},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1086, col: 5, offset: 30738},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 9, offset: 30742},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 14, offset: 30747},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1086, col: 25, offset: 30758},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1088, col: 1, offset: 30784},
			expr: &actionExpr{
				pos: position{line: 1089, col: 5, offset: 30799},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1089, col: 5, offset: 30799},
					expr: &choiceExpr{
						pos: position{line: 1089, col: 6, offset: 30800},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1089, col: 6, offset: 30800},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1089, col: 13, offset: 30807},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1091, col: 1, offset: 30847},
			expr: &charClassMatcher{
				pos:        position{line: 1092, col: 5, offset: 30863},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1094, col: 1, offset: 30878},
			expr: &oneOrMoreExpr{
				pos: position{line: 1094, col: 6, offset: 30883},
				expr: &ruleRefExpr{
					pos:  position{line: 1094, col: 6, offset: 30883},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1096, col: 1, offset: 30894},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1096, col: 6, offset: 30899},
				expr: &ruleRefExpr{
					pos:  position{line: 1096, col: 6, offset: 30899},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1098, col: 1, offset: 30910},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 30923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1099, col: 5, offset: 30923},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 5, offset: 30938},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 5, offset: 30957},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1103, col: 1, offset: 30966},
			expr: &anyMatcher{
				line: 1104, col: 5, offset: 30986,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1106, col: 1, offset: 30989},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31017},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1107, col: 5, offset: 31017},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1108, col: 5, offset: 31026},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1109, col: 5, offset: 31035},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1110, col: 5, offset: 31044},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1111, col: 5, offset: 31052},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1112, col: 5, offset: 31065},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1114, col: 1, offset: 31075},
			expr: &charClassMatcher{
				pos:        position{line: 1115, col: 5, offset: 31094},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1121, col: 1, offset: 31424},
			expr: &ruleRefExpr{
				pos:  position{line: 1124, col: 5, offset: 31495},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1126, col: 1, offset: 31514},
			expr: &seqExpr{
				pos: position{line: 1127, col: 5, offset: 31535},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1127, col: 5, offset: 31535},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1127, col: 10, offset: 31540},
						expr: &seqExpr{
							pos: position{line: 1127, col: 11, offset: 31541},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1127, col: 11, offset: 31541},
									expr: &litMatcher{
										pos:        position{line: 1127, col: 12, offset: 31542},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1127, col: 17, offset: 31547},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1127, col: 35, offset: 31565},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1129, col: 1, offset: 31571},
			expr: &seqExpr{
				pos: position{line: 1130, col: 5, offset: 31593},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1130, col: 5, offset: 31593},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1130, col: 10, offset: 31598},
						expr: &seqExpr{
							pos: position{line: 1130, col: 11, offset: 31599},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1130, col: 11, offset: 31599},
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 12, offset: 31600},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1130, col: 27, offset: 31615},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1132, col: 1, offset: 31634},
			expr: &seqExpr{
				pos: position{line: 1132, col: 7, offset: 31640},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1132, col: 7, offset: 31640},
						expr: &ruleRefExpr{
							pos:  position{line: 1132, col: 7, offset: 31640},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 19, offset: 31652},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1134, col: 1, offset: 31668},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 7, offset: 31674},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 7, offset: 31674},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 31678},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1136, col: 1, offset: 31683},
			expr: &notExpr{
				pos: position{line: 1136, col: 7, offset: 31689},
				expr: &anyMatcher{
					line: 1136, col: 8, offset: 31690,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Literal", "type": "bool", "value": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation25(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"kind": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "taste"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "Id", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"kind": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Id", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
