// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 22, offset: 47},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 25, offset: 50},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "query",
			pos:  position{line: 12, col: 1, offset: 75},
			expr: &choiceExpr{
				pos: position{line: 13, col: 5, offset: 85},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 85},
						run: (*parser).callonquery2,
						expr: &labeledExpr{
							pos:   position{line: 13, col: 5, offset: 85},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 11, offset: 91},
								name: "procChain",
							},
						},
					},
					&actionExpr{
						pos: position{line: 17, col: 5, offset: 357},
						run: (*parser).callonquery5,
						expr: &seqExpr{
							pos: position{line: 17, col: 5, offset: 357},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 17, col: 5, offset: 357},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 7, offset: 359},
										name: "search",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 14, offset: 366},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 17, col: 17, offset: 369},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 17, col: 22, offset: 374},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 22, offset: 374},
											name: "chainedProc",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 622},
						run: (*parser).callonquery13,
						expr: &labeledExpr{
							pos:   position{line: 24, col: 5, offset: 622},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 7, offset: 624},
								name: "search",
							},
						},
					},
				},
			},
		},
		{
			name: "procChain",
			pos:  position{line: 28, col: 1, offset: 732},
			expr: &actionExpr{
				pos: position{line: 29, col: 5, offset: 746},
				run: (*parser).callonprocChain1,
				expr: &seqExpr{
					pos: position{line: 29, col: 5, offset: 746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 29, col: 5, offset: 746},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 11, offset: 752},
								name: "proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 29, col: 16, offset: 757},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 29, col: 21, offset: 762},
								expr: &ruleRefExpr{
									pos:  position{line: 29, col: 21, offset: 762},
									name: "chainedProc",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainedProc",
			pos:  position{line: 37, col: 1, offset: 948},
			expr: &actionExpr{
				pos: position{line: 37, col: 15, offset: 962},
				run: (*parser).callonchainedProc1,
				expr: &seqExpr{
					pos: position{line: 37, col: 15, offset: 962},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 37, col: 15, offset: 962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 37, col: 18, offset: 965},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 37, col: 22, offset: 969},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 37, col: 25, offset: 972},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 27, offset: 974},
								name: "proc",
							},
						},
					},
				},
			},
		},
		{
			name: "search",
			pos:  position{line: 39, col: 1, offset: 998},
			expr: &actionExpr{
				pos: position{line: 40, col: 5, offset: 1009},
				run: (*parser).callonsearch1,
				expr: &labeledExpr{
					pos:   position{line: 40, col: 5, offset: 1009},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 40, col: 10, offset: 1014},
						name: "searchExpr",
					},
				},
			},
		},
		{
			name: "searchExpr",
			pos:  position{line: 44, col: 1, offset: 1111},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1126},
				run: (*parser).callonsearchExpr1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 45, col: 5, offset: 1126},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 11, offset: 1132},
								name: "searchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 45, col: 22, offset: 1143},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 45, col: 27, offset: 1148},
								expr: &ruleRefExpr{
									pos:  position{line: 45, col: 27, offset: 1148},
									name: "oredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "oredSearchTerm",
			pos:  position{line: 49, col: 1, offset: 1227},
			expr: &actionExpr{
				pos: position{line: 49, col: 18, offset: 1244},
				run: (*parser).callonoredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 49, col: 18, offset: 1244},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 49, col: 18, offset: 1244},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 20, offset: 1246},
							name: "orToken",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 28, offset: 1254},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 49, col: 30, offset: 1256},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 32, offset: 1258},
								name: "searchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "searchTerm",
			pos:  position{line: 51, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 52, col: 5, offset: 1303},
				run: (*parser).callonsearchTerm1,
				expr: &seqExpr{
					pos: position{line: 52, col: 5, offset: 1303},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 52, col: 5, offset: 1303},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 11, offset: 1309},
								name: "searchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 24, offset: 1322},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 29, offset: 1327},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 29, offset: 1327},
									name: "andedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andedSearchTerm",
			pos:  position{line: 56, col: 1, offset: 1408},
			expr: &actionExpr{
				pos: position{line: 56, col: 19, offset: 1426},
				run: (*parser).callonandedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 56, col: 19, offset: 1426},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 19, offset: 1426},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 56, col: 21, offset: 1428},
							expr: &seqExpr{
								pos: position{line: 56, col: 22, offset: 1429},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1429},
										name: "andToken",
									},
									&ruleRefExpr{
										pos:  position{line: 56, col: 31, offset: 1438},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 56, col: 35, offset: 1442},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 37, offset: 1444},
								name: "searchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "searchFactor",
			pos:  position{line: 58, col: 1, offset: 1476},
			expr: &choiceExpr{
				pos: position{line: 59, col: 5, offset: 1493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1493},
						run: (*parser).callonsearchFactor2,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1493},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 59, col: 6, offset: 1494},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 59, col: 6, offset: 1494},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 59, col: 6, offset: 1494},
													name: "notToken",
												},
												&ruleRefExpr{
													pos:  position{line: 59, col: 15, offset: 1503},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 59, col: 19, offset: 1507},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 59, col: 19, offset: 1507},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 59, col: 23, offset: 1511},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 59, col: 27, offset: 1515},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 29, offset: 1517},
										name: "searchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1612},
						run: (*parser).callonsearchFactor13,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1612},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 62, col: 5, offset: 1612},
									expr: &litMatcher{
										pos:        position{line: 62, col: 7, offset: 1614},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 62, col: 12, offset: 1619},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 14, offset: 1621},
										name: "searchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1654},
						run: (*parser).callonsearchFactor19,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 1654},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 9, offset: 1658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 63, col: 12, offset: 1661},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 17, offset: 1666},
										name: "searchExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 28, offset: 1677},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 31, offset: 1680},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchPred",
			pos:  position{line: 65, col: 1, offset: 1706},
			expr: &choiceExpr{
				pos: position{line: 66, col: 5, offset: 1721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1721},
						run: (*parser).callonsearchPred2,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 1721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 1721},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 9, offset: 1725},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 12, offset: 1728},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 17, offset: 1733},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 31, offset: 1747},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 34, offset: 1750},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 36, offset: 1752},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1889},
						run: (*parser).callonsearchPred11,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 1889},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 5, offset: 1889},
									val:        "**",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 10, offset: 1894},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 13, offset: 1897},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 18, offset: 1902},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 32, offset: 1916},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 35, offset: 1919},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 37, offset: 1921},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2057},
						run: (*parser).callonsearchPred20,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 5, offset: 2057},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 7, offset: 2059},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2064},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 15, offset: 2067},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 20, offset: 2072},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 34, offset: 2086},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 37, offset: 2089},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 39, offset: 2091},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2545},
						run: (*parser).callonsearchPred30,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2545},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 79, col: 5, offset: 2545},
									expr: &litMatcher{
										pos:        position{line: 79, col: 6, offset: 2546},
										val:        "len",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 79, col: 12, offset: 2552},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 17, offset: 2557},
										name: "FunctionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 30, offset: 2570},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 33, offset: 2573},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 38, offset: 2578},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 52, offset: 2592},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 55, offset: 2595},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 57, offset: 2597},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2725},
						run: (*parser).callonsearchPred42,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2725},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2725},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2727},
										name: "searchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 19, offset: 2739},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 22, offset: 2742},
									name: "inToken",
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 30, offset: 2750},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 82, col: 33, offset: 2753},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2882},
						run: (*parser).callonsearchPred50,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 85, col: 5, offset: 2882},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 7, offset: 2884},
										name: "searchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 85, col: 19, offset: 2896},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 85, col: 22, offset: 2899},
									name: "inToken",
								},
								&ruleRefExpr{
									pos:  position{line: 85, col: 30, offset: 2907},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 85, col: 33, offset: 2910},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 35, offset: 2912},
										name: "fieldExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 3041},
						run: (*parser).callonsearchPred59,
						expr: &labeledExpr{
							pos:   position{line: 88, col: 5, offset: 3041},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 7, offset: 3043},
								name: "searchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 91, col: 5, offset: 3162},
						run: (*parser).callonsearchPred62,
						expr: &seqExpr{
							pos: position{line: 91, col: 5, offset: 3162},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 91, col: 5, offset: 3162},
									expr: &seqExpr{
										pos: position{line: 91, col: 7, offset: 3164},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 91, col: 8, offset: 3165},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 91, col: 24, offset: 3181},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 91, col: 28, offset: 3185},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 91, col: 30, offset: 3187},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchLiteral",
			pos:  position{line: 104, col: 1, offset: 3639},
			expr: &choiceExpr{
				pos: position{line: 105, col: 5, offset: 3657},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3657},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 3675},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 3693},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 5, offset: 3711},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 3730},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3897},
						run: (*parser).callonsearchLiteral7,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 3897},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 7, offset: 3899},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 113, col: 22, offset: 3914},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 23, offset: 3915},
										name: "searchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 3949},
						run: (*parser).callonsearchLiteral13,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 3949},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 115, col: 5, offset: 3949},
									expr: &seqExpr{
										pos: position{line: 115, col: 7, offset: 3951},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 115, col: 7, offset: 3951},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 115, col: 22, offset: 3966},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 115, col: 25, offset: 3969},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 27, offset: 3971},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 4008},
						run: (*parser).callonsearchLiteral21,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 4008},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 116, col: 5, offset: 4008},
									expr: &seqExpr{
										pos: position{line: 116, col: 7, offset: 4010},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 116, col: 7, offset: 4010},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 116, col: 22, offset: 4025},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 25, offset: 4028},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 27, offset: 4030},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchValue",
			pos:  position{line: 119, col: 1, offset: 4062},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 4078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 4078},
						name: "searchLiteral",
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 4096},
						run: (*parser).callonsearchValue3,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 4096},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 121, col: 5, offset: 4096},
									expr: &seqExpr{
										pos: position{line: 121, col: 7, offset: 4098},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 121, col: 8, offset: 4099},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 121, col: 24, offset: 4115},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 121, col: 27, offset: 4118},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 29, offset: 4120},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 125, col: 1, offset: 4228},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 4246},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 126, col: 5, offset: 4246},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 126, col: 7, offset: 4248},
						name: "quotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 130, col: 1, offset: 4358},
			expr: &actionExpr{
				pos: position{line: 131, col: 5, offset: 4376},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 131, col: 5, offset: 4376},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 131, col: 7, offset: 4378},
						name: "reString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 135, col: 1, offset: 4484},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 4502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4502},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 4502},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 136, col: 5, offset: 4502},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 7, offset: 4504},
										name: "ip6subnet",
									},
								},
								&notExpr{
									pos: position{line: 136, col: 17, offset: 4514},
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 18, offset: 4515},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4627},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 139, col: 5, offset: 4627},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 7, offset: 4629},
								name: "subnet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 143, col: 1, offset: 4730},
			expr: &choiceExpr{
				pos: position{line: 144, col: 5, offset: 4749},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 4749},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 4749},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 144, col: 5, offset: 4749},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 7, offset: 4751},
										name: "ip6addr",
									},
								},
								&notExpr{
									pos: position{line: 144, col: 15, offset: 4759},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 16, offset: 4760},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4871},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 147, col: 5, offset: 4871},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 7, offset: 4873},
								name: "addr",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 151, col: 1, offset: 4971},
			expr: &actionExpr{
				pos: position{line: 152, col: 5, offset: 4988},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 152, col: 5, offset: 4988},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 152, col: 7, offset: 4990},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 156, col: 1, offset: 5096},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 5115},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 157, col: 5, offset: 5115},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 157, col: 7, offset: 5117},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 161, col: 1, offset: 5222},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 5241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 5241},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 162, col: 5, offset: 5241},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 5351},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 163, col: 5, offset: 5351},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 165, col: 1, offset: 5459},
			expr: &actionExpr{
				pos: position{line: 166, col: 5, offset: 5475},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 166, col: 5, offset: 5475},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "searchKeywords",
			pos:  position{line: 168, col: 1, offset: 5565},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 5584},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 169, col: 5, offset: 5584},
						name: "andToken",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 5, offset: 5597},
						name: "orToken",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 5609},
						name: "inToken",
					},
				},
			},
		},
		{
			name: "procList",
			pos:  position{line: 173, col: 1, offset: 5618},
			expr: &actionExpr{
				pos: position{line: 174, col: 5, offset: 5631},
				run: (*parser).callonprocList1,
				expr: &seqExpr{
					pos: position{line: 174, col: 5, offset: 5631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 174, col: 5, offset: 5631},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 11, offset: 5637},
								name: "procChain",
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 21, offset: 5647},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 174, col: 26, offset: 5652},
								expr: &ruleRefExpr{
									pos:  position{line: 174, col: 26, offset: 5652},
									name: "parallelChain",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parallelChain",
			pos:  position{line: 183, col: 1, offset: 5952},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5970},
				run: (*parser).callonparallelChain1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5970},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 184, col: 5, offset: 5970},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 184, col: 8, offset: 5973},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 12, offset: 5977},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 15, offset: 5980},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 18, offset: 5983},
								name: "procChain",
							},
						},
					},
				},
			},
		},
		{
			name: "proc",
			pos:  position{line: 186, col: 1, offset: 6070},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 6079},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6079},
						name: "simpleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6094},
						name: "groupByProc",
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 6110},
						run: (*parser).callonproc4,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 6110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 5, offset: 6110},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 9, offset: 6114},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 12, offset: 6117},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 17, offset: 6122},
										name: "procList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 26, offset: 6131},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 189, col: 29, offset: 6134},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKeys",
			pos:  position{line: 193, col: 1, offset: 6170},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 6186},
				run: (*parser).callongroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 6186},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 194, col: 5, offset: 6186},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 194, col: 7, offset: 6188},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 13, offset: 6194},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 15, offset: 6196},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 23, offset: 6204},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 199, col: 1, offset: 6483},
			expr: &choiceExpr{
				pos: position{line: 200, col: 5, offset: 6502},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6502},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6517},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 201, col: 5, offset: 6517},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 10, offset: 6522},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 203, col: 1, offset: 6606},
			expr: &actionExpr{
				pos: position{line: 204, col: 5, offset: 6626},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 204, col: 5, offset: 6626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6626},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 11, offset: 6632},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 26, offset: 6647},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 31, offset: 6652},
								expr: &actionExpr{
									pos: position{line: 204, col: 32, offset: 6653},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 204, col: 32, offset: 6653},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 204, col: 32, offset: 6653},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 204, col: 35, offset: 6656},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 204, col: 39, offset: 6660},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 204, col: 42, offset: 6663},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 204, col: 47, offset: 6668},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "everyDur",
			pos:  position{line: 208, col: 1, offset: 6788},
			expr: &actionExpr{
				pos: position{line: 209, col: 5, offset: 6801},
				run: (*parser).calloneveryDur1,
				expr: &seqExpr{
					pos: position{line: 209, col: 5, offset: 6801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 5, offset: 6801},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 14, offset: 6810},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 16, offset: 6812},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 20, offset: 6816},
								name: "duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 29, offset: 6825},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "equalityToken",
			pos:  position{line: 211, col: 1, offset: 6848},
			expr: &choiceExpr{
				pos: position{line: 212, col: 5, offset: 6866},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6866},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 24, offset: 6885},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "andToken",
			pos:  position{line: 214, col: 1, offset: 6903},
			expr: &actionExpr{
				pos: position{line: 214, col: 12, offset: 6914},
				run: (*parser).callonandToken1,
				expr: &litMatcher{
					pos:        position{line: 214, col: 12, offset: 6914},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "orToken",
			pos:  position{line: 215, col: 1, offset: 6952},
			expr: &actionExpr{
				pos: position{line: 215, col: 11, offset: 6962},
				run: (*parser).callonorToken1,
				expr: &litMatcher{
					pos:        position{line: 215, col: 11, offset: 6962},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "inToken",
			pos:  position{line: 216, col: 1, offset: 6999},
			expr: &actionExpr{
				pos: position{line: 216, col: 11, offset: 7009},
				run: (*parser).calloninToken1,
				expr: &litMatcher{
					pos:        position{line: 216, col: 11, offset: 7009},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "notToken",
			pos:  position{line: 217, col: 1, offset: 7046},
			expr: &actionExpr{
				pos: position{line: 217, col: 12, offset: 7057},
				run: (*parser).callonnotToken1,
				expr: &litMatcher{
					pos:        position{line: 217, col: 12, offset: 7057},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 219, col: 1, offset: 7096},
			expr: &actionExpr{
				pos: position{line: 219, col: 18, offset: 7113},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 219, col: 18, offset: 7113},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 219, col: 18, offset: 7113},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 34, offset: 7129},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 34, offset: 7129},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 221, col: 1, offset: 7177},
			expr: &charClassMatcher{
				pos:        position{line: 221, col: 19, offset: 7195},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 222, col: 1, offset: 7206},
			expr: &choiceExpr{
				pos: position{line: 222, col: 18, offset: 7223},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 222, col: 18, offset: 7223},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 222, col: 36, offset: 7241},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 224, col: 1, offset: 7248},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 7263},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 7263},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 225, col: 5, offset: 7263},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 225, col: 21, offset: 7279},
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 21, offset: 7279},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "RootField",
			pos:  position{line: 227, col: 1, offset: 7379},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 7393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 228, col: 5, offset: 7393},
						run: (*parser).callonRootField2,
						expr: &seqExpr{
							pos: position{line: 228, col: 5, offset: 7393},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 228, col: 5, offset: 7393},
									expr: &litMatcher{
										pos:        position{line: 228, col: 5, offset: 7393},
										val:        ".",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 228, col: 10, offset: 7398},
									expr: &choiceExpr{
										pos: position{line: 228, col: 12, offset: 7400},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 12, offset: 7400},
												name: "BooleanLiteral",
											},
											&ruleRefExpr{
												pos:  position{line: 228, col: 29, offset: 7417},
												name: "NullLiteral",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 228, col: 42, offset: 7430},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 228, col: 48, offset: 7436},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 7589},
						run: (*parser).callonRootField12,
						expr: &seqExpr{
							pos: position{line: 229, col: 5, offset: 7589},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 229, col: 5, offset: 7589},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 229, col: 9, offset: 7593},
									expr: &ruleRefExpr{
										pos:  position{line: 229, col: 11, offset: 7595},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 231, col: 1, offset: 7668},
			expr: &ruleRefExpr{
				pos:  position{line: 231, col: 8, offset: 7675},
				name: "DerefExpression",
			},
		},
		{
			name: "DerefExpression",
			pos:  position{line: 233, col: 1, offset: 7692},
			expr: &actionExpr{
				pos: position{line: 234, col: 5, offset: 7712},
				run: (*parser).callonDerefExpression1,
				expr: &seqExpr{
					pos: position{line: 234, col: 5, offset: 7712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 7712},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 11, offset: 7718},
								name: "RootField",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 21, offset: 7728},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 234, col: 26, offset: 7733},
								expr: &ruleRefExpr{
									pos:  position{line: 234, col: 27, offset: 7734},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 238, col: 1, offset: 7799},
			expr: &choiceExpr{
				pos: position{line: 239, col: 5, offset: 7809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 7809},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 239, col: 5, offset: 7809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 239, col: 5, offset: 7809},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 239, col: 9, offset: 7813},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 239, col: 14, offset: 7818},
										name: "Expression",
									},
								},
								&litMatcher{
									pos:        position{line: 239, col: 25, offset: 7829},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7878},
						run: (*parser).callonDeref8,
						expr: &seqExpr{
							pos: position{line: 240, col: 5, offset: 7878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 240, col: 5, offset: 7878},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 240, col: 9, offset: 7882},
									expr: &litMatcher{
										pos:        position{line: 240, col: 11, offset: 7884},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 240, col: 16, offset: 7889},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 19, offset: 7892},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionExpr",
			pos:  position{line: 247, col: 1, offset: 8204},
			expr: &actionExpr{
				pos: position{line: 248, col: 7, offset: 8223},
				run: (*parser).callonFunctionExpr1,
				expr: &seqExpr{
					pos: position{line: 248, col: 7, offset: 8223},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 7, offset: 8223},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 10, offset: 8226},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 23, offset: 8239},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 248, col: 26, offset: 8242},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 30, offset: 8246},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 35, offset: 8251},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 48, offset: 8264},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldExpr",
			pos:  position{line: 252, col: 1, offset: 8376},
			expr: &ruleRefExpr{
				pos:  position{line: 252, col: 13, offset: 8388},
				name: "Lval",
			},
		},
		{
			name: "fieldExprList",
			pos:  position{line: 254, col: 1, offset: 8394},
			expr: &actionExpr{
				pos: position{line: 255, col: 5, offset: 8412},
				run: (*parser).callonfieldExprList1,
				expr: &seqExpr{
					pos: position{line: 255, col: 5, offset: 8412},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 255, col: 5, offset: 8412},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 11, offset: 8418},
								name: "fieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 21, offset: 8428},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 26, offset: 8433},
								expr: &seqExpr{
									pos: position{line: 255, col: 27, offset: 8434},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 255, col: 27, offset: 8434},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 255, col: 30, offset: 8437},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 34, offset: 8441},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 37, offset: 8444},
											name: "fieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprList",
			pos:  position{line: 265, col: 1, offset: 8641},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8654},
				run: (*parser).callonExprList1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8654},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8654},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 11, offset: 8660},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 22, offset: 8671},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 27, offset: 8676},
								expr: &seqExpr{
									pos: position{line: 266, col: 28, offset: 8677},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 28, offset: 8677},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 266, col: 31, offset: 8680},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 35, offset: 8684},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 38, offset: 8687},
											name: "Expression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByProc",
			pos:  position{line: 276, col: 1, offset: 8887},
			expr: &actionExpr{
				pos: position{line: 277, col: 5, offset: 8903},
				run: (*parser).callongroupByProc1,
				expr: &seqExpr{
					pos: position{line: 277, col: 5, offset: 8903},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 5, offset: 8903},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 11, offset: 8909},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 11, offset: 8909},
									name: "everyDur",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 21, offset: 8919},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 30, offset: 8928},
								name: "reducerList",
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 42, offset: 8940},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 47, offset: 8945},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 47, offset: 8945},
									name: "groupByKeys",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 60, offset: 8958},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 66, offset: 8964},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 66, offset: 8964},
									name: "procLimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 291, col: 1, offset: 9240},
			expr: &choiceExpr{
				pos: position{line: 292, col: 5, offset: 9262},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 292, col: 5, offset: 9262},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 292, col: 5, offset: 9262},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 292, col: 5, offset: 9262},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 10, offset: 9267},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 292, col: 15, offset: 9272},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 292, col: 18, offset: 9275},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 292, col: 22, offset: 9279},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 30, offset: 9287},
										name: "reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 9395},
						run: (*parser).callonReducerAssignment10,
						expr: &labeledExpr{
							pos:   position{line: 295, col: 5, offset: 9395},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 13, offset: 9403},
								name: "reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "reducer",
			pos:  position{line: 299, col: 1, offset: 9495},
			expr: &actionExpr{
				pos: position{line: 300, col: 5, offset: 9507},
				run: (*parser).callonreducer1,
				expr: &seqExpr{
					pos: position{line: 300, col: 5, offset: 9507},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 300, col: 5, offset: 9507},
							expr: &choiceExpr{
								pos: position{line: 300, col: 7, offset: 9509},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 300, col: 7, offset: 9509},
										val:        "not",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 300, col: 13, offset: 9515},
										val:        "len",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 20, offset: 9522},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 23, offset: 9525},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 36, offset: 9538},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 300, col: 39, offset: 9541},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 43, offset: 9545},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 300, col: 46, offset: 9548},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 51, offset: 9553},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 51, offset: 9553},
									name: "Expression",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 64, offset: 9566},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 300, col: 67, offset: 9569},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 300, col: 71, offset: 9573},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 77, offset: 9579},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 77, offset: 9579},
									name: "where",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "where",
			pos:  position{line: 308, col: 1, offset: 9744},
			expr: &actionExpr{
				pos: position{line: 308, col: 9, offset: 9752},
				run: (*parser).callonwhere1,
				expr: &seqExpr{
					pos: position{line: 308, col: 9, offset: 9752},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 308, col: 9, offset: 9752},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 308, col: 11, offset: 9754},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 19, offset: 9762},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 21, offset: 9764},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 26, offset: 9769},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "reducerList",
			pos:  position{line: 310, col: 1, offset: 9802},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9818},
				run: (*parser).callonreducerList1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 311, col: 5, offset: 9818},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 9824},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 29, offset: 9842},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 311, col: 34, offset: 9847},
								expr: &seqExpr{
									pos: position{line: 311, col: 35, offset: 9848},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 311, col: 35, offset: 9848},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 311, col: 38, offset: 9851},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 42, offset: 9855},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 45, offset: 9858},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleProc",
			pos:  position{line: 319, col: 1, offset: 10063},
			expr: &choiceExpr{
				pos: position{line: 320, col: 5, offset: 10078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 10078},
						name: "sort",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 10087},
						name: "top",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 5, offset: 10095},
						name: "cut",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 5, offset: 10103},
						name: "head",
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 5, offset: 10112},
						name: "tail",
					},
					&ruleRefExpr{
						pos:  position{line: 325, col: 5, offset: 10121},
						name: "filter",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 5, offset: 10132},
						name: "uniq",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 5, offset: 10141},
						name: "put",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 5, offset: 10149},
						name: "rename",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 5, offset: 10160},
						name: "fuse",
					},
				},
			},
		},
		{
			name: "sort",
			pos:  position{line: 331, col: 1, offset: 10166},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 10175},
				run: (*parser).callonsort1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 10175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 10175},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 13, offset: 10183},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 18, offset: 10188},
								name: "sortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 27, offset: 10197},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 32, offset: 10202},
								expr: &actionExpr{
									pos: position{line: 332, col: 33, offset: 10203},
									run: (*parser).callonsort8,
									expr: &seqExpr{
										pos: position{line: 332, col: 33, offset: 10203},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 33, offset: 10203},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 35, offset: 10205},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 37, offset: 10207},
													name: "ExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArgs",
			pos:  position{line: 346, col: 1, offset: 10605},
			expr: &actionExpr{
				pos: position{line: 346, col: 12, offset: 10616},
				run: (*parser).callonsortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 346, col: 12, offset: 10616},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 346, col: 17, offset: 10621},
						expr: &actionExpr{
							pos: position{line: 346, col: 18, offset: 10622},
							run: (*parser).callonsortArgs4,
							expr: &seqExpr{
								pos: position{line: 346, col: 18, offset: 10622},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 18, offset: 10622},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 346, col: 20, offset: 10624},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 346, col: 22, offset: 10626},
											name: "sortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArg",
			pos:  position{line: 350, col: 1, offset: 10686},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 10698},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10698},
						run: (*parser).callonsortArg2,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 10698},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10773},
						run: (*parser).callonsortArg4,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10773},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 14, offset: 10782},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 16, offset: 10784},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 352, col: 23, offset: 10791},
										run: (*parser).callonsortArg9,
										expr: &choiceExpr{
											pos: position{line: 352, col: 24, offset: 10792},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 352, col: 24, offset: 10792},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 352, col: 34, offset: 10802},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "top",
			pos:  position{line: 354, col: 1, offset: 10916},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 10924},
				run: (*parser).callontop1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 10924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 5, offset: 10924},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 355, col: 12, offset: 10931},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 18, offset: 10937},
								expr: &actionExpr{
									pos: position{line: 355, col: 19, offset: 10938},
									run: (*parser).callontop6,
									expr: &seqExpr{
										pos: position{line: 355, col: 19, offset: 10938},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 19, offset: 10938},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 21, offset: 10940},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 23, offset: 10942},
													name: "unsignedInteger",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 58, offset: 10977},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 64, offset: 10983},
								expr: &seqExpr{
									pos: position{line: 355, col: 65, offset: 10984},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 355, col: 65, offset: 10984},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 355, col: 67, offset: 10986},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 78, offset: 10997},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 85, offset: 11004},
								expr: &actionExpr{
									pos: position{line: 355, col: 86, offset: 11005},
									run: (*parser).callontop18,
									expr: &seqExpr{
										pos: position{line: 355, col: 86, offset: 11005},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 86, offset: 11005},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 88, offset: 11007},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 90, offset: 11009},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "procLimitArg",
			pos:  position{line: 369, col: 1, offset: 11296},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 11313},
				run: (*parser).callonprocLimitArg1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 11313},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 370, col: 5, offset: 11313},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 370, col: 7, offset: 11315},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 14, offset: 11322},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 370, col: 16, offset: 11324},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 25, offset: 11333},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 27, offset: 11335},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 33, offset: 11341},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "cutArgs",
			pos:  position{line: 372, col: 1, offset: 11380},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 11392},
				run: (*parser).calloncutArgs1,
				expr: &labeledExpr{
					pos:   position{line: 373, col: 5, offset: 11392},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 373, col: 10, offset: 11397},
						expr: &actionExpr{
							pos: position{line: 373, col: 11, offset: 11398},
							run: (*parser).calloncutArgs4,
							expr: &seqExpr{
								pos: position{line: 373, col: 11, offset: 11398},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 373, col: 11, offset: 11398},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 373, col: 13, offset: 11400},
										val:        "-c",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "cut",
			pos:  position{line: 377, col: 1, offset: 11508},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11516},
				run: (*parser).calloncut1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11516},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 12, offset: 11523},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 17, offset: 11528},
								name: "cutArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 25, offset: 11536},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 27, offset: 11538},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 35, offset: 11546},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "head",
			pos:  position{line: 388, col: 1, offset: 11802},
			expr: &choiceExpr{
				pos: position{line: 389, col: 5, offset: 11811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 389, col: 5, offset: 11811},
						run: (*parser).callonhead2,
						expr: &seqExpr{
							pos: position{line: 389, col: 5, offset: 11811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 389, col: 5, offset: 11811},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 13, offset: 11819},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 389, col: 15, offset: 11821},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 389, col: 21, offset: 11827},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 390, col: 5, offset: 11920},
						run: (*parser).callonhead8,
						expr: &litMatcher{
							pos:        position{line: 390, col: 5, offset: 11920},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "tail",
			pos:  position{line: 391, col: 1, offset: 11997},
			expr: &choiceExpr{
				pos: position{line: 392, col: 5, offset: 12006},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 12006},
						run: (*parser).callontail2,
						expr: &seqExpr{
							pos: position{line: 392, col: 5, offset: 12006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 392, col: 5, offset: 12006},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 392, col: 13, offset: 12014},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 392, col: 15, offset: 12016},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 392, col: 21, offset: 12022},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 12115},
						run: (*parser).callontail8,
						expr: &litMatcher{
							pos:        position{line: 393, col: 5, offset: 12115},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "filter",
			pos:  position{line: 395, col: 1, offset: 12193},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 12204},
				run: (*parser).callonfilter1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 12204},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 12204},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 15, offset: 12214},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 17, offset: 12216},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 22, offset: 12221},
								name: "searchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "uniq",
			pos:  position{line: 399, col: 1, offset: 12317},
			expr: &choiceExpr{
				pos: position{line: 400, col: 5, offset: 12326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 12326},
						run: (*parser).callonuniq2,
						expr: &seqExpr{
							pos: position{line: 400, col: 5, offset: 12326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 400, col: 5, offset: 12326},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 400, col: 13, offset: 12334},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 400, col: 15, offset: 12336},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 12427},
						run: (*parser).callonuniq7,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 12427},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "put",
			pos:  position{line: 407, col: 1, offset: 12519},
			expr: &actionExpr{
				pos: position{line: 408, col: 5, offset: 12527},
				run: (*parser).callonput1,
				expr: &seqExpr{
					pos: position{line: 408, col: 5, offset: 12527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 5, offset: 12527},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 12, offset: 12534},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 14, offset: 12536},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 22, offset: 12544},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "rename",
			pos:  position{line: 412, col: 1, offset: 12647},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12658},
				run: (*parser).callonrename1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12658},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 5, offset: 12658},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 15, offset: 12668},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 17, offset: 12670},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 23, offset: 12676},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 413, col: 34, offset: 12687},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 413, col: 39, offset: 12692},
								expr: &actionExpr{
									pos: position{line: 413, col: 40, offset: 12693},
									run: (*parser).callonrename9,
									expr: &seqExpr{
										pos: position{line: 413, col: 40, offset: 12693},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 413, col: 40, offset: 12693},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 413, col: 43, offset: 12696},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 413, col: 47, offset: 12700},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 413, col: 50, offset: 12703},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 413, col: 53, offset: 12706},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fuse",
			pos:  position{line: 417, col: 1, offset: 12876},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 12885},
				run: (*parser).callonfuse1,
				expr: &litMatcher{
					pos:        position{line: 418, col: 5, offset: 12885},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 422, col: 1, offset: 12959},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 12974},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 423, col: 5, offset: 12974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 5, offset: 12974},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 9, offset: 12978},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 14, offset: 12983},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 423, col: 17, offset: 12986},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 21, offset: 12990},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 24, offset: 12993},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 28, offset: 12997},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 425, col: 1, offset: 13072},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 13084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 426, col: 5, offset: 13084},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 5, offset: 13102},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 428, col: 5, offset: 13120},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 5, offset: 13138},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 13157},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 5, offset: 13174},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 5, offset: 13193},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 5, offset: 13212},
						name: "NullLiteral",
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 13228},
						run: (*parser).callonPrimary10,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 13228},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 434, col: 5, offset: 13228},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 9, offset: 13232},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 434, col: 12, offset: 13235},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 434, col: 17, offset: 13240},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 28, offset: 13251},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 434, col: 31, offset: 13254},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 442, col: 1, offset: 13456},
			expr: &ruleRefExpr{
				pos:  position{line: 442, col: 14, offset: 13469},
				name: "ConditionalExpression",
			},
		},
		{
			name: "ConditionalExpression",
			pos:  position{line: 444, col: 1, offset: 13492},
			expr: &choiceExpr{
				pos: position{line: 445, col: 5, offset: 13518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 13518},
						run: (*parser).callonConditionalExpression2,
						expr: &seqExpr{
							pos: position{line: 445, col: 5, offset: 13518},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 445, col: 5, offset: 13518},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 15, offset: 13528},
										name: "LogicalORExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 445, col: 35, offset: 13548},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 445, col: 38, offset: 13551},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 445, col: 42, offset: 13555},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 445, col: 45, offset: 13558},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 56, offset: 13569},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 445, col: 67, offset: 13580},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 445, col: 70, offset: 13583},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 445, col: 74, offset: 13587},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 445, col: 77, offset: 13590},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 88, offset: 13601},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 5, offset: 13750},
						name: "LogicalORExpression",
					},
				},
			},
		},
		{
			name: "LogicalORExpression",
			pos:  position{line: 450, col: 1, offset: 13771},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13795},
				run: (*parser).callonLogicalORExpression1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13795},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 11, offset: 13801},
								name: "LogicalANDExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 13826},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 452, col: 10, offset: 13831},
								expr: &actionExpr{
									pos: position{line: 452, col: 11, offset: 13832},
									run: (*parser).callonLogicalORExpression7,
									expr: &seqExpr{
										pos: position{line: 452, col: 11, offset: 13832},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 452, col: 11, offset: 13832},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 452, col: 14, offset: 13835},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 452, col: 17, offset: 13838},
													name: "orToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 452, col: 25, offset: 13846},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 452, col: 28, offset: 13849},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 452, col: 33, offset: 13854},
													name: "LogicalANDExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpression",
			pos:  position{line: 456, col: 1, offset: 13978},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 14003},
				run: (*parser).callonLogicalANDExpression1,
				expr: &seqExpr{
					pos: position{line: 457, col: 5, offset: 14003},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 14003},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 11, offset: 14009},
								name: "EqualityCompareExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 14039},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 458, col: 10, offset: 14044},
								expr: &actionExpr{
									pos: position{line: 458, col: 11, offset: 14045},
									run: (*parser).callonLogicalANDExpression7,
									expr: &seqExpr{
										pos: position{line: 458, col: 11, offset: 14045},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 458, col: 11, offset: 14045},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 458, col: 14, offset: 14048},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 458, col: 17, offset: 14051},
													name: "andToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 458, col: 26, offset: 14060},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 458, col: 29, offset: 14063},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 458, col: 34, offset: 14068},
													name: "EqualityCompareExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpression",
			pos:  position{line: 462, col: 1, offset: 14197},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14227},
				run: (*parser).callonEqualityCompareExpression1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 14227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 463, col: 5, offset: 14227},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 11, offset: 14233},
								name: "RelativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 5, offset: 14256},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 464, col: 10, offset: 14261},
								expr: &actionExpr{
									pos: position{line: 464, col: 11, offset: 14262},
									run: (*parser).callonEqualityCompareExpression7,
									expr: &seqExpr{
										pos: position{line: 464, col: 11, offset: 14262},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 464, col: 11, offset: 14262},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 464, col: 14, offset: 14265},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 464, col: 19, offset: 14270},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 464, col: 38, offset: 14289},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 464, col: 41, offset: 14292},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 464, col: 46, offset: 14297},
													name: "RelativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 468, col: 1, offset: 14421},
			expr: &actionExpr{
				pos: position{line: 468, col: 20, offset: 14440},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 468, col: 21, offset: 14441},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 21, offset: 14441},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 468, col: 28, offset: 14448},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 468, col: 35, offset: 14455},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 468, col: 41, offset: 14461},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 470, col: 1, offset: 14499},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 14522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 471, col: 5, offset: 14522},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14543},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 472, col: 5, offset: 14543},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpression",
			pos:  position{line: 474, col: 1, offset: 14580},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 14603},
				run: (*parser).callonRelativeExpression1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 14603},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 14603},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 14609},
								name: "AdditiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 14632},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 476, col: 10, offset: 14637},
								expr: &actionExpr{
									pos: position{line: 476, col: 11, offset: 14638},
									run: (*parser).callonRelativeExpression7,
									expr: &seqExpr{
										pos: position{line: 476, col: 11, offset: 14638},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 476, col: 11, offset: 14638},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 476, col: 14, offset: 14641},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 476, col: 17, offset: 14644},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 476, col: 34, offset: 14661},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 476, col: 37, offset: 14664},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 476, col: 42, offset: 14669},
													name: "AdditiveExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 480, col: 1, offset: 14791},
			expr: &actionExpr{
				pos: position{line: 480, col: 20, offset: 14810},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 480, col: 21, offset: 14811},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 480, col: 21, offset: 14811},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 480, col: 28, offset: 14818},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 480, col: 34, offset: 14824},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 480, col: 41, offset: 14831},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpression",
			pos:  position{line: 482, col: 1, offset: 14868},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14891},
				run: (*parser).callonAdditiveExpression1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 483, col: 5, offset: 14891},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 14897},
								name: "MultiplicativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 14926},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 484, col: 10, offset: 14931},
								expr: &actionExpr{
									pos: position{line: 484, col: 11, offset: 14932},
									run: (*parser).callonAdditiveExpression7,
									expr: &seqExpr{
										pos: position{line: 484, col: 11, offset: 14932},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 484, col: 11, offset: 14932},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 484, col: 14, offset: 14935},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 484, col: 17, offset: 14938},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 484, col: 34, offset: 14955},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 484, col: 37, offset: 14958},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 484, col: 42, offset: 14963},
													name: "MultiplicativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 488, col: 1, offset: 15091},
			expr: &actionExpr{
				pos: position{line: 488, col: 20, offset: 15110},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 488, col: 21, offset: 15111},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 21, offset: 15111},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 488, col: 27, offset: 15117},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpression",
			pos:  position{line: 490, col: 1, offset: 15154},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 15183},
				run: (*parser).callonMultiplicativeExpression1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 15183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 15183},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 11, offset: 15189},
								name: "NotExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 5, offset: 15207},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 492, col: 10, offset: 15212},
								expr: &actionExpr{
									pos: position{line: 492, col: 11, offset: 15213},
									run: (*parser).callonMultiplicativeExpression7,
									expr: &seqExpr{
										pos: position{line: 492, col: 11, offset: 15213},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 492, col: 11, offset: 15213},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 492, col: 14, offset: 15216},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 492, col: 17, offset: 15219},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 492, col: 40, offset: 15242},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 492, col: 43, offset: 15245},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 492, col: 48, offset: 15250},
													name: "NotExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 496, col: 1, offset: 15367},
			expr: &actionExpr{
				pos: position{line: 496, col: 26, offset: 15392},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 496, col: 27, offset: 15393},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 27, offset: 15393},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 496, col: 33, offset: 15399},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 498, col: 1, offset: 15436},
			expr: &choiceExpr{
				pos: position{line: 499, col: 5, offset: 15454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 499, col: 5, offset: 15454},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 499, col: 5, offset: 15454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 499, col: 5, offset: 15454},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 499, col: 9, offset: 15458},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 499, col: 12, offset: 15461},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 499, col: 14, offset: 15463},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 502, col: 5, offset: 15582},
						name: "CastExpression",
					},
				},
			},
		},
		{
			name: "CastExpression",
			pos:  position{line: 504, col: 1, offset: 15598},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 15617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 15617},
						run: (*parser).callonCastExpression2,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 15617},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 505, col: 5, offset: 15617},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 7, offset: 15619},
										name: "FuncExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 505, col: 22, offset: 15634},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 505, col: 28, offset: 15640},
										run: (*parser).callonCastExpression7,
										expr: &seqExpr{
											pos: position{line: 505, col: 28, offset: 15640},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 505, col: 28, offset: 15640},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 505, col: 32, offset: 15644},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 505, col: 36, offset: 15648},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 15774},
						name: "FuncExpression",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 511, col: 1, offset: 15791},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 15809},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 512, col: 9, offset: 15813},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 9, offset: 15813},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 19, offset: 15823},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 29, offset: 15833},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 40, offset: 15844},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 51, offset: 15855},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 9, offset: 15872},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 18, offset: 15881},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 28, offset: 15891},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 38, offset: 15901},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 514, col: 9, offset: 15917},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 514, col: 22, offset: 15930},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 515, col: 9, offset: 15945},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 516, col: 9, offset: 15963},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 516, col: 18, offset: 15972},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 516, col: 28, offset: 15982},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 516, col: 39, offset: 15993},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 517, col: 9, offset: 16011},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 517, col: 16, offset: 16018},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 518, col: 9, offset: 16032},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 518, col: 18, offset: 16041},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 518, col: 28, offset: 16051},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpression",
			pos:  position{line: 520, col: 1, offset: 16092},
			expr: &choiceExpr{
				pos: position{line: 521, col: 5, offset: 16111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 521, col: 5, offset: 16111},
						run: (*parser).callonFuncExpression2,
						expr: &seqExpr{
							pos: position{line: 521, col: 5, offset: 16111},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 521, col: 5, offset: 16111},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 521, col: 11, offset: 16117},
										name: "FunctionCall",
									},
								},
								&labeledExpr{
									pos:   position{line: 521, col: 24, offset: 16130},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 521, col: 29, offset: 16135},
										expr: &ruleRefExpr{
											pos:  position{line: 521, col: 30, offset: 16136},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 524, col: 5, offset: 16203},
						name: "DerefExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 525, col: 5, offset: 16223},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 527, col: 1, offset: 16232},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 16249},
				run: (*parser).callonFunctionCall1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 16249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 528, col: 5, offset: 16249},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 8, offset: 16252},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 21, offset: 16265},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 528, col: 24, offset: 16268},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 528, col: 28, offset: 16272},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 33, offset: 16277},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 528, col: 46, offset: 16290},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionName",
			pos:  position{line: 532, col: 1, offset: 16398},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 16415},
				run: (*parser).callonFunctionName1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 16415},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 533, col: 5, offset: 16415},
							name: "FunctionNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 533, col: 23, offset: 16433},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 23, offset: 16433},
								name: "FunctionNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionNameStart",
			pos:  position{line: 535, col: 1, offset: 16483},
			expr: &charClassMatcher{
				pos:        position{line: 535, col: 21, offset: 16503},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FunctionNameRest",
			pos:  position{line: 536, col: 1, offset: 16512},
			expr: &choiceExpr{
				pos: position{line: 536, col: 20, offset: 16531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 536, col: 20, offset: 16531},
						name: "FunctionNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 536, col: 40, offset: 16551},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 538, col: 1, offset: 16559},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 16576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 16576},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 16576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 539, col: 5, offset: 16576},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 16582},
										name: "Expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 22, offset: 16593},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 539, col: 27, offset: 16598},
										expr: &actionExpr{
											pos: position{line: 539, col: 28, offset: 16599},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 539, col: 28, offset: 16599},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 539, col: 28, offset: 16599},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 539, col: 31, offset: 16602},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 539, col: 35, offset: 16606},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 539, col: 38, offset: 16609},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 539, col: 40, offset: 16611},
															name: "Expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 16727},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 542, col: 5, offset: 16727},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "duration",
			pos:  position{line: 544, col: 1, offset: 16763},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16776},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 16776},
						name: "seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 16788},
						name: "minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 16800},
						name: "hours",
					},
					&seqExpr{
						pos: position{line: 548, col: 5, offset: 16810},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 548, col: 5, offset: 16810},
								name: "hours",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 16816},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 548, col: 13, offset: 16818},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 19, offset: 16824},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 21, offset: 16826},
								name: "minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 549, col: 5, offset: 16838},
						name: "days",
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16847},
						name: "weeks",
					},
				},
			},
		},
		{
			name: "sec_abbrev",
			pos:  position{line: 552, col: 1, offset: 16854},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16869},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 553, col: 5, offset: 16869},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 554, col: 5, offset: 16883},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 555, col: 5, offset: 16896},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 556, col: 5, offset: 16907},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 557, col: 5, offset: 16917},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "min_abbrev",
			pos:  position{line: 559, col: 1, offset: 16922},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16937},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 560, col: 5, offset: 16937},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 561, col: 5, offset: 16951},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 562, col: 5, offset: 16964},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 563, col: 5, offset: 16975},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 564, col: 5, offset: 16985},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "hour_abbrev",
			pos:  position{line: 566, col: 1, offset: 16990},
			expr: &choiceExpr{
				pos: position{line: 567, col: 5, offset: 17006},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 567, col: 5, offset: 17006},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 568, col: 5, offset: 17018},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 569, col: 5, offset: 17028},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 570, col: 5, offset: 17037},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 571, col: 5, offset: 17045},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "day_abbrev",
			pos:  position{line: 573, col: 1, offset: 17053},
			expr: &choiceExpr{
				pos: position{line: 573, col: 14, offset: 17066},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 573, col: 14, offset: 17066},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 573, col: 21, offset: 17073},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 573, col: 27, offset: 17079},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "week_abbrev",
			pos:  position{line: 574, col: 1, offset: 17083},
			expr: &choiceExpr{
				pos: position{line: 574, col: 15, offset: 17097},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 574, col: 15, offset: 17097},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 574, col: 23, offset: 17105},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 574, col: 30, offset: 17112},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 574, col: 36, offset: 17118},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 574, col: 41, offset: 17123},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "seconds",
			pos:  position{line: 576, col: 1, offset: 17128},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 17140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 577, col: 5, offset: 17140},
						run: (*parser).callonseconds2,
						expr: &litMatcher{
							pos:        position{line: 577, col: 5, offset: 17140},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 17226},
						run: (*parser).callonseconds4,
						expr: &seqExpr{
							pos: position{line: 578, col: 5, offset: 17226},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 578, col: 5, offset: 17226},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 578, col: 9, offset: 17230},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 16, offset: 17237},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 19, offset: 17240},
									name: "sec_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "minutes",
			pos:  position{line: 580, col: 1, offset: 17327},
			expr: &choiceExpr{
				pos: position{line: 581, col: 5, offset: 17339},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 581, col: 5, offset: 17339},
						run: (*parser).callonminutes2,
						expr: &litMatcher{
							pos:        position{line: 581, col: 5, offset: 17339},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 17426},
						run: (*parser).callonminutes4,
						expr: &seqExpr{
							pos: position{line: 582, col: 5, offset: 17426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 582, col: 5, offset: 17426},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 9, offset: 17430},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 16, offset: 17437},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 19, offset: 17440},
									name: "min_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hours",
			pos:  position{line: 584, col: 1, offset: 17536},
			expr: &choiceExpr{
				pos: position{line: 585, col: 5, offset: 17546},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17546},
						run: (*parser).callonhours2,
						expr: &litMatcher{
							pos:        position{line: 585, col: 5, offset: 17546},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17633},
						run: (*parser).callonhours4,
						expr: &seqExpr{
							pos: position{line: 586, col: 5, offset: 17633},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 586, col: 5, offset: 17633},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 9, offset: 17637},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 586, col: 16, offset: 17644},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 586, col: 19, offset: 17647},
									name: "hour_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "days",
			pos:  position{line: 588, col: 1, offset: 17746},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 17755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 17755},
						run: (*parser).callondays2,
						expr: &litMatcher{
							pos:        position{line: 589, col: 5, offset: 17755},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 17844},
						run: (*parser).callondays4,
						expr: &seqExpr{
							pos: position{line: 590, col: 5, offset: 17844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 590, col: 5, offset: 17844},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 590, col: 9, offset: 17848},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 590, col: 16, offset: 17855},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 590, col: 19, offset: 17858},
									name: "day_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "weeks",
			pos:  position{line: 592, col: 1, offset: 17961},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 17971},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17971},
						run: (*parser).callonweeks2,
						expr: &litMatcher{
							pos:        position{line: 593, col: 5, offset: 17971},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 18063},
						run: (*parser).callonweeks4,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 18063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 594, col: 5, offset: 18063},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 9, offset: 18067},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 16, offset: 18074},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 19, offset: 18077},
									name: "week_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 596, col: 1, offset: 18181},
			expr: &ruleRefExpr{
				pos:  position{line: 596, col: 10, offset: 18190},
				name: "unsignedInteger",
			},
		},
		{
			name: "addr",
			pos:  position{line: 600, col: 1, offset: 18236},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 18245},
				run: (*parser).callonaddr1,
				expr: &labeledExpr{
					pos:   position{line: 601, col: 5, offset: 18245},
					label: "a",
					expr: &seqExpr{
						pos: position{line: 601, col: 8, offset: 18248},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 601, col: 8, offset: 18248},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 601, col: 24, offset: 18264},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 601, col: 28, offset: 18268},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 601, col: 44, offset: 18284},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 601, col: 48, offset: 18288},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 601, col: 64, offset: 18304},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 601, col: 68, offset: 18308},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6addr",
			pos:  position{line: 605, col: 1, offset: 18488},
			expr: &choiceExpr{
				pos: position{line: 606, col: 5, offset: 18500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 18500},
						run: (*parser).callonip6addr2,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 18500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 606, col: 5, offset: 18500},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 606, col: 7, offset: 18502},
										expr: &ruleRefExpr{
											pos:  position{line: 606, col: 8, offset: 18503},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 606, col: 20, offset: 18515},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 22, offset: 18517},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 18581},
						run: (*parser).callonip6addr9,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 18581},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 609, col: 5, offset: 18581},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 7, offset: 18583},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 609, col: 11, offset: 18587},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 609, col: 13, offset: 18589},
										expr: &ruleRefExpr{
											pos:  position{line: 609, col: 14, offset: 18590},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 609, col: 25, offset: 18601},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 609, col: 30, offset: 18606},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 609, col: 32, offset: 18608},
										expr: &ruleRefExpr{
											pos:  position{line: 609, col: 33, offset: 18609},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 609, col: 45, offset: 18621},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 47, offset: 18623},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 18722},
						run: (*parser).callonip6addr22,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 18722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 612, col: 5, offset: 18722},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 612, col: 10, offset: 18727},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 612, col: 12, offset: 18729},
										expr: &ruleRefExpr{
											pos:  position{line: 612, col: 13, offset: 18730},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 612, col: 25, offset: 18742},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 27, offset: 18744},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 18815},
						run: (*parser).callonip6addr30,
						expr: &seqExpr{
							pos: position{line: 615, col: 5, offset: 18815},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 615, col: 5, offset: 18815},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 7, offset: 18817},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 615, col: 11, offset: 18821},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 615, col: 13, offset: 18823},
										expr: &ruleRefExpr{
											pos:  position{line: 615, col: 14, offset: 18824},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 615, col: 25, offset: 18835},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 18903},
						run: (*parser).callonip6addr38,
						expr: &litMatcher{
							pos:        position{line: 618, col: 5, offset: 18903},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ip6tail",
			pos:  position{line: 622, col: 1, offset: 18940},
			expr: &choiceExpr{
				pos: position{line: 623, col: 5, offset: 18952},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 5, offset: 18952},
						name: "addr",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 18961},
						name: "h16",
					},
				},
			},
		},
		{
			name: "h_append",
			pos:  position{line: 626, col: 1, offset: 18966},
			expr: &actionExpr{
				pos: position{line: 626, col: 12, offset: 18977},
				run: (*parser).callonh_append1,
				expr: &seqExpr{
					pos: position{line: 626, col: 12, offset: 18977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 626, col: 12, offset: 18977},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 626, col: 16, offset: 18981},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 18, offset: 18983},
								name: "h16",
							},
						},
					},
				},
			},
		},
		{
			name: "h_prepend",
			pos:  position{line: 627, col: 1, offset: 19020},
			expr: &actionExpr{
				pos: position{line: 627, col: 13, offset: 19032},
				run: (*parser).callonh_prepend1,
				expr: &seqExpr{
					pos: position{line: 627, col: 13, offset: 19032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 627, col: 13, offset: 19032},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 15, offset: 19034},
								name: "h16",
							},
						},
						&litMatcher{
							pos:        position{line: 627, col: 19, offset: 19038},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "subnet",
			pos:  position{line: 629, col: 1, offset: 19076},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 19087},
				run: (*parser).callonsubnet1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 19087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 19087},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 7, offset: 19089},
								name: "addr",
							},
						},
						&litMatcher{
							pos:        position{line: 630, col: 12, offset: 19094},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 16, offset: 19098},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 18, offset: 19100},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6subnet",
			pos:  position{line: 634, col: 1, offset: 19184},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 19198},
				run: (*parser).callonip6subnet1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 19198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 19198},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 7, offset: 19200},
								name: "ip6addr",
							},
						},
						&litMatcher{
							pos:        position{line: 635, col: 15, offset: 19208},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 635, col: 19, offset: 19212},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 21, offset: 19214},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "unsignedInteger",
			pos:  position{line: 639, col: 1, offset: 19288},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 19308},
				run: (*parser).callonunsignedInteger1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 5, offset: 19308},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 640, col: 7, offset: 19310},
						name: "suint",
					},
				},
			},
		},
		{
			name: "suint",
			pos:  position{line: 642, col: 1, offset: 19345},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 19355},
				run: (*parser).callonsuint1,
				expr: &oneOrMoreExpr{
					pos: position{line: 643, col: 5, offset: 19355},
					expr: &charClassMatcher{
						pos:        position{line: 643, col: 5, offset: 19355},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "integer",
			pos:  position{line: 645, col: 1, offset: 19394},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 19406},
				run: (*parser).calloninteger1,
				expr: &labeledExpr{
					pos:   position{line: 646, col: 5, offset: 19406},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 646, col: 7, offset: 19408},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "sinteger",
			pos:  position{line: 648, col: 1, offset: 19446},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 19459},
				run: (*parser).callonsinteger1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 19459},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 649, col: 5, offset: 19459},
							expr: &charClassMatcher{
								pos:        position{line: 649, col: 5, offset: 19459},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 11, offset: 19465},
							name: "suint",
						},
					},
				},
			},
		},
		{
			name: "double",
			pos:  position{line: 651, col: 1, offset: 19503},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19514},
				run: (*parser).callondouble1,
				expr: &labeledExpr{
					pos:   position{line: 652, col: 5, offset: 19514},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 652, col: 7, offset: 19516},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "sdouble",
			pos:  position{line: 656, col: 1, offset: 19563},
			expr: &choiceExpr{
				pos: position{line: 657, col: 5, offset: 19575},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19575},
						run: (*parser).callonsdouble2,
						expr: &seqExpr{
							pos: position{line: 657, col: 5, offset: 19575},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 657, col: 5, offset: 19575},
									expr: &litMatcher{
										pos:        position{line: 657, col: 5, offset: 19575},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 657, col: 10, offset: 19580},
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 10, offset: 19580},
										name: "doubleInteger",
									},
								},
								&litMatcher{
									pos:        position{line: 657, col: 25, offset: 19595},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 657, col: 29, offset: 19599},
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 29, offset: 19599},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 657, col: 42, offset: 19612},
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 42, offset: 19612},
										name: "exponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 19671},
						run: (*parser).callonsdouble13,
						expr: &seqExpr{
							pos: position{line: 660, col: 5, offset: 19671},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 660, col: 5, offset: 19671},
									expr: &litMatcher{
										pos:        position{line: 660, col: 5, offset: 19671},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 660, col: 10, offset: 19676},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 660, col: 14, offset: 19680},
									expr: &ruleRefExpr{
										pos:  position{line: 660, col: 14, offset: 19680},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 660, col: 27, offset: 19693},
									expr: &ruleRefExpr{
										pos:  position{line: 660, col: 27, offset: 19693},
										name: "exponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleInteger",
			pos:  position{line: 664, col: 1, offset: 19749},
			expr: &choiceExpr{
				pos: position{line: 665, col: 5, offset: 19767},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 665, col: 5, offset: 19767},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 666, col: 5, offset: 19775},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 666, col: 5, offset: 19775},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 666, col: 11, offset: 19781},
								expr: &charClassMatcher{
									pos:        position{line: 666, col: 11, offset: 19781},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleDigit",
			pos:  position{line: 668, col: 1, offset: 19789},
			expr: &charClassMatcher{
				pos:        position{line: 668, col: 15, offset: 19803},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "exponentPart",
			pos:  position{line: 670, col: 1, offset: 19810},
			expr: &seqExpr{
				pos: position{line: 670, col: 16, offset: 19825},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 670, col: 16, offset: 19825},
						val:        "e",
						ignoreCase: true,
					},
					&ruleRefExpr{
						pos:  position{line: 670, col: 21, offset: 19830},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "h16",
			pos:  position{line: 672, col: 1, offset: 19840},
			expr: &actionExpr{
				pos: position{line: 672, col: 7, offset: 19846},
				run: (*parser).callonh161,
				expr: &labeledExpr{
					pos:   position{line: 672, col: 7, offset: 19846},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 672, col: 13, offset: 19852},
						expr: &ruleRefExpr{
							pos:  position{line: 672, col: 13, offset: 19852},
							name: "hexdigit",
						},
					},
				},
			},
		},
		{
			name: "hexdigit",
			pos:  position{line: 674, col: 1, offset: 19894},
			expr: &charClassMatcher{
				pos:        position{line: 674, col: 12, offset: 19905},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "searchWord",
			pos:  position{line: 676, col: 1, offset: 19918},
			expr: &actionExpr{
				pos: position{line: 677, col: 5, offset: 19933},
				run: (*parser).callonsearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 677, col: 5, offset: 19933},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 677, col: 11, offset: 19939},
						expr: &ruleRefExpr{
							pos:  position{line: 677, col: 11, offset: 19939},
							name: "searchWordPart",
						},
					},
				},
			},
		},
		{
			name: "searchWordPart",
			pos:  position{line: 679, col: 1, offset: 19989},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 20008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 20008},
						run: (*parser).callonsearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 20008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 680, col: 5, offset: 20008},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 680, col: 10, offset: 20013},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 680, col: 13, offset: 20016},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 680, col: 13, offset: 20016},
												name: "escapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 680, col: 30, offset: 20033},
												name: "searchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 20070},
						run: (*parser).callonsearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 20070},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 681, col: 5, offset: 20070},
									expr: &choiceExpr{
										pos: position{line: 681, col: 7, offset: 20072},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 681, col: 7, offset: 20072},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;:]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';', ':'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 681, col: 43, offset: 20108},
												name: "ws",
											},
										},
									},
								},
								&anyMatcher{
									line: 681, col: 47, offset: 20112,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "quotedString",
			pos:  position{line: 683, col: 1, offset: 20146},
			expr: &choiceExpr{
				pos: position{line: 684, col: 5, offset: 20163},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 684, col: 5, offset: 20163},
						run: (*parser).callonquotedString2,
						expr: &seqExpr{
							pos: position{line: 684, col: 5, offset: 20163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 684, col: 5, offset: 20163},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 684, col: 9, offset: 20167},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 684, col: 11, offset: 20169},
										expr: &ruleRefExpr{
											pos:  position{line: 684, col: 11, offset: 20169},
											name: "doubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 684, col: 29, offset: 20187},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 685, col: 5, offset: 20224},
						run: (*parser).callonquotedString9,
						expr: &seqExpr{
							pos: position{line: 685, col: 5, offset: 20224},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 685, col: 5, offset: 20224},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 685, col: 9, offset: 20228},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 685, col: 11, offset: 20230},
										expr: &ruleRefExpr{
											pos:  position{line: 685, col: 11, offset: 20230},
											name: "singleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 685, col: 29, offset: 20248},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleQuotedChar",
			pos:  position{line: 687, col: 1, offset: 20282},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20303},
						run: (*parser).callondoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20303},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 688, col: 5, offset: 20303},
									expr: &choiceExpr{
										pos: position{line: 688, col: 7, offset: 20305},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 688, col: 7, offset: 20305},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 688, col: 13, offset: 20311},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 688, col: 26, offset: 20324,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20361},
						run: (*parser).callondoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20361},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20361},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 689, col: 10, offset: 20366},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 12, offset: 20368},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleQuotedChar",
			pos:  position{line: 691, col: 1, offset: 20402},
			expr: &choiceExpr{
				pos: position{line: 692, col: 5, offset: 20423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 20423},
						run: (*parser).callonsingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 692, col: 5, offset: 20423},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 692, col: 5, offset: 20423},
									expr: &choiceExpr{
										pos: position{line: 692, col: 7, offset: 20425},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 692, col: 7, offset: 20425},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 692, col: 13, offset: 20431},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 692, col: 26, offset: 20444,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20481},
						run: (*parser).callonsingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20481},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 693, col: 5, offset: 20481},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 693, col: 10, offset: 20486},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 12, offset: 20488},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "escapeSequence",
			pos:  position{line: 695, col: 1, offset: 20522},
			expr: &choiceExpr{
				pos: position{line: 696, col: 5, offset: 20541},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20541},
						run: (*parser).callonescapeSequence2,
						expr: &seqExpr{
							pos: position{line: 696, col: 5, offset: 20541},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 696, col: 5, offset: 20541},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 696, col: 9, offset: 20545},
									name: "hexdigit",
								},
								&ruleRefExpr{
									pos:  position{line: 696, col: 18, offset: 20554},
									name: "hexdigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 5, offset: 20605},
						name: "singleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 5, offset: 20626},
						name: "unicodeEscape",
					},
				},
			},
		},
		{
			name: "singleCharEscape",
			pos:  position{line: 700, col: 1, offset: 20641},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20662},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 701, col: 5, offset: 20662},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20670},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20678},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 20687},
						run: (*parser).callonsingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 704, col: 5, offset: 20687},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20716},
						run: (*parser).callonsingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 705, col: 5, offset: 20716},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20745},
						run: (*parser).callonsingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 706, col: 5, offset: 20745},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20774},
						run: (*parser).callonsingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 707, col: 5, offset: 20774},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20803},
						run: (*parser).callonsingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 708, col: 5, offset: 20803},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20832},
						run: (*parser).callonsingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 709, col: 5, offset: 20832},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "searchEscape",
			pos:  position{line: 711, col: 1, offset: 20858},
			expr: &choiceExpr{
				pos: position{line: 712, col: 5, offset: 20875},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20875},
						run: (*parser).callonsearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 712, col: 5, offset: 20875},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20903},
						run: (*parser).callonsearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 713, col: 5, offset: 20903},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "unicodeEscape",
			pos:  position{line: 715, col: 1, offset: 20930},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20948},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20948},
						run: (*parser).callonunicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20948},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 20948},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 716, col: 9, offset: 20952},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 716, col: 16, offset: 20959},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 716, col: 16, offset: 20959},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 25, offset: 20968},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 34, offset: 20977},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 43, offset: 20986},
												name: "hexdigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 21049},
						run: (*parser).callonunicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 21049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 719, col: 5, offset: 21049},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 719, col: 9, offset: 21053},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 719, col: 13, offset: 21057},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 719, col: 20, offset: 21064},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 719, col: 20, offset: 21064},
												name: "hexdigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 719, col: 29, offset: 21073},
												expr: &ruleRefExpr{
													pos:  position{line: 719, col: 29, offset: 21073},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 719, col: 39, offset: 21083},
												expr: &ruleRefExpr{
													pos:  position{line: 719, col: 39, offset: 21083},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 719, col: 49, offset: 21093},
												expr: &ruleRefExpr{
													pos:  position{line: 719, col: 49, offset: 21093},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 719, col: 59, offset: 21103},
												expr: &ruleRefExpr{
													pos:  position{line: 719, col: 59, offset: 21103},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 719, col: 69, offset: 21113},
												expr: &ruleRefExpr{
													pos:  position{line: 719, col: 69, offset: 21113},
													name: "hexdigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 719, col: 80, offset: 21124},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reString",
			pos:  position{line: 723, col: 1, offset: 21178},
			expr: &actionExpr{
				pos: position{line: 724, col: 5, offset: 21191},
				run: (*parser).callonreString1,
				expr: &seqExpr{
					pos: position{line: 724, col: 5, offset: 21191},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 724, col: 5, offset: 21191},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 724, col: 9, offset: 21195},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 11, offset: 21197},
								name: "reBody",
							},
						},
						&litMatcher{
							pos:        position{line: 724, col: 18, offset: 21204},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reBody",
			pos:  position{line: 726, col: 1, offset: 21227},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 21238},
				run: (*parser).callonreBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 727, col: 5, offset: 21238},
					expr: &choiceExpr{
						pos: position{line: 727, col: 6, offset: 21239},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 727, col: 6, offset: 21239},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 727, col: 13, offset: 21246},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "escapedChar",
			pos:  position{line: 729, col: 1, offset: 21286},
			expr: &charClassMatcher{
				pos:        position{line: 730, col: 5, offset: 21302},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "ws",
			pos:  position{line: 732, col: 1, offset: 21317},
			expr: &choiceExpr{
				pos: position{line: 733, col: 5, offset: 21324},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 733, col: 5, offset: 21324},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 734, col: 5, offset: 21333},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 735, col: 5, offset: 21342},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 736, col: 5, offset: 21351},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 737, col: 5, offset: 21359},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 738, col: 5, offset: 21372},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 740, col: 1, offset: 21382},
			expr: &oneOrMoreExpr{
				pos: position{line: 740, col: 18, offset: 21399},
				expr: &ruleRefExpr{
					pos:  position{line: 740, col: 18, offset: 21399},
					name: "ws",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 741, col: 1, offset: 21403},
			expr: &zeroOrMoreExpr{
				pos: position{line: 741, col: 6, offset: 21408},
				expr: &ruleRefExpr{
					pos:  position{line: 741, col: 6, offset: 21408},
					name: "ws",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 743, col: 1, offset: 21413},
			expr: &notExpr{
				pos: position{line: 743, col: 7, offset: 21419},
				expr: &anyMatcher{
					line: 743, col: 8, offset: 21420,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onquery2(procs interface{}) (interface{}, error) {
	var filt = map[string]interface{}{"op": "FilterProc", "filter": map[string]interface{}{"op": "MatchAll"}}
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{filt}, (procs.([]interface{}))...)}, nil

}

func (p *parser) callonquery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery2(stack["procs"])
}

func (c *current) onquery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{s}, (rest.([]interface{}))...)}, nil
	}

}

func (p *parser) callonquery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery5(stack["s"], stack["rest"])
}

func (c *current) onquery13(s interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{s}}, nil

}

func (p *parser) callonquery13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery13(stack["s"])
}

func (c *current) onprocChain1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonprocChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocChain1(stack["first"], stack["rest"])
}

func (c *current) onchainedProc1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonchainedProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainedProc1(stack["p"])
}

func (c *current) onsearch1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonsearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearch1(stack["expr"])
}

func (c *current) onsearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalOr"), nil

}

func (p *parser) callonsearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onoredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonoredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoredSearchTerm1(stack["t"])
}

func (c *current) onsearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalAnd"), nil

}

func (p *parser) callonsearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onandedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonandedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandedSearchTerm1(stack["f"])
}

func (c *current) onsearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "LogicalNot", "expr": e}, nil

}

func (p *parser) callonsearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor2(stack["e"])
}

func (c *current) onsearchFactor13(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor13(stack["s"])
}

func (c *current) onsearchFactor19(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonsearchFactor19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor19(stack["expr"])
}

func (c *current) onsearchPred2(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred2(stack["comp"], stack["v"])
}

func (c *current) onsearchPred11(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": true, "value": v}, nil

}

func (p *parser) callonsearchPred11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred11(stack["comp"], stack["v"])
}

func (c *current) onsearchPred20(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": comp, "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred20(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred30(expr, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpression", "operator": comp, "lhs": expr, "rhs": v}, nil

}

func (p *parser) callonsearchPred30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred30(stack["expr"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred42(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": "in", "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred42(stack["v"])
}

func (c *current) onsearchPred50(v, f interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": "in", "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred50(stack["v"], stack["f"])
}

func (c *current) onsearchPred59(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonsearchPred59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred59(stack["v"])
}

func (c *current) onsearchPred62(v interface{}) (interface{}, error) {
	var str = v.(string)
	if str == "*" {
		return map[string]interface{}{"op": "MatchAll"}, nil
	}
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": literal}, nil

}

func (p *parser) callonsearchPred62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred62(stack["v"])
}

func (c *current) onsearchLiteral7(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonsearchLiteral7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral7(stack["i"])
}

func (c *current) onsearchLiteral13(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral13(stack["v"])
}

func (c *current) onsearchLiteral21(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral21(stack["v"])
}

func (c *current) onsearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonsearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchValue3(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null"}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onprocList1(first, rest interface{}) (interface{}, error) {
	var fp = map[string]interface{}{"op": "SequentialProc", "procs": first}
	if rest != nil {
		return map[string]interface{}{"op": "ParallelProc", "procs": append([]interface{}{fp}, (rest.([]interface{}))...)}, nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonprocList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocList1(stack["first"], stack["rest"])
}

func (c *current) onparallelChain1(ch interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": ch}, nil
}

func (p *parser) callonparallelChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparallelChain1(stack["ch"])
}

func (c *current) onproc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonproc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onproc4(stack["proc"])
}

func (c *current) ongroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callongroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys1(stack["columns"])
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) oneveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) calloneveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneveryDur1(stack["dur"])
}

func (c *current) onandToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonandToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandToken1()
}

func (c *current) onorToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonorToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onorToken1()
}

func (c *current) oninToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) calloninToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninToken1()
}

func (c *current) onnotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonnotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotToken1()
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": string(c.text)}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onRootField2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".", "lhs": map[string]interface{}{"op": "RootRecord"}, "rhs": field}, nil
}

func (p *parser) callonRootField2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField2(stack["field"])
}

func (c *current) onRootField12() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonRootField12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField12()
}

func (c *current) onDerefExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpression1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["expr"])
}

func (c *current) onDeref8(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref8(stack["id"])
}

func (c *current) onFunctionExpr1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunctionExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionExpr1(stack["fn"], stack["args"])
}

func (c *current) onfieldExprList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonfieldExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExprList1(stack["first"], stack["rest"])
}

func (c *current) onExprList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprList1(stack["first"], stack["rest"])
}

func (c *current) ongroupByProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "reducers": reducers}
	if keys != nil {
		p["keys"] = keys
	}
	if every != nil {
		p["duration"] = every
	}
	if limit != nil {
		p["limit"] = limit
	}
	return p, nil

}

func (p *parser) callongroupByProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment10(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment10(stack["reducer"])
}

func (c *current) onreducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonreducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onwhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonwhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwhere1(stack["expr"])
}

func (c *current) onreducerList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonreducerList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerList1(stack["first"], stack["rest"])
}

func (c *current) onsort8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonsort8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort8(stack["l"])
}

func (c *current) onsort1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonsort1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort1(stack["args"], stack["list"])
}

func (c *current) onsortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonsortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs4(stack["a"])
}

func (c *current) onsortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonsortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs1(stack["args"])
}

func (c *current) onsortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonsortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg2()
}

func (c *current) onsortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg9()
}

func (c *current) onsortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonsortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg4(stack["where"])
}

func (c *current) ontop6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callontop6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop6(stack["n"])
}

func (c *current) ontop18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callontop18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop18(stack["f"])
}

func (c *current) ontop1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc"}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callontop1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onprocLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonprocLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocLimitArg1(stack["limit"])
}

func (c *current) oncutArgs4() (interface{}, error) {
	return map[string]interface{}{"name": "c", "value": nil}, nil
}

func (p *parser) calloncutArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs4()
}

func (c *current) oncutArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)

}

func (p *parser) calloncutArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs1(stack["args"])
}

func (c *current) oncut1(args, columns interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "CutProc", "fields": columns, "complement": false}
	if _, ok := argm["c"]; ok {
		proc["complement"] = true
	}
	return proc, nil

}

func (p *parser) calloncut1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut1(stack["args"], stack["columns"])
}

func (c *current) onhead2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonhead2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead2(stack["count"])
}

func (c *current) onhead8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonhead8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead8()
}

func (c *current) ontail2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callontail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail2(stack["count"])
}

func (c *current) ontail8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callontail8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail8()
}

func (c *current) onfilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonfilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilter1(stack["expr"])
}

func (c *current) onuniq2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonuniq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq2()
}

func (c *current) onuniq7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonuniq7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq7()
}

func (c *current) onput1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput1(stack["columns"])
}

func (c *current) onrename9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonrename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename9(stack["cl"])
}

func (c *current) onrename1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonrename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename1(stack["first"], stack["rest"])
}

func (c *current) onfuse1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonfuse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuse1()
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onPrimary10(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["expr"])
}

func (c *current) onConditionalExpression2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpression2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalORExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalORExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalANDExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalANDExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpression7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpression2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["e"])
}

func (c *current) onCastExpression7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonCastExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression7(stack["typ"])
}

func (c *current) onCastExpression2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpression2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpression2(stack["first"], stack["rest"])
}

func (c *current) onFunctionCall1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunctionCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionCall1(stack["fn"], stack["args"])
}

func (c *current) onFunctionName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFunctionName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onseconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonseconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds2()
}

func (c *current) onseconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonseconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds4(stack["num"])
}

func (c *current) onminutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonminutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes2()
}

func (c *current) onminutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonminutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes4(stack["num"])
}

func (c *current) onhours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonhours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours2()
}

func (c *current) onhours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonhours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours4(stack["num"])
}

func (c *current) ondays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callondays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays2()
}

func (c *current) ondays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callondays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays4(stack["num"])
}

func (c *current) onweeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks2()
}

func (c *current) onweeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks4(stack["num"])
}

func (c *current) onaddr1(a interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonaddr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onaddr1(stack["a"])
}

func (c *current) onip6addr2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr2(stack["a"], stack["b"])
}

func (c *current) onip6addr9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonip6addr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onip6addr22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr22(stack["a"], stack["b"])
}

func (c *current) onip6addr30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonip6addr30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr30(stack["a"], stack["b"])
}

func (c *current) onip6addr38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonip6addr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr38()
}

func (c *current) onh_append1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonh_append1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_append1(stack["v"])
}

func (c *current) onh_prepend1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonh_prepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_prepend1(stack["v"])
}

func (c *current) onsubnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonsubnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsubnet1(stack["a"], stack["m"])
}

func (c *current) onip6subnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonip6subnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6subnet1(stack["a"], stack["m"])
}

func (c *current) onunsignedInteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonunsignedInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunsignedInteger1(stack["s"])
}

func (c *current) onsuint1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsuint1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuint1()
}

func (c *current) oninteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) calloninteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninteger1(stack["s"])
}

func (c *current) onsinteger1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsinteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsinteger1()
}

func (c *current) ondouble1(s interface{}) (interface{}, error) {
	return parseFloat(s), nil

}

func (p *parser) callondouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondouble1(stack["s"])
}

func (c *current) onsdouble2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble2()
}

func (c *current) onsdouble13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble13()
}

func (c *current) onh161(chars interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonh161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh161(stack["chars"])
}

func (c *current) onsearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonsearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWord1(stack["chars"])
}

func (c *current) onsearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart2(stack["s"])
}

func (c *current) onsearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart9()
}

func (c *current) onquotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString2(stack["v"])
}

func (c *current) onquotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString9(stack["v"])
}

func (c *current) ondoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar2()
}

func (c *current) ondoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callondoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar9(stack["s"])
}

func (c *current) onsingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar2()
}

func (c *current) onsingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar9(stack["s"])
}

func (c *current) onescapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonescapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescapeSequence2()
}

func (c *current) onsingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonsingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape5()
}

func (c *current) onsingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonsingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape7()
}

func (c *current) onsingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonsingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape9()
}

func (c *current) onsingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonsingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape11()
}

func (c *current) onsingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonsingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape13()
}

func (c *current) onsingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonsingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape15()
}

func (c *current) onsearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonsearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape2()
}

func (c *current) onsearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonsearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape4()
}

func (c *current) onunicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape2(stack["chars"])
}

func (c *current) onunicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape11(stack["chars"])
}

func (c *current) onreString1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonreString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreString1(stack["v"])
}

func (c *current) onreBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonreBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
