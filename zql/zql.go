// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 16, col: 1, offset: 352},
			expr: &ruleRefExpr{
				pos:  position{line: 17, col: 5, offset: 432},
				name: "Sequential",
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 19, col: 1, offset: 444},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 459},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 20, col: 5, offset: 459},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 20, col: 5, offset: 459},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 20, col: 5, offset: 459},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 20, col: 11, offset: 465},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 20, col: 21, offset: 475},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 20, col: 26, offset: 480},
										expr: &ruleRefExpr{
											pos:  position{line: 20, col: 26, offset: 480},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 640},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 23, col: 5, offset: 640},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 8, offset: 643},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 27, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 27, col: 18, offset: 772},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 27, col: 18, offset: 772},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 27, col: 18, offset: 772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 27, col: 21, offset: 775},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 25, offset: 779},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 28, offset: 782},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 30, offset: 784},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 29, col: 1, offset: 813},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 826},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 30, col: 5, offset: 826},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 832},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 30, col: 22, offset: 843},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 27, offset: 848},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 27, offset: 848},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 949},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 33, col: 5, offset: 949},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 11, offset: 955},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 37, col: 1, offset: 1014},
			expr: &actionExpr{
				pos: position{line: 38, col: 5, offset: 1031},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 38, col: 5, offset: 1031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 38, col: 5, offset: 1031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 38, col: 8, offset: 1034},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 38, col: 13, offset: 1039},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 38, col: 16, offset: 1042},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 19, offset: 1045},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 40, col: 1, offset: 1076},
			expr: &choiceExpr{
				pos: position{line: 41, col: 5, offset: 1090},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1090},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 1090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 1090},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 13, offset: 1098},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 16, offset: 1101},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 20, offset: 1105},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 23, offset: 1108},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 28, offset: 1113},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 41, col: 31, offset: 1116},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 41, col: 41, offset: 1126},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 50, offset: 1135},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 53, offset: 1138},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 5, offset: 1237},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1250},
						run: (*parser).callonOperation15,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1250},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 7, offset: 1252},
										name: "Aggregation",
									},
								},
								&notExpr{
									pos: position{line: 45, col: 19, offset: 1264},
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 20, offset: 1265},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1298},
						run: (*parser).callonOperation21,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1298},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 5, offset: 1298},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 10, offset: 1303},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 46, col: 24, offset: 1317},
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 25, offset: 1318},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 50, col: 1, offset: 1413},
			expr: &seqExpr{
				pos: position{line: 50, col: 13, offset: 1425},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 13, offset: 1425},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 50, col: 17, offset: 1429},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 50, col: 18, offset: 1430},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 50, col: 18, offset: 1430},
										expr: &litMatcher{
											pos:        position{line: 50, col: 19, offset: 1431},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 24, offset: 1436},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 38, offset: 1450},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 57, offset: 1469},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 50, col: 82, offset: 1494},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 50, col: 88, offset: 1500},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 51, col: 1, offset: 1505},
			expr: &choiceExpr{
				pos: position{line: 51, col: 12, offset: 1516},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 51, col: 13, offset: 1517},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 51, col: 13, offset: 1517},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 51, col: 16, offset: 1520},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 51, col: 16, offset: 1520},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 51, col: 26, offset: 1530},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 35, offset: 1539},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 51, col: 43, offset: 1547},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 51, col: 43, offset: 1547},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 51, col: 46, offset: 1550},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 53, col: 1, offset: 1556},
			expr: &actionExpr{
				pos: position{line: 54, col: 5, offset: 1574},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 54, col: 5, offset: 1574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 54, col: 5, offset: 1574},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 11, offset: 1580},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 54, col: 21, offset: 1590},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 54, col: 26, offset: 1595},
								expr: &ruleRefExpr{
									pos:  position{line: 54, col: 26, offset: 1595},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 58, col: 1, offset: 1669},
			expr: &actionExpr{
				pos: position{line: 58, col: 16, offset: 1684},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 58, col: 16, offset: 1684},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 58, col: 16, offset: 1684},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 18, offset: 1686},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 26, offset: 1694},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 28, offset: 1696},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 30, offset: 1698},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 60, col: 1, offset: 1748},
			expr: &actionExpr{
				pos: position{line: 61, col: 5, offset: 1762},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 61, col: 5, offset: 1762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1762},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 11, offset: 1768},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1785},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 62, col: 10, offset: 1790},
								expr: &actionExpr{
									pos: position{line: 62, col: 11, offset: 1791},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 62, col: 11, offset: 1791},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 62, col: 11, offset: 1791},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 62, col: 14, offset: 1794},
												expr: &seqExpr{
													pos: position{line: 62, col: 15, offset: 1795},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 62, col: 15, offset: 1795},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 62, col: 24, offset: 1804},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 62, col: 28, offset: 1808},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 62, col: 31, offset: 1811},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 62, col: 36, offset: 1816},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 66, col: 1, offset: 1932},
			expr: &choiceExpr{
				pos: position{line: 67, col: 5, offset: 1949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1949},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1949},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 67, col: 6, offset: 1950},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 67, col: 6, offset: 1950},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 67, col: 6, offset: 1950},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 67, col: 15, offset: 1959},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 67, col: 19, offset: 1963},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 67, col: 19, offset: 1963},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 67, col: 23, offset: 1967},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 27, offset: 1971},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 29, offset: 1973},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 5, offset: 2089},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 5, offset: 2102},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2117},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2117},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 9, offset: 2121},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 12, offset: 2124},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 17, offset: 2129},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 31, offset: 2143},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 72, col: 34, offset: 2146},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 74, col: 1, offset: 2172},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2185},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2185},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 9, offset: 2189},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 12, offset: 2192},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 22, offset: 2202},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 36, offset: 2216},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 39, offset: 2219},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2221},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2915},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2915},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 96, col: 5, offset: 2915},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 7, offset: 2917},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 12, offset: 2922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 15, offset: 2925},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 20, offset: 2930},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 34, offset: 2944},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 37, offset: 2947},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 39, offset: 2949},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 96, col: 57, offset: 2967},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 58, offset: 2968},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 3086},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 3086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 99, col: 5, offset: 3086},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 7, offset: 3088},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 99, col: 19, offset: 3100},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 99, col: 21, offset: 3102},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 99, col: 29, offset: 3110},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 99, col: 31, offset: 3112},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3799},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3799},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 120, col: 5, offset: 3799},
									expr: &seqExpr{
										pos: position{line: 120, col: 7, offset: 3801},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 120, col: 7, offset: 3801},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 120, col: 19, offset: 3813},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 120, col: 24, offset: 3818},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 26, offset: 3820},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 120, col: 44, offset: 3838},
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 45, offset: 3839},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 3954},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 123, col: 5, offset: 3954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 123, col: 5, offset: 3954},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 123, col: 9, offset: 3958},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 10, offset: 3959},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 127, col: 1, offset: 4069},
			expr: &choiceExpr{
				pos: position{line: 128, col: 5, offset: 4085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 5, offset: 4085},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 129, col: 5, offset: 4097},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 129, col: 5, offset: 4097},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 7, offset: 4099},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 133, col: 1, offset: 4204},
			expr: &choiceExpr{
				pos: position{line: 134, col: 5, offset: 4226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 134, col: 5, offset: 4226},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 4238},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 135, col: 5, offset: 4238},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 7, offset: 4240},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 145, col: 1, offset: 4526},
			expr: &actionExpr{
				pos: position{line: 146, col: 5, offset: 4541},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 146, col: 5, offset: 4541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 146, col: 5, offset: 4541},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 146, col: 10, offset: 4546},
								expr: &ruleRefExpr{
									pos:  position{line: 146, col: 10, offset: 4546},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 20, offset: 4556},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 25, offset: 4561},
								expr: &litMatcher{
									pos:        position{line: 146, col: 26, offset: 4562},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 150, col: 1, offset: 4629},
			expr: &choiceExpr{
				pos: position{line: 151, col: 5, offset: 4642},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4642},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4642},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 151, col: 5, offset: 4642},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 7, offset: 4644},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 151, col: 13, offset: 4650},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 15, offset: 4652},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 152, col: 5, offset: 4702},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 154, col: 1, offset: 4711},
			expr: &actionExpr{
				pos: position{line: 154, col: 9, offset: 4719},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 154, col: 9, offset: 4719},
					expr: &litMatcher{
						pos:        position{line: 154, col: 9, offset: 4719},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 156, col: 1, offset: 4756},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 4772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 157, col: 5, offset: 4772},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 158, col: 5, offset: 4785},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 159, col: 5, offset: 4797},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 160, col: 5, offset: 4810},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 5, offset: 4822},
						name: "ByToken",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 165, col: 1, offset: 4879},
			expr: &ruleRefExpr{
				pos:  position{line: 165, col: 14, offset: 4892},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 167, col: 1, offset: 4912},
			expr: &actionExpr{
				pos: position{line: 167, col: 14, offset: 4925},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 167, col: 15, offset: 4926},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 167, col: 15, offset: 4926},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 21, offset: 4932},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 28, offset: 4939},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 35, offset: 4946},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 42, offset: 4953},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 48, offset: 4959},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 167, col: 55, offset: 4966},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 169, col: 1, offset: 5003},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 5026},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 5026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 170, col: 5, offset: 5026},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 11, offset: 5032},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 5, offset: 5050},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 10, offset: 5055},
								expr: &actionExpr{
									pos: position{line: 171, col: 11, offset: 5056},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 171, col: 11, offset: 5056},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 171, col: 11, offset: 5056},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 171, col: 14, offset: 5059},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5062},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 171, col: 28, offset: 5073},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 171, col: 31, offset: 5076},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 36, offset: 5081},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 175, col: 1, offset: 5198},
			expr: &actionExpr{
				pos: position{line: 176, col: 5, offset: 5216},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 176, col: 5, offset: 5216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 176, col: 5, offset: 5216},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 11, offset: 5222},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 5240},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 10, offset: 5245},
								expr: &actionExpr{
									pos: position{line: 177, col: 11, offset: 5246},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 177, col: 11, offset: 5246},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 177, col: 11, offset: 5246},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 177, col: 14, offset: 5249},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 177, col: 17, offset: 5252},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 177, col: 34, offset: 5269},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 177, col: 37, offset: 5272},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 177, col: 42, offset: 5277},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 181, col: 1, offset: 5394},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 5412},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 182, col: 5, offset: 5412},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5412},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 11, offset: 5418},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 5, offset: 5437},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 10, offset: 5442},
								expr: &actionExpr{
									pos: position{line: 183, col: 11, offset: 5443},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 183, col: 11, offset: 5443},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 183, col: 11, offset: 5443},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 183, col: 14, offset: 5446},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 17, offset: 5449},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 183, col: 40, offset: 5472},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 183, col: 43, offset: 5475},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 48, offset: 5480},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 187, col: 1, offset: 5598},
			expr: &choiceExpr{
				pos: position{line: 188, col: 5, offset: 5617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5617},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 188, col: 5, offset: 5617},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 188, col: 5, offset: 5617},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 7, offset: 5619},
										name: "SearchExprFunc",
									},
								},
								&labeledExpr{
									pos:   position{line: 188, col: 22, offset: 5634},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 188, col: 28, offset: 5640},
										run: (*parser).callonSearchExprCast7,
										expr: &seqExpr{
											pos: position{line: 188, col: 28, offset: 5640},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 188, col: 28, offset: 5640},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 188, col: 32, offset: 5644},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 188, col: 36, offset: 5648},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 5778},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 193, col: 1, offset: 5794},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 5813},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 5827},
						run: (*parser).callonSearchExprFunc3,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 5827},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 195, col: 5, offset: 5827},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 5833},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 195, col: 20, offset: 5842},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 195, col: 25, offset: 5847},
										expr: &ruleRefExpr{
											pos:  position{line: 195, col: 26, offset: 5848},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 5920},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 5934},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 203, col: 1, offset: 5969},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5985},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 5985},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 5985},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 204, col: 5, offset: 5985},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 204, col: 11, offset: 5991},
										expr: &ruleRefExpr{
											pos:  position{line: 204, col: 11, offset: 5991},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 21, offset: 6001},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 26, offset: 6006},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 38, offset: 6018},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 44, offset: 6024},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 6173},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 6173},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 207, col: 5, offset: 6173},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 11, offset: 6179},
										expr: &ruleRefExpr{
											pos:  position{line: 207, col: 11, offset: 6179},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 21, offset: 6189},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 30, offset: 6198},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 39, offset: 6207},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 44, offset: 6212},
										expr: &seqExpr{
											pos: position{line: 207, col: 45, offset: 6213},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 207, col: 45, offset: 6213},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 47, offset: 6215},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 61, offset: 6229},
									label: "limit",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 67, offset: 6235},
										expr: &ruleRefExpr{
											pos:  position{line: 207, col: 67, offset: 6235},
											name: "LimitArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 215, col: 1, offset: 6477},
			expr: &actionExpr{
				pos: position{line: 216, col: 5, offset: 6490},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 216, col: 5, offset: 6490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 5, offset: 6490},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 14, offset: 6499},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 16, offset: 6501},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 20, offset: 6505},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 29, offset: 6514},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 218, col: 1, offset: 6537},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6553},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 219, col: 5, offset: 6553},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 219, col: 5, offset: 6553},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 13, offset: 6561},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 15, offset: 6563},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 23, offset: 6571},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 221, col: 1, offset: 6612},
			expr: &choiceExpr{
				pos: position{line: 222, col: 5, offset: 6625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6625},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 6625},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 222, col: 5, offset: 6625},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 222, col: 7, offset: 6627},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 14, offset: 6634},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 222, col: 16, offset: 6636},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 25, offset: 6645},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 27, offset: 6647},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 33, offset: 6653},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 6684},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 223, col: 5, offset: 6684},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 228, col: 1, offset: 6944},
			expr: &choiceExpr{
				pos: position{line: 229, col: 5, offset: 6963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6963},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6978},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6978},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 10, offset: 6983},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 232, col: 1, offset: 7073},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 7093},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 7093},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 7093},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 11, offset: 7099},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 26, offset: 7114},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 233, col: 31, offset: 7119},
								expr: &actionExpr{
									pos: position{line: 233, col: 32, offset: 7120},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 233, col: 32, offset: 7120},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 32, offset: 7120},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 233, col: 35, offset: 7123},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 233, col: 39, offset: 7127},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 42, offset: 7130},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 47, offset: 7135},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 237, col: 1, offset: 7257},
			expr: &choiceExpr{
				pos: position{line: 238, col: 5, offset: 7279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 7279},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 238, col: 5, offset: 7279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 238, col: 5, offset: 7279},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 238, col: 10, offset: 7284},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 238, col: 15, offset: 7289},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 238, col: 18, offset: 7292},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 238, col: 22, offset: 7296},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 238, col: 25, offset: 7299},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 238, col: 33, offset: 7307},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 7417},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 241, col: 5, offset: 7417},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 13, offset: 7425},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 245, col: 1, offset: 7531},
			expr: &actionExpr{
				pos: position{line: 246, col: 5, offset: 7543},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 246, col: 5, offset: 7543},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 246, col: 5, offset: 7543},
							expr: &seqExpr{
								pos: position{line: 246, col: 7, offset: 7545},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 246, col: 7, offset: 7545},
										name: "NotReducers",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 19, offset: 7557},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 246, col: 22, offset: 7560},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 27, offset: 7565},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 30, offset: 7568},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 42, offset: 7580},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 246, col: 45, offset: 7583},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 49, offset: 7587},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 52, offset: 7590},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 246, col: 57, offset: 7595},
								expr: &ruleRefExpr{
									pos:  position{line: 246, col: 57, offset: 7595},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 64, offset: 7602},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 246, col: 67, offset: 7605},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 246, col: 71, offset: 7609},
							expr: &seqExpr{
								pos: position{line: 246, col: 73, offset: 7611},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 246, col: 73, offset: 7611},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 246, col: 76, offset: 7614},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 81, offset: 7619},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 246, col: 87, offset: 7625},
								expr: &ruleRefExpr{
									pos:  position{line: 246, col: 87, offset: 7625},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 254, col: 1, offset: 7821},
			expr: &choiceExpr{
				pos: position{line: 255, col: 5, offset: 7837},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7837},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7856},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7869},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "NotReducers",
			pos:  position{line: 259, col: 1, offset: 7878},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 7894},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 260, col: 5, offset: 7894},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 261, col: 5, offset: 7904},
						val:        "match",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 263, col: 1, offset: 7913},
			expr: &actionExpr{
				pos: position{line: 263, col: 15, offset: 7927},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 263, col: 15, offset: 7927},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 263, col: 15, offset: 7927},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 263, col: 17, offset: 7929},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 25, offset: 7937},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 27, offset: 7939},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 32, offset: 7944},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 265, col: 1, offset: 7980},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 7993},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 7993},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 7993},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 11, offset: 7999},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 29, offset: 8017},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 34, offset: 8022},
								expr: &seqExpr{
									pos: position{line: 266, col: 35, offset: 8023},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 35, offset: 8023},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 266, col: 38, offset: 8026},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 42, offset: 8030},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 45, offset: 8033},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 274, col: 1, offset: 8238},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 8251},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 8251},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 8264},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 8276},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 8288},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 8301},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 8314},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 8327},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 8340},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8355},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8368},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8380},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8395},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8408},
						name: "JoinProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 289, col: 1, offset: 8418},
			expr: &actionExpr{
				pos: position{line: 290, col: 5, offset: 8431},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 290, col: 5, offset: 8431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 5, offset: 8431},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 290, col: 13, offset: 8439},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 18, offset: 8444},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 27, offset: 8453},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 32, offset: 8458},
								expr: &actionExpr{
									pos: position{line: 290, col: 33, offset: 8459},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 290, col: 33, offset: 8459},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 290, col: 33, offset: 8459},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 290, col: 35, offset: 8461},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 290, col: 37, offset: 8463},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 304, col: 1, offset: 8882},
			expr: &actionExpr{
				pos: position{line: 304, col: 12, offset: 8893},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 304, col: 12, offset: 8893},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 304, col: 17, offset: 8898},
						expr: &actionExpr{
							pos: position{line: 304, col: 18, offset: 8899},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 304, col: 18, offset: 8899},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 304, col: 18, offset: 8899},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 304, col: 20, offset: 8901},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 304, col: 22, offset: 8903},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 306, col: 1, offset: 8959},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8971},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8971},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 307, col: 5, offset: 8971},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 9046},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 9046},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 308, col: 5, offset: 9046},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 308, col: 14, offset: 9055},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 308, col: 16, offset: 9057},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 308, col: 23, offset: 9064},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 308, col: 24, offset: 9065},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 308, col: 24, offset: 9065},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 308, col: 34, offset: 9075},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 310, col: 1, offset: 9189},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9201},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 9201},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 311, col: 12, offset: 9208},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 18, offset: 9214},
								expr: &actionExpr{
									pos: position{line: 311, col: 19, offset: 9215},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 311, col: 19, offset: 9215},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 19, offset: 9215},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 21, offset: 9217},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 311, col: 23, offset: 9219},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 47, offset: 9243},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 53, offset: 9249},
								expr: &seqExpr{
									pos: position{line: 311, col: 54, offset: 9250},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 311, col: 54, offset: 9250},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 311, col: 56, offset: 9252},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 67, offset: 9263},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 74, offset: 9270},
								expr: &actionExpr{
									pos: position{line: 311, col: 75, offset: 9271},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 311, col: 75, offset: 9271},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 75, offset: 9271},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 77, offset: 9273},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 311, col: 79, offset: 9275},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 325, col: 1, offset: 9626},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 9638},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 9638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 326, col: 5, offset: 9638},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 12, offset: 9645},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 14, offset: 9647},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 22, offset: 9655},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 330, col: 1, offset: 9757},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9770},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9770},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9770},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 13, offset: 9778},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 15, offset: 9780},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 23, offset: 9788},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 335, col: 1, offset: 9891},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 9904},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 9904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 336, col: 5, offset: 9904},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 13, offset: 9912},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 15, offset: 9914},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 23, offset: 9922},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 340, col: 1, offset: 10020},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 10033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 10033},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 341, col: 5, offset: 10033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 341, col: 5, offset: 10033},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 13, offset: 10041},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 15, offset: 10043},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 21, offset: 10049},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 10131},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 342, col: 5, offset: 10131},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 344, col: 1, offset: 10209},
			expr: &choiceExpr{
				pos: position{line: 345, col: 5, offset: 10222},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 345, col: 5, offset: 10222},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 345, col: 5, offset: 10222},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 345, col: 5, offset: 10222},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 345, col: 13, offset: 10230},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 345, col: 15, offset: 10232},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 345, col: 21, offset: 10238},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 346, col: 5, offset: 10320},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 346, col: 5, offset: 10320},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 348, col: 1, offset: 10398},
			expr: &actionExpr{
				pos: position{line: 349, col: 5, offset: 10413},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 349, col: 5, offset: 10413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 5, offset: 10413},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 15, offset: 10423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 349, col: 17, offset: 10425},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 20, offset: 10428},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 353, col: 1, offset: 10465},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10476},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 354, col: 5, offset: 10476},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 354, col: 10, offset: 10481},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 358, col: 1, offset: 10581},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 10594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10594},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10594},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 13, offset: 10602},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 359, col: 15, offset: 10604},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 10695},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 362, col: 5, offset: 10695},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 366, col: 1, offset: 10787},
			expr: &actionExpr{
				pos: position{line: 367, col: 5, offset: 10799},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 367, col: 5, offset: 10799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 5, offset: 10799},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 367, col: 12, offset: 10806},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 367, col: 14, offset: 10808},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 22, offset: 10816},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 371, col: 1, offset: 10919},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 10934},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 10934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 10934},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 15, offset: 10944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 17, offset: 10946},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 23, offset: 10952},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 34, offset: 10963},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 372, col: 39, offset: 10968},
								expr: &actionExpr{
									pos: position{line: 372, col: 40, offset: 10969},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 372, col: 40, offset: 10969},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 372, col: 40, offset: 10969},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 372, col: 43, offset: 10972},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 372, col: 47, offset: 10976},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 372, col: 50, offset: 10979},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 372, col: 53, offset: 10982},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 376, col: 1, offset: 11152},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11165},
				run: (*parser).callonFuseProc1,
				expr: &litMatcher{
					pos:        position{line: 377, col: 5, offset: 11165},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 381, col: 1, offset: 11241},
			expr: &choiceExpr{
				pos: position{line: 382, col: 5, offset: 11254},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 382, col: 5, offset: 11254},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 382, col: 5, offset: 11254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 382, col: 5, offset: 11254},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 13, offset: 11262},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 382, col: 15, offset: 11264},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 23, offset: 11272},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 31, offset: 11280},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 382, col: 34, offset: 11283},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 38, offset: 11287},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 382, col: 41, offset: 11290},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 50, offset: 11299},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 382, col: 58, offset: 11307},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 382, col: 66, offset: 11315},
										expr: &seqExpr{
											pos: position{line: 382, col: 67, offset: 11316},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 382, col: 67, offset: 11316},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 382, col: 69, offset: 11318},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 389, col: 5, offset: 11576},
						run: (*parser).callonJoinProc18,
						expr: &seqExpr{
							pos: position{line: 389, col: 5, offset: 11576},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 389, col: 5, offset: 11576},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 13, offset: 11584},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 389, col: 15, offset: 11586},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 389, col: 19, offset: 11590},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 389, col: 27, offset: 11598},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 389, col: 35, offset: 11606},
										expr: &seqExpr{
											pos: position{line: 389, col: 36, offset: 11607},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 389, col: 36, offset: 11607},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 389, col: 38, offset: 11609},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 397, col: 1, offset: 11855},
			expr: &choiceExpr{
				pos: position{line: 398, col: 5, offset: 11867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 398, col: 5, offset: 11867},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11876},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 399, col: 5, offset: 11876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 5, offset: 11876},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 399, col: 9, offset: 11880},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 14, offset: 11885},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 399, col: 19, offset: 11890},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 401, col: 1, offset: 11916},
			expr: &ruleRefExpr{
				pos:  position{line: 401, col: 8, offset: 11923},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 403, col: 1, offset: 11934},
			expr: &ruleRefExpr{
				pos:  position{line: 403, col: 13, offset: 11946},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 405, col: 1, offset: 11952},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11967},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11967},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 406, col: 5, offset: 11967},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 11, offset: 11973},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 21, offset: 11983},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 406, col: 26, offset: 11988},
								expr: &seqExpr{
									pos: position{line: 406, col: 27, offset: 11989},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 406, col: 27, offset: 11989},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 406, col: 30, offset: 11992},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 406, col: 34, offset: 11996},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 406, col: 37, offset: 11999},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 416, col: 1, offset: 12198},
			expr: &actionExpr{
				pos: position{line: 417, col: 5, offset: 12208},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 417, col: 5, offset: 12208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 5, offset: 12208},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 11, offset: 12214},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 16, offset: 12219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 417, col: 21, offset: 12224},
								expr: &seqExpr{
									pos: position{line: 417, col: 22, offset: 12225},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 417, col: 22, offset: 12225},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 417, col: 25, offset: 12228},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 417, col: 29, offset: 12232},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 417, col: 32, offset: 12235},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 427, col: 1, offset: 12429},
			expr: &actionExpr{
				pos: position{line: 428, col: 5, offset: 12444},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 428, col: 5, offset: 12444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 12444},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 9, offset: 12448},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 428, col: 14, offset: 12453},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 428, col: 17, offset: 12456},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 428, col: 21, offset: 12460},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 428, col: 24, offset: 12463},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 28, offset: 12467},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 430, col: 1, offset: 12556},
			expr: &ruleRefExpr{
				pos:  position{line: 430, col: 8, offset: 12563},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 432, col: 1, offset: 12580},
			expr: &choiceExpr{
				pos: position{line: 433, col: 5, offset: 12600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 12600},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 433, col: 5, offset: 12600},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 433, col: 5, offset: 12600},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 15, offset: 12610},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 29, offset: 12624},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 433, col: 32, offset: 12627},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 36, offset: 12631},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 39, offset: 12634},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 50, offset: 12645},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 55, offset: 12650},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 433, col: 58, offset: 12653},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 62, offset: 12657},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 65, offset: 12660},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 76, offset: 12671},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 5, offset: 12818},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 438, col: 1, offset: 12833},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12851},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 12851},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 12857},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 12876},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 10, offset: 12881},
								expr: &actionExpr{
									pos: position{line: 440, col: 11, offset: 12882},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 440, col: 11, offset: 12882},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 440, col: 11, offset: 12882},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 14, offset: 12885},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 17, offset: 12888},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 440, col: 25, offset: 12896},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 28, offset: 12899},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 33, offset: 12904},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 444, col: 1, offset: 13022},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13041},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 13041},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 13047},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 5, offset: 13071},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 446, col: 10, offset: 13076},
								expr: &actionExpr{
									pos: position{line: 446, col: 11, offset: 13077},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 446, col: 11, offset: 13077},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 446, col: 11, offset: 13077},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 446, col: 14, offset: 13080},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 446, col: 17, offset: 13083},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 446, col: 26, offset: 13092},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 446, col: 29, offset: 13095},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 446, col: 34, offset: 13100},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 450, col: 1, offset: 13223},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13247},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13247},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 11, offset: 13253},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 13270},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 452, col: 10, offset: 13275},
								expr: &actionExpr{
									pos: position{line: 452, col: 11, offset: 13276},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 452, col: 11, offset: 13276},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 452, col: 11, offset: 13276},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 452, col: 14, offset: 13279},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 452, col: 19, offset: 13284},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 452, col: 38, offset: 13303},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 452, col: 41, offset: 13306},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 452, col: 46, offset: 13311},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 456, col: 1, offset: 13429},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 13450},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 457, col: 6, offset: 13451},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 6, offset: 13451},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 457, col: 12, offset: 13457},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 459, col: 1, offset: 13495},
			expr: &choiceExpr{
				pos: position{line: 460, col: 5, offset: 13518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 460, col: 5, offset: 13518},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 461, col: 5, offset: 13539},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 461, col: 5, offset: 13539},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 463, col: 1, offset: 13576},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 13593},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 464, col: 5, offset: 13593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 464, col: 5, offset: 13593},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 13599},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 13616},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 465, col: 10, offset: 13621},
								expr: &actionExpr{
									pos: position{line: 465, col: 11, offset: 13622},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 465, col: 11, offset: 13622},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 465, col: 11, offset: 13622},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 465, col: 14, offset: 13625},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 465, col: 17, offset: 13628},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 465, col: 34, offset: 13645},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 465, col: 37, offset: 13648},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 465, col: 42, offset: 13653},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 469, col: 1, offset: 13769},
			expr: &actionExpr{
				pos: position{line: 469, col: 20, offset: 13788},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 469, col: 21, offset: 13789},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 21, offset: 13789},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 469, col: 28, offset: 13796},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 469, col: 34, offset: 13802},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 469, col: 41, offset: 13809},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 471, col: 1, offset: 13846},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 13863},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 472, col: 5, offset: 13863},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 13863},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 13869},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 473, col: 5, offset: 13892},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 473, col: 10, offset: 13897},
								expr: &actionExpr{
									pos: position{line: 473, col: 11, offset: 13898},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 473, col: 11, offset: 13898},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 473, col: 11, offset: 13898},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 473, col: 14, offset: 13901},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 473, col: 17, offset: 13904},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 473, col: 34, offset: 13921},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 473, col: 37, offset: 13924},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 473, col: 42, offset: 13929},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 477, col: 1, offset: 14051},
			expr: &actionExpr{
				pos: position{line: 477, col: 20, offset: 14070},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 477, col: 21, offset: 14071},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 21, offset: 14071},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 477, col: 27, offset: 14077},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 479, col: 1, offset: 14114},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14137},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 480, col: 5, offset: 14137},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 14143},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 5, offset: 14155},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 481, col: 10, offset: 14160},
								expr: &actionExpr{
									pos: position{line: 481, col: 11, offset: 14161},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 481, col: 11, offset: 14161},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 481, col: 11, offset: 14161},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 481, col: 14, offset: 14164},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 481, col: 17, offset: 14167},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 481, col: 40, offset: 14190},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 481, col: 43, offset: 14193},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 481, col: 48, offset: 14198},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 485, col: 1, offset: 14309},
			expr: &actionExpr{
				pos: position{line: 485, col: 26, offset: 14334},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 485, col: 27, offset: 14335},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 485, col: 27, offset: 14335},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 485, col: 33, offset: 14341},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 487, col: 1, offset: 14378},
			expr: &choiceExpr{
				pos: position{line: 488, col: 5, offset: 14390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 488, col: 5, offset: 14390},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 488, col: 5, offset: 14390},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 488, col: 5, offset: 14390},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 488, col: 9, offset: 14394},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 488, col: 12, offset: 14397},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 488, col: 14, offset: 14399},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14512},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 493, col: 1, offset: 14522},
			expr: &choiceExpr{
				pos: position{line: 494, col: 5, offset: 14535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 14535},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 494, col: 5, offset: 14535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 494, col: 5, offset: 14535},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 7, offset: 14537},
										name: "FuncExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 494, col: 16, offset: 14546},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 494, col: 20, offset: 14550},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 24, offset: 14554},
										name: "PrimitiveType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 497, col: 5, offset: 14663},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 499, col: 1, offset: 14673},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14691},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 500, col: 9, offset: 14695},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 9, offset: 14695},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 19, offset: 14705},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 29, offset: 14715},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 40, offset: 14726},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 51, offset: 14737},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 501, col: 9, offset: 14754},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 501, col: 18, offset: 14763},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 501, col: 28, offset: 14773},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 501, col: 38, offset: 14783},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 502, col: 9, offset: 14799},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 502, col: 22, offset: 14812},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 503, col: 9, offset: 14827},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 504, col: 9, offset: 14845},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 504, col: 18, offset: 14854},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 504, col: 28, offset: 14864},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 504, col: 39, offset: 14875},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 505, col: 9, offset: 14893},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 505, col: 16, offset: 14900},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 9, offset: 14914},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 18, offset: 14923},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 28, offset: 14933},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 508, col: 1, offset: 14974},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 14987},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 509, col: 5, offset: 14987},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 5, offset: 15002},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15016},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 511, col: 5, offset: 15016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 511, col: 5, offset: 15016},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 11, offset: 15022},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 511, col: 20, offset: 15031},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 511, col: 25, offset: 15036},
										expr: &ruleRefExpr{
											pos:  position{line: 511, col: 26, offset: 15037},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 5, offset: 15108},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 515, col: 5, offset: 15122},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 517, col: 1, offset: 15131},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15145},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 518, col: 5, offset: 15145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 5, offset: 15145},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 13, offset: 15153},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 518, col: 16, offset: 15156},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 518, col: 20, offset: 15160},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 25, offset: 15165},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 518, col: 39, offset: 15179},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 520, col: 1, offset: 15205},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15220},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 5, offset: 15220},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 14, offset: 15229},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 521, col: 17, offset: 15232},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 21, offset: 15236},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 24, offset: 15239},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 29, offset: 15244},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 42, offset: 15257},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 521, col: 45, offset: 15260},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 521, col: 49, offset: 15264},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 57, offset: 15272},
								expr: &actionExpr{
									pos: position{line: 521, col: 58, offset: 15273},
									run: (*parser).callonSelectExpr13,
									expr: &seqExpr{
										pos: position{line: 521, col: 58, offset: 15273},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 521, col: 58, offset: 15273},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 521, col: 61, offset: 15276},
												val:        ".",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 521, col: 65, offset: 15280},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 521, col: 68, offset: 15283},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 521, col: 70, offset: 15285},
													name: "Function",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 525, col: 1, offset: 15451},
			expr: &actionExpr{
				pos: position{line: 526, col: 5, offset: 15464},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 526, col: 5, offset: 15464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 526, col: 5, offset: 15464},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 8, offset: 15467},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 23, offset: 15482},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 526, col: 26, offset: 15485},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 30, offset: 15489},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 33, offset: 15492},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 38, offset: 15497},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 51, offset: 15510},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 526, col: 54, offset: 15513},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 530, col: 1, offset: 15619},
			expr: &choiceExpr{
				pos: position{line: 531, col: 5, offset: 15636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 15636},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 15636},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 531, col: 5, offset: 15636},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 15642},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 531, col: 16, offset: 15647},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 531, col: 21, offset: 15652},
										expr: &actionExpr{
											pos: position{line: 531, col: 22, offset: 15653},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 531, col: 22, offset: 15653},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 531, col: 22, offset: 15653},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 531, col: 25, offset: 15656},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 531, col: 29, offset: 15660},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 531, col: 32, offset: 15663},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 531, col: 34, offset: 15665},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 534, col: 5, offset: 15777},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 534, col: 5, offset: 15777},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 536, col: 1, offset: 15813},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 15827},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 15827},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 537, col: 5, offset: 15827},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 537, col: 5, offset: 15827},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 15833},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 537, col: 17, offset: 15839},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 537, col: 22, offset: 15844},
										expr: &ruleRefExpr{
											pos:  position{line: 537, col: 23, offset: 15845},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15916},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 540, col: 5, offset: 15916},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 540, col: 5, offset: 15916},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 15922},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 540, col: 22, offset: 15933},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 540, col: 27, offset: 15938},
										expr: &ruleRefExpr{
											pos:  position{line: 540, col: 28, offset: 15939},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 16010},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 543, col: 5, offset: 16010},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 547, col: 1, offset: 16083},
			expr: &choiceExpr{
				pos: position{line: 548, col: 5, offset: 16093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16093},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 548, col: 5, offset: 16093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 548, col: 5, offset: 16093},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 548, col: 9, offset: 16097},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 15, offset: 16103},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16327},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 557, col: 5, offset: 16327},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 557, col: 5, offset: 16327},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 557, col: 9, offset: 16331},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 557, col: 13, offset: 16335},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 557, col: 18, offset: 16340},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 557, col: 23, offset: 16345},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 567, col: 1, offset: 16558},
			expr: &choiceExpr{
				pos: position{line: 568, col: 5, offset: 16568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16568},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 16568},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 568, col: 5, offset: 16568},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 568, col: 9, offset: 16572},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 14, offset: 16577},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 27, offset: 16590},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 568, col: 30, offset: 16593},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 34, offset: 16597},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 37, offset: 16600},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 40, offset: 16603},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 568, col: 53, offset: 16616},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16791},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 16791},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 574, col: 5, offset: 16791},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 9, offset: 16795},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 574, col: 12, offset: 16798},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 16, offset: 16802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 574, col: 19, offset: 16805},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 22, offset: 16808},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 574, col: 35, offset: 16821},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 5, offset: 17028},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 580, col: 5, offset: 17028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 580, col: 5, offset: 17028},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 580, col: 9, offset: 17032},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 580, col: 14, offset: 17037},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 580, col: 27, offset: 17050},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 580, col: 30, offset: 17053},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 580, col: 34, offset: 17057},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 580, col: 37, offset: 17060},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17269},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 586, col: 5, offset: 17269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 586, col: 5, offset: 17269},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 586, col: 9, offset: 17273},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 14, offset: 17278},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 586, col: 19, offset: 17283},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 17332},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 17332},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 587, col: 5, offset: 17332},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 587, col: 9, offset: 17336},
									expr: &litMatcher{
										pos:        position{line: 587, col: 11, offset: 17338},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 587, col: 16, offset: 17343},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 587, col: 19, offset: 17346},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 589, col: 1, offset: 17397},
			expr: &choiceExpr{
				pos: position{line: 590, col: 5, offset: 17409},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 590, col: 5, offset: 17409},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 17421},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 591, col: 5, offset: 17421},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 591, col: 5, offset: 17421},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 591, col: 9, offset: 17425},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 591, col: 12, offset: 17428},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 591, col: 17, offset: 17433},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 591, col: 22, offset: 17438},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 591, col: 25, offset: 17441},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 593, col: 1, offset: 17467},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 17479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 594, col: 5, offset: 17479},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 595, col: 5, offset: 17497},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 5, offset: 17515},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 597, col: 5, offset: 17533},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 5, offset: 17552},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 599, col: 5, offset: 17569},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 600, col: 5, offset: 17588},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 17607},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 603, col: 1, offset: 17620},
			expr: &actionExpr{
				pos: position{line: 604, col: 5, offset: 17638},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 604, col: 5, offset: 17638},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 604, col: 7, offset: 17640},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 608, col: 1, offset: 17750},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 17768},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 17768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17768},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 7, offset: 17770},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 609, col: 14, offset: 17777},
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 15, offset: 17778},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 613, col: 1, offset: 17888},
			expr: &choiceExpr{
				pos: position{line: 614, col: 5, offset: 17906},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 614, col: 5, offset: 17906},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 614, col: 5, offset: 17906},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 614, col: 5, offset: 17906},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 7, offset: 17908},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 614, col: 14, offset: 17915},
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 15, offset: 17916},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 18028},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18028},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 7, offset: 18030},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 621, col: 1, offset: 18131},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18150},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18150},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18150},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18150},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 7, offset: 18152},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 622, col: 11, offset: 18156},
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 12, offset: 18157},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18268},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18268},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 7, offset: 18270},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 629, col: 1, offset: 18366},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18383},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 630, col: 5, offset: 18383},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 630, col: 7, offset: 18385},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 634, col: 1, offset: 18495},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 18514},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 635, col: 5, offset: 18514},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 635, col: 7, offset: 18516},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 639, col: 1, offset: 18622},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 18641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18641},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 640, col: 5, offset: 18641},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18751},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 641, col: 5, offset: 18751},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 643, col: 1, offset: 18859},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18875},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 644, col: 5, offset: 18875},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 646, col: 1, offset: 18978},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 18996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 647, col: 5, offset: 18996},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 24, offset: 19015},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 649, col: 1, offset: 19033},
			expr: &actionExpr{
				pos: position{line: 649, col: 12, offset: 19044},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 649, col: 12, offset: 19044},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 650, col: 1, offset: 19073},
			expr: &actionExpr{
				pos: position{line: 650, col: 11, offset: 19083},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 650, col: 11, offset: 19083},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 651, col: 1, offset: 19110},
			expr: &actionExpr{
				pos: position{line: 651, col: 11, offset: 19120},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 651, col: 11, offset: 19120},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 652, col: 1, offset: 19147},
			expr: &actionExpr{
				pos: position{line: 652, col: 12, offset: 19158},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 652, col: 12, offset: 19158},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 653, col: 1, offset: 19187},
			expr: &actionExpr{
				pos: position{line: 653, col: 11, offset: 19197},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 653, col: 11, offset: 19197},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 655, col: 1, offset: 19225},
			expr: &charClassMatcher{
				pos:        position{line: 655, col: 19, offset: 19243},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 656, col: 1, offset: 19254},
			expr: &choiceExpr{
				pos: position{line: 656, col: 18, offset: 19271},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 656, col: 18, offset: 19271},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 656, col: 36, offset: 19289},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 658, col: 1, offset: 19296},
			expr: &actionExpr{
				pos: position{line: 659, col: 5, offset: 19311},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 659, col: 5, offset: 19311},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 659, col: 8, offset: 19314},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 661, col: 1, offset: 19401},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 19420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19420},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19420},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 662, col: 5, offset: 19420},
									expr: &seqExpr{
										pos: position{line: 662, col: 7, offset: 19422},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 662, col: 7, offset: 19422},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 662, col: 15, offset: 19430},
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 16, offset: 19431},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 32, offset: 19447},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 662, col: 48, offset: 19463},
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 48, offset: 19463},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19515},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 663, col: 5, offset: 19515},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 19554},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 19554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 664, col: 5, offset: 19554},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 664, col: 10, offset: 19559},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 13, offset: 19562},
										name: "IdGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 666, col: 1, offset: 19590},
			expr: &choiceExpr{
				pos: position{line: 667, col: 5, offset: 19602},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 667, col: 5, offset: 19602},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 5, offset: 19621},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 669, col: 5, offset: 19637},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 671, col: 1, offset: 19650},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 19663},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 672, col: 5, offset: 19663},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 5, offset: 19675},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 5, offset: 19687},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 675, col: 5, offset: 19697},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 675, col: 5, offset: 19697},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 11, offset: 19703},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 675, col: 13, offset: 19705},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 19, offset: 19711},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 21, offset: 19713},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 19725},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 677, col: 5, offset: 19734},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 679, col: 1, offset: 19741},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 19758},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 680, col: 5, offset: 19758},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 681, col: 5, offset: 19772},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 682, col: 5, offset: 19785},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 683, col: 5, offset: 19796},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 684, col: 5, offset: 19806},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 686, col: 1, offset: 19811},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 19828},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 687, col: 5, offset: 19828},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 688, col: 5, offset: 19842},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 689, col: 5, offset: 19855},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 690, col: 5, offset: 19866},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 691, col: 5, offset: 19876},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 693, col: 1, offset: 19881},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 19896},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 694, col: 5, offset: 19896},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 695, col: 5, offset: 19908},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 696, col: 5, offset: 19918},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 697, col: 5, offset: 19927},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 698, col: 5, offset: 19935},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 700, col: 1, offset: 19943},
			expr: &choiceExpr{
				pos: position{line: 700, col: 13, offset: 19955},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 700, col: 13, offset: 19955},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 700, col: 20, offset: 19962},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 700, col: 26, offset: 19968},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 701, col: 1, offset: 19972},
			expr: &choiceExpr{
				pos: position{line: 701, col: 14, offset: 19985},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 701, col: 14, offset: 19985},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 701, col: 22, offset: 19993},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 701, col: 29, offset: 20000},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 701, col: 35, offset: 20006},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 701, col: 40, offset: 20011},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 703, col: 1, offset: 20016},
			expr: &choiceExpr{
				pos: position{line: 704, col: 5, offset: 20028},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 20028},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 704, col: 5, offset: 20028},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20114},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20114},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 705, col: 5, offset: 20114},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 9, offset: 20118},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 14, offset: 20123},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 17, offset: 20126},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 707, col: 1, offset: 20215},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 20227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20227},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 708, col: 5, offset: 20227},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20314},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 709, col: 5, offset: 20314},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 709, col: 5, offset: 20314},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 9, offset: 20318},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 14, offset: 20323},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 17, offset: 20326},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 711, col: 1, offset: 20424},
			expr: &choiceExpr{
				pos: position{line: 712, col: 5, offset: 20434},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20434},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 712, col: 5, offset: 20434},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20521},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20521},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 713, col: 5, offset: 20521},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 9, offset: 20525},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 713, col: 14, offset: 20530},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 713, col: 17, offset: 20533},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 715, col: 1, offset: 20631},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20640},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 716, col: 5, offset: 20640},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20729},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 20729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 717, col: 5, offset: 20729},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 9, offset: 20733},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 14, offset: 20738},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 17, offset: 20741},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 719, col: 1, offset: 20843},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 20853},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20853},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 720, col: 5, offset: 20853},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 20945},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 20945},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 721, col: 5, offset: 20945},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 9, offset: 20949},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 14, offset: 20954},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 17, offset: 20957},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 724, col: 1, offset: 21088},
			expr: &actionExpr{
				pos: position{line: 725, col: 5, offset: 21095},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 725, col: 5, offset: 21095},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 725, col: 5, offset: 21095},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 725, col: 10, offset: 21100},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 14, offset: 21104},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 725, col: 19, offset: 21109},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 23, offset: 21113},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 725, col: 28, offset: 21118},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 32, offset: 21122},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 727, col: 1, offset: 21159},
			expr: &actionExpr{
				pos: position{line: 728, col: 5, offset: 21167},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 728, col: 5, offset: 21167},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 728, col: 5, offset: 21167},
							expr: &seqExpr{
								pos: position{line: 728, col: 8, offset: 21170},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 728, col: 8, offset: 21170},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 728, col: 12, offset: 21174},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 16, offset: 21178},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 728, col: 20, offset: 21182},
										expr: &choiceExpr{
											pos: position{line: 728, col: 22, offset: 21184},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 728, col: 22, offset: 21184},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 728, col: 33, offset: 21195},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 728, col: 39, offset: 21201},
							label: "ip6",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 43, offset: 21205},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 732, col: 1, offset: 21371},
			expr: &choiceExpr{
				pos: position{line: 733, col: 5, offset: 21389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21389},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21389},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 733, col: 5, offset: 21389},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 733, col: 7, offset: 21391},
										expr: &ruleRefExpr{
											pos:  position{line: 733, col: 7, offset: 21391},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 733, col: 17, offset: 21401},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 19, offset: 21403},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21467},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21467},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 21467},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 7, offset: 21469},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 11, offset: 21473},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 736, col: 13, offset: 21475},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 13, offset: 21475},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 736, col: 23, offset: 21485},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 736, col: 28, offset: 21490},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 736, col: 30, offset: 21492},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 30, offset: 21492},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 40, offset: 21502},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 42, offset: 21504},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21603},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21603},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 739, col: 5, offset: 21603},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 739, col: 10, offset: 21608},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 739, col: 12, offset: 21610},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 12, offset: 21610},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 739, col: 22, offset: 21620},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 24, offset: 21622},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21693},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 742, col: 5, offset: 21693},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 7, offset: 21695},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 11, offset: 21699},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 742, col: 13, offset: 21701},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 13, offset: 21701},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 742, col: 23, offset: 21711},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21779},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 745, col: 5, offset: 21779},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 749, col: 1, offset: 21816},
			expr: &choiceExpr{
				pos: position{line: 750, col: 5, offset: 21828},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21828},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 751, col: 5, offset: 21835},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 753, col: 1, offset: 21840},
			expr: &actionExpr{
				pos: position{line: 753, col: 12, offset: 21851},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 753, col: 12, offset: 21851},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 753, col: 12, offset: 21851},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 753, col: 16, offset: 21855},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 18, offset: 21857},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 754, col: 1, offset: 21894},
			expr: &actionExpr{
				pos: position{line: 754, col: 12, offset: 21905},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 754, col: 12, offset: 21905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 754, col: 12, offset: 21905},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 14, offset: 21907},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 754, col: 18, offset: 21911},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 756, col: 1, offset: 21949},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 21960},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 757, col: 5, offset: 21960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 757, col: 5, offset: 21960},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 7, offset: 21962},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 757, col: 10, offset: 21965},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 757, col: 14, offset: 21969},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 16, offset: 21971},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 761, col: 1, offset: 22044},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 22055},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 762, col: 5, offset: 22055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 762, col: 5, offset: 22055},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 7, offset: 22057},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 762, col: 11, offset: 22061},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 762, col: 15, offset: 22065},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 17, offset: 22067},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 766, col: 1, offset: 22130},
			expr: &actionExpr{
				pos: position{line: 767, col: 4, offset: 22138},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 767, col: 4, offset: 22138},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 767, col: 6, offset: 22140},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 769, col: 1, offset: 22180},
			expr: &choiceExpr{
				pos: position{line: 770, col: 5, offset: 22194},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 22194},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 22209},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 773, col: 1, offset: 22225},
			expr: &actionExpr{
				pos: position{line: 773, col: 14, offset: 22238},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 773, col: 14, offset: 22238},
					expr: &charClassMatcher{
						pos:        position{line: 773, col: 14, offset: 22238},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 775, col: 1, offset: 22277},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22296},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 5, offset: 22296},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 9, offset: 22300},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 778, col: 1, offset: 22343},
			expr: &choiceExpr{
				pos: position{line: 779, col: 5, offset: 22359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22359},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 779, col: 5, offset: 22359},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 779, col: 5, offset: 22359},
									expr: &litMatcher{
										pos:        position{line: 779, col: 5, offset: 22359},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 779, col: 10, offset: 22364},
									expr: &charClassMatcher{
										pos:        position{line: 779, col: 10, offset: 22364},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 779, col: 17, offset: 22371},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 779, col: 21, offset: 22375},
									expr: &charClassMatcher{
										pos:        position{line: 779, col: 21, offset: 22375},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 779, col: 28, offset: 22382},
									expr: &ruleRefExpr{
										pos:  position{line: 779, col: 28, offset: 22382},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 22441},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 22441},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 782, col: 5, offset: 22441},
									expr: &litMatcher{
										pos:        position{line: 782, col: 5, offset: 22441},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 782, col: 10, offset: 22446},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 782, col: 14, offset: 22450},
									expr: &charClassMatcher{
										pos:        position{line: 782, col: 14, offset: 22450},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 782, col: 21, offset: 22457},
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 21, offset: 22457},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 786, col: 1, offset: 22513},
			expr: &seqExpr{
				pos: position{line: 786, col: 16, offset: 22528},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 786, col: 16, offset: 22528},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 786, col: 21, offset: 22533},
						expr: &charClassMatcher{
							pos:        position{line: 786, col: 21, offset: 22533},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 786, col: 27, offset: 22539},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 788, col: 1, offset: 22551},
			expr: &actionExpr{
				pos: position{line: 788, col: 7, offset: 22557},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 788, col: 7, offset: 22557},
					expr: &ruleRefExpr{
						pos:  position{line: 788, col: 7, offset: 22557},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 790, col: 1, offset: 22599},
			expr: &charClassMatcher{
				pos:        position{line: 790, col: 12, offset: 22610},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 793, col: 1, offset: 22624},
			expr: &choiceExpr{
				pos: position{line: 794, col: 5, offset: 22641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 22641},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 22641},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 22641},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 794, col: 9, offset: 22645},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 794, col: 11, offset: 22647},
										expr: &ruleRefExpr{
											pos:  position{line: 794, col: 11, offset: 22647},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 794, col: 29, offset: 22665},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 22702},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 22702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 795, col: 5, offset: 22702},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 795, col: 9, offset: 22706},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 795, col: 11, offset: 22708},
										expr: &ruleRefExpr{
											pos:  position{line: 795, col: 11, offset: 22708},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 795, col: 29, offset: 22726},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 797, col: 1, offset: 22760},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 22781},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 22781},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 22781},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 798, col: 5, offset: 22781},
									expr: &choiceExpr{
										pos: position{line: 798, col: 7, offset: 22783},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 798, col: 7, offset: 22783},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 798, col: 13, offset: 22789},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 798, col: 26, offset: 22802,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 22839},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 799, col: 5, offset: 22839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 799, col: 5, offset: 22839},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 799, col: 10, offset: 22844},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 12, offset: 22846},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 801, col: 1, offset: 22880},
			expr: &actionExpr{
				pos: position{line: 802, col: 5, offset: 22892},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 802, col: 5, offset: 22892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 802, col: 5, offset: 22892},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 10, offset: 22897},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 23, offset: 22910},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 802, col: 28, offset: 22915},
								expr: &ruleRefExpr{
									pos:  position{line: 802, col: 28, offset: 22915},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 804, col: 1, offset: 22977},
			expr: &choiceExpr{
				pos: position{line: 805, col: 5, offset: 22994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 22994},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 805, col: 5, offset: 22994},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 5, offset: 23046},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 808, col: 1, offset: 23058},
			expr: &choiceExpr{
				pos: position{line: 809, col: 5, offset: 23074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 809, col: 5, offset: 23074},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 810, col: 5, offset: 23091},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 812, col: 1, offset: 23098},
			expr: &actionExpr{
				pos: position{line: 812, col: 14, offset: 23111},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 812, col: 14, offset: 23111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 14, offset: 23111},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 812, col: 19, offset: 23116},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 812, col: 22, offset: 23119},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 812, col: 22, offset: 23119},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 38, offset: 23135},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 814, col: 1, offset: 23171},
			expr: &choiceExpr{
				pos: position{line: 815, col: 5, offset: 23192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 23192},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 23192},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 815, col: 5, offset: 23192},
									expr: &choiceExpr{
										pos: position{line: 815, col: 7, offset: 23194},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 815, col: 7, offset: 23194},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 815, col: 13, offset: 23200},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 815, col: 26, offset: 23213,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 23250},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 816, col: 5, offset: 23250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 816, col: 5, offset: 23250},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 816, col: 10, offset: 23255},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 12, offset: 23257},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 818, col: 1, offset: 23291},
			expr: &choiceExpr{
				pos: position{line: 819, col: 5, offset: 23310},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23310},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 23310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 819, col: 5, offset: 23310},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 9, offset: 23314},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 18, offset: 23323},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 820, col: 5, offset: 23374},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 821, col: 5, offset: 23395},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 823, col: 1, offset: 23410},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23431},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23431},
						run: (*parser).callonSingleCharEscape2,
						expr: &litMatcher{
							pos:        position{line: 824, col: 5, offset: 23431},
							val:        "'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 23458},
						run: (*parser).callonSingleCharEscape4,
						expr: &litMatcher{
							pos:        position{line: 825, col: 5, offset: 23458},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 23485},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 826, col: 5, offset: 23485},
							val:        "\\",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 23514},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 827, col: 5, offset: 23514},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23543},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 828, col: 5, offset: 23543},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 23572},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 829, col: 5, offset: 23572},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 23601},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 830, col: 5, offset: 23601},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23630},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 831, col: 5, offset: 23630},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23659},
						run: (*parser).callonSingleCharEscape18,
						expr: &litMatcher{
							pos:        position{line: 832, col: 5, offset: 23659},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 834, col: 1, offset: 23685},
			expr: &choiceExpr{
				pos: position{line: 835, col: 5, offset: 23703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 23703},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 835, col: 5, offset: 23703},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 23731},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 836, col: 5, offset: 23731},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 837, col: 5, offset: 23761},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 839, col: 1, offset: 23767},
			expr: &choiceExpr{
				pos: position{line: 840, col: 5, offset: 23785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 23785},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 23785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 840, col: 5, offset: 23785},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 840, col: 9, offset: 23789},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 840, col: 16, offset: 23796},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 840, col: 16, offset: 23796},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 25, offset: 23805},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 34, offset: 23814},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 43, offset: 23823},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 843, col: 5, offset: 23886},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 843, col: 5, offset: 23886},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 843, col: 5, offset: 23886},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 843, col: 9, offset: 23890},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 843, col: 13, offset: 23894},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 843, col: 20, offset: 23901},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 843, col: 20, offset: 23901},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 843, col: 29, offset: 23910},
												expr: &ruleRefExpr{
													pos:  position{line: 843, col: 29, offset: 23910},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 843, col: 39, offset: 23920},
												expr: &ruleRefExpr{
													pos:  position{line: 843, col: 39, offset: 23920},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 843, col: 49, offset: 23930},
												expr: &ruleRefExpr{
													pos:  position{line: 843, col: 49, offset: 23930},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 843, col: 59, offset: 23940},
												expr: &ruleRefExpr{
													pos:  position{line: 843, col: 59, offset: 23940},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 843, col: 69, offset: 23950},
												expr: &ruleRefExpr{
													pos:  position{line: 843, col: 69, offset: 23950},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 80, offset: 23961},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 847, col: 1, offset: 24015},
			expr: &actionExpr{
				pos: position{line: 848, col: 5, offset: 24026},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 848, col: 5, offset: 24026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 848, col: 5, offset: 24026},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 848, col: 9, offset: 24030},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 14, offset: 24035},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 848, col: 25, offset: 24046},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 850, col: 1, offset: 24072},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 24087},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 851, col: 5, offset: 24087},
					expr: &choiceExpr{
						pos: position{line: 851, col: 6, offset: 24088},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 851, col: 6, offset: 24088},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 851, col: 13, offset: 24095},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 853, col: 1, offset: 24135},
			expr: &charClassMatcher{
				pos:        position{line: 854, col: 5, offset: 24151},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 856, col: 1, offset: 24166},
			expr: &oneOrMoreExpr{
				pos: position{line: 856, col: 6, offset: 24171},
				expr: &ruleRefExpr{
					pos:  position{line: 856, col: 6, offset: 24171},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 857, col: 1, offset: 24181},
			expr: &zeroOrMoreExpr{
				pos: position{line: 857, col: 6, offset: 24186},
				expr: &ruleRefExpr{
					pos:  position{line: 857, col: 6, offset: 24186},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 859, col: 1, offset: 24197},
			expr: &choiceExpr{
				pos: position{line: 860, col: 5, offset: 24210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 860, col: 5, offset: 24210},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 5, offset: 24225},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 862, col: 5, offset: 24244},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 864, col: 1, offset: 24253},
			expr: &anyMatcher{
				line: 865, col: 5, offset: 24273,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 867, col: 1, offset: 24276},
			expr: &choiceExpr{
				pos: position{line: 868, col: 5, offset: 24304},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 868, col: 5, offset: 24304},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 869, col: 5, offset: 24313},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 870, col: 5, offset: 24322},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 871, col: 5, offset: 24331},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 872, col: 5, offset: 24339},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 873, col: 5, offset: 24352},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 875, col: 1, offset: 24362},
			expr: &charClassMatcher{
				pos:        position{line: 876, col: 5, offset: 24381},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 882, col: 1, offset: 24711},
			expr: &ruleRefExpr{
				pos:  position{line: 885, col: 5, offset: 24782},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 887, col: 1, offset: 24801},
			expr: &seqExpr{
				pos: position{line: 888, col: 5, offset: 24822},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 888, col: 5, offset: 24822},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 888, col: 10, offset: 24827},
						expr: &seqExpr{
							pos: position{line: 888, col: 11, offset: 24828},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 888, col: 11, offset: 24828},
									expr: &litMatcher{
										pos:        position{line: 888, col: 12, offset: 24829},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 888, col: 17, offset: 24834},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 888, col: 35, offset: 24852},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 890, col: 1, offset: 24858},
			expr: &seqExpr{
				pos: position{line: 891, col: 5, offset: 24880},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 891, col: 5, offset: 24880},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 891, col: 10, offset: 24885},
						expr: &seqExpr{
							pos: position{line: 891, col: 11, offset: 24886},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 891, col: 11, offset: 24886},
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 12, offset: 24887},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 891, col: 27, offset: 24902},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 893, col: 1, offset: 24921},
			expr: &choiceExpr{
				pos: position{line: 893, col: 7, offset: 24927},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 893, col: 7, offset: 24927},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 11, offset: 24931},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 894, col: 1, offset: 24935},
			expr: &notExpr{
				pos: position{line: 894, col: 7, offset: 24941},
				expr: &anyMatcher{
					line: 894, col: 8, offset: 24942,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation15(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation15(stack["a"])
}

func (c *current) onOperation21(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation21(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

					"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

					"rhs": v}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

					"lhs": v,

					"rhs": map[string]interface{}{"op": "Identifier", "name": "$"}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonSearchExprCast7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast7(stack["typ"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc3(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc18(key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc18(stack["key"], stack["columns"])
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpr4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr13(e interface{}) (interface{}, error) {
	return []interface{}{"@", e}, nil
}

func (p *parser) callonSelectExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr13(stack["e"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return makeBinaryExprChain(map[string]interface{}{"op": "SelectExpr", "selectors": args}, methods), nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": map[string]interface{}{"op": "Empty"}, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": map[string]interface{}{"op": "Empty"}}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(ip6 interface{}) (interface{}, error) {
	return ip6, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["ip6"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape2() (interface{}, error) {
	return "'", nil
}

func (p *parser) callonSingleCharEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape2()
}

func (c *current) onSingleCharEscape4() (interface{}, error) {
	return '"', nil
}

func (p *parser) callonSingleCharEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape4()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\\", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onSingleCharEscape18() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape18()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
