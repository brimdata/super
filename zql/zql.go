// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 741},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 761},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 766},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 794},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1497},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1497},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1497},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1503},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1514},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1519},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1519},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1620},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1620},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1626},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1685},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1702},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1702},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1702},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1705},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1710},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1713},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1716},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1747},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1764},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1764},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1764},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1767},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1777},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1779},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1781},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1795},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1798},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1803},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1806},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1811},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1900},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1900},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1900},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1903},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1916},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1919},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1924},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1927},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1932},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2092},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2103},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2103},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2103},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2109},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2122},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2127},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2127},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2228},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2228},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2234},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2295},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2307},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2315},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2330},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2342},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2356},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2356},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2367},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2371},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2374},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2379},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2382},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2392},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2401},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2404},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2501},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2501},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2510},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2513},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2517},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 24, offset: 2520},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 34, offset: 2530},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 41, offset: 2537},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 44, offset: 2540},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2635},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2648},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2648},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2650},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2659},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2660},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2690},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2690},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2692},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2704},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2705},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2736},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2736},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2736},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2741},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2755},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2756},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2847},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2857},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2857},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2861},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 88, col: 15, offset: 2861},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 88, col: 22, offset: 2868},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 29, offset: 2875},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 35, offset: 2881},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 89, col: 1, offset: 2886},
			expr: &seqExpr{
				pos: position{line: 89, col: 8, offset: 2893},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 89, col: 8, offset: 2893},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 89, col: 12, offset: 2897},
						expr: &choiceExpr{
							pos: position{line: 89, col: 14, offset: 2899},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 14, offset: 2899},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 89, col: 20, offset: 2905},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 91, col: 1, offset: 2911},
			expr: &seqExpr{
				pos: position{line: 91, col: 13, offset: 2923},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 13, offset: 2923},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 91, col: 17, offset: 2927},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 91, col: 18, offset: 2928},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 91, col: 18, offset: 2928},
										expr: &litMatcher{
											pos:        position{line: 91, col: 19, offset: 2929},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 91, col: 24, offset: 2934},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 38, offset: 2948},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 57, offset: 2967},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 91, col: 82, offset: 2992},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 88, offset: 2998},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 93, col: 1, offset: 3004},
			expr: &choiceExpr{
				pos: position{line: 93, col: 12, offset: 3015},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 93, col: 13, offset: 3016},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 13, offset: 3016},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 93, col: 16, offset: 3019},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 93, col: 16, offset: 3019},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 93, col: 26, offset: 3029},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 35, offset: 3038},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 93, col: 43, offset: 3046},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 43, offset: 3046},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 93, col: 46, offset: 3049},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 95, col: 1, offset: 3055},
			expr: &actionExpr{
				pos: position{line: 96, col: 5, offset: 3073},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 96, col: 5, offset: 3073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 96, col: 5, offset: 3073},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 11, offset: 3079},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 96, col: 21, offset: 3089},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 96, col: 26, offset: 3094},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 26, offset: 3094},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 100, col: 1, offset: 3168},
			expr: &actionExpr{
				pos: position{line: 100, col: 16, offset: 3183},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 16, offset: 3183},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 100, col: 16, offset: 3183},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 18, offset: 3185},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 26, offset: 3193},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 28, offset: 3195},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 3197},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 102, col: 1, offset: 3247},
			expr: &actionExpr{
				pos: position{line: 103, col: 5, offset: 3261},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 103, col: 5, offset: 3261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3261},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 11, offset: 3267},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3284},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 10, offset: 3289},
								expr: &actionExpr{
									pos: position{line: 104, col: 11, offset: 3290},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 104, col: 11, offset: 3290},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 104, col: 11, offset: 3290},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 104, col: 14, offset: 3293},
												expr: &seqExpr{
													pos: position{line: 104, col: 15, offset: 3294},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 104, col: 15, offset: 3294},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 104, col: 24, offset: 3303},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 104, col: 28, offset: 3307},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 104, col: 31, offset: 3310},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 104, col: 36, offset: 3315},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 108, col: 1, offset: 3431},
			expr: &choiceExpr{
				pos: position{line: 109, col: 5, offset: 3448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 109, col: 5, offset: 3448},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 109, col: 5, offset: 3448},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 109, col: 6, offset: 3449},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 109, col: 6, offset: 3449},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 109, col: 6, offset: 3449},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 109, col: 15, offset: 3458},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 109, col: 19, offset: 3462},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 109, col: 19, offset: 3462},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 109, col: 23, offset: 3466},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 109, col: 27, offset: 3470},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 29, offset: 3472},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3584},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 3597},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 114, col: 5, offset: 3612},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 114, col: 5, offset: 3612},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 114, col: 5, offset: 3612},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 9, offset: 3616},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 114, col: 12, offset: 3619},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 17, offset: 3624},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 31, offset: 3638},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 114, col: 34, offset: 3641},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 116, col: 1, offset: 3667},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3680},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3680},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 117, col: 5, offset: 3680},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 117, col: 9, offset: 3684},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 117, col: 12, offset: 3687},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 22, offset: 3697},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 117, col: 36, offset: 3711},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 117, col: 39, offset: 3714},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 41, offset: 3716},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 4405},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 4405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 144, col: 5, offset: 4405},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 11, offset: 4411},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 144, col: 24, offset: 4424},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 25, offset: 4425},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4461},
						run: (*parser).callonShortCut17,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 4461},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 4463},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 12, offset: 4468},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 15, offset: 4471},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 20, offset: 4476},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 34, offset: 4490},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 37, offset: 4493},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 39, offset: 4495},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 145, col: 51, offset: 4507},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 52, offset: 4508},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4622},
						run: (*parser).callonShortCut29,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4622},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 148, col: 5, offset: 4622},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 7, offset: 4624},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 19, offset: 4636},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 21, offset: 4638},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 29, offset: 4646},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 148, col: 31, offset: 4648},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5330},
						run: (*parser).callonShortCut37,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5330},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 175, col: 5, offset: 5330},
									expr: &seqExpr{
										pos: position{line: 175, col: 7, offset: 5332},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 175, col: 7, offset: 5332},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 175, col: 19, offset: 5344},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 175, col: 24, offset: 5349},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 31, offset: 5356},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5397},
						run: (*parser).callonShortCut45,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5397},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 176, col: 5, offset: 5397},
									expr: &seqExpr{
										pos: position{line: 176, col: 7, offset: 5399},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 176, col: 7, offset: 5399},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 176, col: 19, offset: 5411},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 176, col: 24, offset: 5416},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 26, offset: 5418},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 176, col: 38, offset: 5430},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 39, offset: 5431},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5548},
						run: (*parser).callonShortCut55,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5548},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5548},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 179, col: 9, offset: 5552},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 10, offset: 5553},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 183, col: 1, offset: 5666},
			expr: &choiceExpr{
				pos: position{line: 184, col: 5, offset: 5682},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5682},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5694},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5694},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 185, col: 5, offset: 5694},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 6, offset: 5695},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 185, col: 13, offset: 5702},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 15, offset: 5704},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 189, col: 1, offset: 5812},
			expr: &actionExpr{
				pos: position{line: 190, col: 5, offset: 5830},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 5, offset: 5830},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 190, col: 13, offset: 5838},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 194, col: 1, offset: 5940},
			expr: &choiceExpr{
				pos: position{line: 195, col: 5, offset: 5957},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 5957},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 5957},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 195, col: 5, offset: 5957},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 7, offset: 5959},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 195, col: 13, offset: 5965},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 195, col: 14, offset: 5966},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 195, col: 14, offset: 5966},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 195, col: 17, offset: 5969},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 195, col: 21, offset: 5973},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 195, col: 28, offset: 5980},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 195, col: 28, offset: 5980},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 195, col: 30, offset: 5982},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 195, col: 35, offset: 5987},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 195, col: 40, offset: 5992},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 48, offset: 6000},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 6115},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 198, col: 5, offset: 6115},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 198, col: 5, offset: 6115},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 198, col: 7, offset: 6117},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 198, col: 12, offset: 6122},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 198, col: 15, offset: 6125},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 198, col: 20, offset: 6130},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 198, col: 24, offset: 6134},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 198, col: 32, offset: 6142},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 205, col: 1, offset: 6351},
			expr: &choiceExpr{
				pos: position{line: 205, col: 11, offset: 6361},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 11, offset: 6361},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 20, offset: 6370},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 207, col: 1, offset: 6376},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 6392},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6392},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 6414},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6427},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6439},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6452},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6464},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6476},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6490},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 216, col: 5, offset: 6507},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 220, col: 1, offset: 6564},
			expr: &ruleRefExpr{
				pos:  position{line: 220, col: 14, offset: 6577},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 222, col: 1, offset: 6597},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 6610},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 222, col: 15, offset: 6611},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 15, offset: 6611},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 21, offset: 6617},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 28, offset: 6624},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 35, offset: 6631},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 42, offset: 6638},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 48, offset: 6644},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 55, offset: 6651},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 224, col: 1, offset: 6688},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6711},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6711},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 11, offset: 6717},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6735},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 10, offset: 6740},
								expr: &actionExpr{
									pos: position{line: 226, col: 11, offset: 6741},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 226, col: 11, offset: 6741},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 226, col: 11, offset: 6741},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 14, offset: 6744},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 17, offset: 6747},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 28, offset: 6758},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 31, offset: 6761},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 36, offset: 6766},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 230, col: 1, offset: 6883},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 6901},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 6901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6901},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 11, offset: 6907},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6925},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 10, offset: 6930},
								expr: &actionExpr{
									pos: position{line: 232, col: 11, offset: 6931},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 232, col: 11, offset: 6931},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 11, offset: 6931},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 14, offset: 6934},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 17, offset: 6937},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 34, offset: 6954},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 37, offset: 6957},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 42, offset: 6962},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 236, col: 1, offset: 7079},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 7097},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 7097},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 7097},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 7103},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 7122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 238, col: 10, offset: 7127},
								expr: &actionExpr{
									pos: position{line: 238, col: 11, offset: 7128},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 238, col: 11, offset: 7128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 238, col: 11, offset: 7128},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 14, offset: 7131},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 17, offset: 7134},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 238, col: 40, offset: 7157},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 43, offset: 7160},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 48, offset: 7165},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 242, col: 1, offset: 7283},
			expr: &choiceExpr{
				pos: position{line: 243, col: 5, offset: 7302},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7302},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 243, col: 5, offset: 7302},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 243, col: 5, offset: 7302},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 7, offset: 7304},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 22, offset: 7319},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 243, col: 25, offset: 7322},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 29, offset: 7326},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 243, col: 32, offset: 7329},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 36, offset: 7333},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7435},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 248, col: 1, offset: 7451},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 7470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7470},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7484},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 7500},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 251, col: 5, offset: 7500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 5, offset: 7500},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 11, offset: 7506},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 251, col: 20, offset: 7515},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 251, col: 25, offset: 7520},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 26, offset: 7521},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7593},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7605},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7616},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7626},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7634},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7642},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 263, col: 1, offset: 7679},
			expr: &choiceExpr{
				pos: position{line: 264, col: 5, offset: 7695},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7695},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7695},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 264, col: 5, offset: 7695},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 15, offset: 7705},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 21, offset: 7711},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 30, offset: 7720},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 35, offset: 7725},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 47, offset: 7737},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 53, offset: 7743},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 7888},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 267, col: 5, offset: 7888},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 267, col: 5, offset: 7888},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 267, col: 15, offset: 7898},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 21, offset: 7904},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 30, offset: 7913},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 35, offset: 7918},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 50, offset: 7933},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 267, col: 55, offset: 7938},
										expr: &seqExpr{
											pos: position{line: 267, col: 56, offset: 7939},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 267, col: 56, offset: 7939},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 267, col: 58, offset: 7941},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 72, offset: 7955},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 78, offset: 7961},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 275, col: 1, offset: 8194},
			expr: &choiceExpr{
				pos: position{line: 275, col: 13, offset: 8206},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 275, col: 13, offset: 8206},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 275, col: 13, offset: 8206},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 275, col: 25, offset: 8218},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 275, col: 29, offset: 8222},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 277, col: 1, offset: 8226},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 8239},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 8239},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 8239},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 5, offset: 8239},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 14, offset: 8248},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 278, col: 16, offset: 8250},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 278, col: 20, offset: 8254},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 29, offset: 8263},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 279, col: 5, offset: 8289},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 279, col: 5, offset: 8289},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 281, col: 1, offset: 8314},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 8330},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 8330},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 282, col: 5, offset: 8330},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 13, offset: 8338},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 282, col: 15, offset: 8340},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 23, offset: 8348},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 284, col: 1, offset: 8389},
			expr: &choiceExpr{
				pos: position{line: 285, col: 5, offset: 8402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 285, col: 5, offset: 8402},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 285, col: 5, offset: 8402},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 285, col: 5, offset: 8402},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 285, col: 7, offset: 8404},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 285, col: 14, offset: 8411},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 285, col: 16, offset: 8413},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 285, col: 25, offset: 8422},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 285, col: 27, offset: 8424},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 285, col: 33, offset: 8430},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8461},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 286, col: 5, offset: 8461},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 291, col: 1, offset: 8721},
			expr: &choiceExpr{
				pos: position{line: 292, col: 5, offset: 8740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8740},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 293, col: 5, offset: 8755},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8755},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 10, offset: 8760},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 295, col: 1, offset: 8852},
			expr: &actionExpr{
				pos: position{line: 296, col: 5, offset: 8872},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 296, col: 5, offset: 8872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 296, col: 5, offset: 8872},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 11, offset: 8878},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 296, col: 26, offset: 8893},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 296, col: 31, offset: 8898},
								expr: &actionExpr{
									pos: position{line: 296, col: 32, offset: 8899},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 296, col: 32, offset: 8899},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 296, col: 32, offset: 8899},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 296, col: 35, offset: 8902},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 296, col: 39, offset: 8906},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 296, col: 42, offset: 8909},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 296, col: 47, offset: 8914},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 300, col: 1, offset: 9036},
			expr: &choiceExpr{
				pos: position{line: 301, col: 5, offset: 9054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 9054},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 301, col: 5, offset: 9054},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 301, col: 5, offset: 9054},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 10, offset: 9059},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 15, offset: 9064},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 301, col: 18, offset: 9067},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 22, offset: 9071},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 301, col: 25, offset: 9074},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 29, offset: 9078},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 9182},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 304, col: 5, offset: 9182},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 9, offset: 9186},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 308, col: 1, offset: 9286},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 9294},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 9294},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 309, col: 5, offset: 9294},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 6, offset: 9295},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 16, offset: 9305},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 19, offset: 9308},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 27, offset: 9316},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 9319},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 34, offset: 9323},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 37, offset: 9326},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 42, offset: 9331},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 42, offset: 9331},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 49, offset: 9338},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 309, col: 52, offset: 9341},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 309, col: 56, offset: 9345},
							expr: &seqExpr{
								pos: position{line: 309, col: 58, offset: 9347},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 309, col: 58, offset: 9347},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 309, col: 61, offset: 9350},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 66, offset: 9355},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 72, offset: 9361},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 72, offset: 9361},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 317, col: 1, offset: 9551},
			expr: &choiceExpr{
				pos: position{line: 318, col: 5, offset: 9563},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 318, col: 5, offset: 9563},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 319, col: 5, offset: 9582},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9595},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 322, col: 1, offset: 9604},
			expr: &actionExpr{
				pos: position{line: 322, col: 15, offset: 9618},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 322, col: 15, offset: 9618},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 322, col: 15, offset: 9618},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 322, col: 17, offset: 9620},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 25, offset: 9628},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 27, offset: 9630},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 32, offset: 9635},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 324, col: 1, offset: 9671},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9690},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 9690},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 9696},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 25, offset: 9710},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 30, offset: 9715},
								expr: &seqExpr{
									pos: position{line: 325, col: 31, offset: 9716},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 325, col: 31, offset: 9716},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 325, col: 34, offset: 9719},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 325, col: 38, offset: 9723},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 325, col: 41, offset: 9726},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 335, col: 1, offset: 9962},
			expr: &choiceExpr{
				pos: position{line: 336, col: 5, offset: 9975},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9975},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9988},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 10000},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 10012},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 10025},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 10038},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 10051},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 10064},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 10079},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 10092},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 10104},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10119},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10132},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10146},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 5, offset: 10159},
						name: "TasteProc",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 5, offset: 10173},
						name: "SQLProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 353, col: 1, offset: 10182},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10195},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 10195},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 5, offset: 10195},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 13, offset: 10203},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 18, offset: 10208},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 27, offset: 10217},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 32, offset: 10222},
								expr: &actionExpr{
									pos: position{line: 354, col: 33, offset: 10223},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 354, col: 33, offset: 10223},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 354, col: 33, offset: 10223},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 354, col: 35, offset: 10225},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 354, col: 37, offset: 10227},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 368, col: 1, offset: 10642},
			expr: &actionExpr{
				pos: position{line: 368, col: 12, offset: 10653},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 368, col: 12, offset: 10653},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 368, col: 17, offset: 10658},
						expr: &actionExpr{
							pos: position{line: 368, col: 18, offset: 10659},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 368, col: 18, offset: 10659},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 368, col: 18, offset: 10659},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 368, col: 20, offset: 10661},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 368, col: 22, offset: 10663},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 370, col: 1, offset: 10719},
			expr: &choiceExpr{
				pos: position{line: 371, col: 5, offset: 10731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10731},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10731},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 10806},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 372, col: 5, offset: 10806},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 372, col: 5, offset: 10806},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 372, col: 14, offset: 10815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 372, col: 16, offset: 10817},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 372, col: 23, offset: 10824},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 372, col: 24, offset: 10825},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 372, col: 24, offset: 10825},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 372, col: 34, offset: 10835},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 374, col: 1, offset: 10949},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10961},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10961},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 375, col: 12, offset: 10968},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 18, offset: 10974},
								expr: &actionExpr{
									pos: position{line: 375, col: 19, offset: 10975},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 375, col: 19, offset: 10975},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 375, col: 19, offset: 10975},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 375, col: 21, offset: 10977},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 375, col: 23, offset: 10979},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 47, offset: 11003},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 53, offset: 11009},
								expr: &seqExpr{
									pos: position{line: 375, col: 54, offset: 11010},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 375, col: 54, offset: 11010},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 375, col: 56, offset: 11012},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 67, offset: 11023},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 74, offset: 11030},
								expr: &actionExpr{
									pos: position{line: 375, col: 75, offset: 11031},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 375, col: 75, offset: 11031},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 375, col: 75, offset: 11031},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 375, col: 77, offset: 11033},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 375, col: 79, offset: 11035},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 389, col: 1, offset: 11380},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 11392},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 11392},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 5, offset: 11392},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 12, offset: 11399},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 14, offset: 11401},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 19, offset: 11406},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 394, col: 1, offset: 11501},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11514},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11514},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 13, offset: 11522},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 15, offset: 11524},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 20, offset: 11529},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 399, col: 1, offset: 11625},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11638},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 11638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 11638},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 13, offset: 11646},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 15, offset: 11648},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 20, offset: 11653},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 404, col: 1, offset: 11744},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 11757},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11757},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 405, col: 5, offset: 11757},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 5, offset: 11757},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 13, offset: 11765},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 15, offset: 11767},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 405, col: 21, offset: 11773},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 406, col: 5, offset: 11853},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 406, col: 5, offset: 11853},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 408, col: 1, offset: 11929},
			expr: &choiceExpr{
				pos: position{line: 409, col: 5, offset: 11942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 11942},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 409, col: 5, offset: 11942},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 5, offset: 11942},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 13, offset: 11950},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 409, col: 15, offset: 11952},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 21, offset: 11958},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 410, col: 5, offset: 12038},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 410, col: 5, offset: 12038},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 412, col: 1, offset: 12114},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12129},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12129},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 5, offset: 12129},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 15, offset: 12139},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 17, offset: 12141},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 20, offset: 12144},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 417, col: 1, offset: 12181},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 12192},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 418, col: 5, offset: 12192},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 418, col: 10, offset: 12197},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 422, col: 1, offset: 12293},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 12306},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 423, col: 5, offset: 12306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 423, col: 5, offset: 12306},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 423, col: 13, offset: 12314},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 423, col: 15, offset: 12316},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12405},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 426, col: 5, offset: 12405},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 430, col: 1, offset: 12495},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12507},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 12507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 12507},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 12, offset: 12514},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 14, offset: 12516},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 19, offset: 12521},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 435, col: 1, offset: 12616},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 12631},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 12631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 5, offset: 12631},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 15, offset: 12641},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 17, offset: 12643},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 23, offset: 12649},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 34, offset: 12660},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 39, offset: 12665},
								expr: &actionExpr{
									pos: position{line: 436, col: 40, offset: 12666},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 436, col: 40, offset: 12666},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 40, offset: 12666},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 436, col: 43, offset: 12669},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 47, offset: 12673},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 436, col: 50, offset: 12676},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 53, offset: 12679},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 444, col: 1, offset: 13086},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13099},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13099},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 445, col: 13, offset: 13107},
							expr: &seqExpr{
								pos: position{line: 445, col: 15, offset: 13109},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 445, col: 15, offset: 13109},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 445, col: 18, offset: 13112},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 449, col: 1, offset: 13183},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13197},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 450, col: 5, offset: 13197},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 454, col: 1, offset: 13273},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13286},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13286},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 455, col: 5, offset: 13286},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 11, offset: 13292},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 455, col: 21, offset: 13302},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 29, offset: 13310},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 31, offset: 13312},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 39, offset: 13320},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 47, offset: 13328},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 455, col: 50, offset: 13331},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 54, offset: 13335},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 57, offset: 13338},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 66, offset: 13347},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 455, col: 74, offset: 13355},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 455, col: 82, offset: 13363},
										expr: &seqExpr{
											pos: position{line: 455, col: 83, offset: 13364},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 455, col: 83, offset: 13364},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 455, col: 85, offset: 13366},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 13632},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 462, col: 5, offset: 13632},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 462, col: 5, offset: 13632},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 11, offset: 13638},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 462, col: 22, offset: 13649},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 462, col: 30, offset: 13657},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 462, col: 32, offset: 13659},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 36, offset: 13663},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 462, col: 44, offset: 13671},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 462, col: 52, offset: 13679},
										expr: &seqExpr{
											pos: position{line: 462, col: 53, offset: 13680},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 462, col: 53, offset: 13680},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 462, col: 55, offset: 13682},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 470, col: 1, offset: 13936},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13950},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13950},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13950},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 471, col: 5, offset: 13950},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 14, offset: 13959},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 13989},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 13989},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 472, col: 5, offset: 13989},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 472, col: 14, offset: 13998},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 473, col: 5, offset: 14027},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 473, col: 5, offset: 14027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 473, col: 5, offset: 14027},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 14, offset: 14036},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14066},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 474, col: 5, offset: 14066},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 476, col: 1, offset: 14102},
			expr: &choiceExpr{
				pos: position{line: 477, col: 5, offset: 14114},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 5, offset: 14114},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14123},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 14123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 478, col: 5, offset: 14123},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 478, col: 9, offset: 14127},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 478, col: 14, offset: 14132},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 19, offset: 14137},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 480, col: 1, offset: 14163},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14177},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 14177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 481, col: 5, offset: 14177},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 481, col: 14, offset: 14186},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 16, offset: 14188},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 518, col: 1, offset: 15480},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15494},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 15494},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 519, col: 5, offset: 15494},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 519, col: 5, offset: 15494},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 7, offset: 15496},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 519, col: 12, offset: 15501},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15530},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 520, col: 5, offset: 15530},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 524, col: 1, offset: 15613},
			expr: &ruleRefExpr{
				pos:  position{line: 524, col: 8, offset: 15620},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 526, col: 1, offset: 15631},
			expr: &ruleRefExpr{
				pos:  position{line: 526, col: 13, offset: 15643},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 528, col: 1, offset: 15649},
			expr: &actionExpr{
				pos: position{line: 529, col: 5, offset: 15664},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 529, col: 5, offset: 15664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 529, col: 5, offset: 15664},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 15670},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 529, col: 21, offset: 15680},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 529, col: 26, offset: 15685},
								expr: &seqExpr{
									pos: position{line: 529, col: 27, offset: 15686},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 529, col: 27, offset: 15686},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 529, col: 30, offset: 15689},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 34, offset: 15693},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 37, offset: 15696},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 539, col: 1, offset: 15895},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 15910},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 15910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 15910},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 9, offset: 15914},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 14, offset: 15919},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 540, col: 17, offset: 15922},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 21, offset: 15926},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 24, offset: 15929},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 28, offset: 15933},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 542, col: 1, offset: 16024},
			expr: &ruleRefExpr{
				pos:  position{line: 542, col: 8, offset: 16031},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 544, col: 1, offset: 16048},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16068},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16068},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 16068},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 545, col: 5, offset: 16068},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 15, offset: 16078},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 29, offset: 16092},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 545, col: 32, offset: 16095},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 36, offset: 16099},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 39, offset: 16102},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 50, offset: 16113},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 55, offset: 16118},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 545, col: 58, offset: 16121},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 62, offset: 16125},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 65, offset: 16128},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 76, offset: 16139},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 16279},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 550, col: 1, offset: 16294},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16312},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 5, offset: 16312},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 11, offset: 16318},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 5, offset: 16337},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 552, col: 10, offset: 16342},
								expr: &actionExpr{
									pos: position{line: 552, col: 11, offset: 16343},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 552, col: 11, offset: 16343},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 552, col: 11, offset: 16343},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 552, col: 14, offset: 16346},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 552, col: 17, offset: 16349},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 552, col: 25, offset: 16357},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 552, col: 28, offset: 16360},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 552, col: 33, offset: 16365},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 556, col: 1, offset: 16483},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16502},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16502},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16502},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 16508},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 16532},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 558, col: 10, offset: 16537},
								expr: &actionExpr{
									pos: position{line: 558, col: 11, offset: 16538},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 558, col: 11, offset: 16538},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 558, col: 11, offset: 16538},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 14, offset: 16541},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 17, offset: 16544},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 558, col: 26, offset: 16553},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 29, offset: 16556},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 34, offset: 16561},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 562, col: 1, offset: 16684},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16708},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16708},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 16714},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 16731},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 564, col: 10, offset: 16736},
								expr: &actionExpr{
									pos: position{line: 564, col: 11, offset: 16737},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 564, col: 11, offset: 16737},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 564, col: 11, offset: 16737},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 14, offset: 16740},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 19, offset: 16745},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 564, col: 38, offset: 16764},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 41, offset: 16767},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 46, offset: 16772},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 568, col: 1, offset: 16890},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16911},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 569, col: 6, offset: 16912},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 569, col: 6, offset: 16912},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 569, col: 12, offset: 16918},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 571, col: 1, offset: 16956},
			expr: &choiceExpr{
				pos: position{line: 572, col: 5, offset: 16979},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 572, col: 5, offset: 16979},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 17000},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 573, col: 5, offset: 17000},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 575, col: 1, offset: 17037},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 17054},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 17054},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 17054},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 17060},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 5, offset: 17077},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 577, col: 10, offset: 17082},
								expr: &actionExpr{
									pos: position{line: 577, col: 11, offset: 17083},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 577, col: 11, offset: 17083},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 577, col: 11, offset: 17083},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 577, col: 14, offset: 17086},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 577, col: 17, offset: 17089},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 577, col: 34, offset: 17106},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 577, col: 37, offset: 17109},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 577, col: 42, offset: 17114},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 581, col: 1, offset: 17230},
			expr: &actionExpr{
				pos: position{line: 581, col: 20, offset: 17249},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 581, col: 21, offset: 17250},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 21, offset: 17250},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 28, offset: 17257},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 34, offset: 17263},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 41, offset: 17270},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 583, col: 1, offset: 17307},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 17324},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 584, col: 5, offset: 17324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 584, col: 5, offset: 17324},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 17330},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 5, offset: 17353},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 585, col: 10, offset: 17358},
								expr: &actionExpr{
									pos: position{line: 585, col: 11, offset: 17359},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 585, col: 11, offset: 17359},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 585, col: 11, offset: 17359},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 585, col: 14, offset: 17362},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 585, col: 17, offset: 17365},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 585, col: 34, offset: 17382},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 585, col: 37, offset: 17385},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 585, col: 42, offset: 17390},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 589, col: 1, offset: 17512},
			expr: &actionExpr{
				pos: position{line: 589, col: 20, offset: 17531},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 589, col: 21, offset: 17532},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 589, col: 21, offset: 17532},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 589, col: 27, offset: 17538},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 591, col: 1, offset: 17575},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17598},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 5, offset: 17598},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 11, offset: 17604},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 5, offset: 17616},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 593, col: 10, offset: 17621},
								expr: &actionExpr{
									pos: position{line: 593, col: 11, offset: 17622},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 593, col: 11, offset: 17622},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 593, col: 11, offset: 17622},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 14, offset: 17625},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 17, offset: 17628},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 593, col: 40, offset: 17651},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 43, offset: 17654},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 48, offset: 17659},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 597, col: 1, offset: 17770},
			expr: &actionExpr{
				pos: position{line: 597, col: 26, offset: 17795},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 597, col: 27, offset: 17796},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 597, col: 27, offset: 17796},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 597, col: 33, offset: 17802},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 599, col: 1, offset: 17839},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 17851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 17851},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 600, col: 5, offset: 17851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 600, col: 5, offset: 17851},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 9, offset: 17855},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 600, col: 12, offset: 17858},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 14, offset: 17860},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 5, offset: 17969},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 605, col: 1, offset: 17979},
			expr: &choiceExpr{
				pos: position{line: 606, col: 5, offset: 17992},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 17992},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 17992},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 606, col: 5, offset: 17992},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 7, offset: 17994},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 16, offset: 18003},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 606, col: 19, offset: 18006},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 23, offset: 18010},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 606, col: 26, offset: 18013},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 30, offset: 18017},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 609, col: 5, offset: 18119},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 611, col: 1, offset: 18129},
			expr: &choiceExpr{
				pos: position{line: 612, col: 5, offset: 18142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 612, col: 5, offset: 18142},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 613, col: 5, offset: 18157},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 5, offset: 18171},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 18187},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 615, col: 5, offset: 18187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 615, col: 5, offset: 18187},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 11, offset: 18193},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 615, col: 20, offset: 18202},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 615, col: 25, offset: 18207},
										expr: &ruleRefExpr{
											pos:  position{line: 615, col: 26, offset: 18208},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 618, col: 5, offset: 18279},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 619, col: 5, offset: 18293},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 621, col: 1, offset: 18302},
			expr: &seqExpr{
				pos: position{line: 621, col: 13, offset: 18314},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 621, col: 13, offset: 18314},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 621, col: 22, offset: 18323},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 621, col: 25, offset: 18326},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 623, col: 1, offset: 18331},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 18344},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 624, col: 5, offset: 18344},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 625, col: 5, offset: 18354},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 626, col: 5, offset: 18366},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 627, col: 5, offset: 18379},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 629, col: 1, offset: 18387},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18401},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 5, offset: 18401},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 13, offset: 18409},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 630, col: 16, offset: 18412},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 20, offset: 18416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 25, offset: 18421},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 630, col: 39, offset: 18435},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 632, col: 1, offset: 18461},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18476},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 5, offset: 18476},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 14, offset: 18485},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 17, offset: 18488},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 21, offset: 18492},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 24, offset: 18495},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 29, offset: 18500},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 35, offset: 18506},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 38, offset: 18509},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 633, col: 42, offset: 18513},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 50, offset: 18521},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 641, col: 1, offset: 18919},
			expr: &choiceExpr{
				pos: position{line: 642, col: 5, offset: 18931},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 18931},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 642, col: 5, offset: 18931},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 642, col: 13, offset: 18939},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 13, offset: 18939},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 643, col: 5, offset: 18975},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 643, col: 5, offset: 18975},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 645, col: 1, offset: 18999},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 19010},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 19010},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 646, col: 5, offset: 19010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 646, col: 8, offset: 19013},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 12, offset: 19017},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 15, offset: 19020},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 17, offset: 19022},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 648, col: 1, offset: 19050},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 19063},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 19063},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 649, col: 5, offset: 19063},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 6, offset: 19064},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 16, offset: 19074},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 19, offset: 19077},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 34, offset: 19092},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 649, col: 37, offset: 19095},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 41, offset: 19099},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 649, col: 44, offset: 19102},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 49, offset: 19107},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 63, offset: 19121},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 649, col: 66, offset: 19124},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 653, col: 1, offset: 19220},
			expr: &choiceExpr{
				pos: position{line: 654, col: 5, offset: 19238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 654, col: 5, offset: 19238},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 19248},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 655, col: 5, offset: 19248},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 657, col: 1, offset: 19284},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 19294},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 19294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19294},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 19300},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 16, offset: 19305},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 21, offset: 19310},
								expr: &actionExpr{
									pos: position{line: 658, col: 22, offset: 19311},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 658, col: 22, offset: 19311},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 658, col: 22, offset: 19311},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 658, col: 25, offset: 19314},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 29, offset: 19318},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 32, offset: 19321},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 34, offset: 19323},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 662, col: 1, offset: 19432},
			expr: &choiceExpr{
				pos: position{line: 663, col: 5, offset: 19446},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19446},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 19446},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 663, col: 5, offset: 19446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 19452},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 663, col: 17, offset: 19458},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 663, col: 22, offset: 19463},
										expr: &ruleRefExpr{
											pos:  position{line: 663, col: 23, offset: 19464},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19535},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 666, col: 5, offset: 19535},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 19541},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 666, col: 22, offset: 19552},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 666, col: 27, offset: 19557},
										expr: &ruleRefExpr{
											pos:  position{line: 666, col: 28, offset: 19558},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19629},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 669, col: 5, offset: 19629},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 673, col: 1, offset: 19698},
			expr: &choiceExpr{
				pos: position{line: 674, col: 5, offset: 19708},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19708},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 19708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 674, col: 5, offset: 19708},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 674, col: 9, offset: 19712},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 15, offset: 19718},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19934},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 19934},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 683, col: 5, offset: 19934},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 683, col: 9, offset: 19938},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 683, col: 13, offset: 19942},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 18, offset: 19947},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 683, col: 23, offset: 19952},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 693, col: 1, offset: 20157},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20167},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 20167},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 20167},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 694, col: 5, offset: 20167},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 694, col: 9, offset: 20171},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 14, offset: 20176},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 27, offset: 20189},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 694, col: 30, offset: 20192},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 34, offset: 20196},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 37, offset: 20199},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 40, offset: 20202},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 53, offset: 20215},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 20386},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 700, col: 5, offset: 20386},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 700, col: 5, offset: 20386},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 9, offset: 20390},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 700, col: 12, offset: 20393},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 16, offset: 20397},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 700, col: 19, offset: 20400},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 22, offset: 20403},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 700, col: 35, offset: 20416},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20587},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20587},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20587},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 706, col: 9, offset: 20591},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 14, offset: 20596},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 27, offset: 20609},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 30, offset: 20612},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 34, offset: 20616},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 37, offset: 20619},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20792},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20792},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 9, offset: 20796},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 14, offset: 20801},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 712, col: 19, offset: 20806},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20855},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20855},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 713, col: 5, offset: 20855},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 713, col: 9, offset: 20859},
									expr: &litMatcher{
										pos:        position{line: 713, col: 11, offset: 20861},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 16, offset: 20866},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 19, offset: 20869},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 715, col: 1, offset: 20920},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20932},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 716, col: 5, offset: 20932},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 717, col: 5, offset: 20944},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 20955},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 20965},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 20973},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 20981},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 20981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 721, col: 5, offset: 20981},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 9, offset: 20985},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 12, offset: 20988},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 17, offset: 20993},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 22, offset: 20998},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 25, offset: 21001},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 723, col: 1, offset: 21027},
			expr: &actionExpr{
				pos: position{line: 724, col: 5, offset: 21038},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 724, col: 5, offset: 21038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 724, col: 5, offset: 21038},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 9, offset: 21042},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 724, col: 12, offset: 21045},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 19, offset: 21052},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 26, offset: 21059},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 724, col: 29, offset: 21062},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 728, col: 1, offset: 21155},
			expr: &actionExpr{
				pos: position{line: 729, col: 5, offset: 21166},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 729, col: 5, offset: 21166},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 21166},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 11, offset: 21172},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 17, offset: 21178},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 22, offset: 21183},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 22, offset: 21183},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 733, col: 1, offset: 21274},
			expr: &actionExpr{
				pos: position{line: 733, col: 13, offset: 21286},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 733, col: 13, offset: 21286},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 733, col: 13, offset: 21286},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 733, col: 16, offset: 21289},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 20, offset: 21293},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 23, offset: 21296},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 25, offset: 21298},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 735, col: 1, offset: 21323},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 21333},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 21333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 5, offset: 21333},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 10, offset: 21338},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 736, col: 20, offset: 21348},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 736, col: 23, offset: 21351},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 736, col: 27, offset: 21355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 736, col: 30, offset: 21358},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 36, offset: 21364},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 740, col: 1, offset: 21449},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 21459},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 21459},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 741, col: 5, offset: 21459},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 9, offset: 21463},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 741, col: 12, offset: 21466},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 18, offset: 21472},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 32, offset: 21486},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 741, col: 35, offset: 21489},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 745, col: 1, offset: 21579},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 21587},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 746, col: 5, offset: 21587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 746, col: 5, offset: 21587},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 10, offset: 21592},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 13, offset: 21595},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 19, offset: 21601},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 33, offset: 21615},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 746, col: 36, offset: 21618},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 750, col: 1, offset: 21707},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 21715},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 21715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 751, col: 5, offset: 21715},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 10, offset: 21720},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 13, offset: 21723},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 19, offset: 21729},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 27, offset: 21737},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 751, col: 30, offset: 21740},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 755, col: 1, offset: 21831},
			expr: &choiceExpr{
				pos: position{line: 756, col: 5, offset: 21843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 21843},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 756, col: 5, offset: 21843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 756, col: 5, offset: 21843},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 21849},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 756, col: 17, offset: 21855},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 756, col: 22, offset: 21860},
										expr: &ruleRefExpr{
											pos:  position{line: 756, col: 22, offset: 21860},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 21954},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 759, col: 5, offset: 21954},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 762, col: 1, offset: 21991},
			expr: &actionExpr{
				pos: position{line: 762, col: 13, offset: 22003},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 762, col: 13, offset: 22003},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 762, col: 13, offset: 22003},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 762, col: 16, offset: 22006},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 20, offset: 22010},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 23, offset: 22013},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 25, offset: 22015},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 764, col: 1, offset: 22040},
			expr: &actionExpr{
				pos: position{line: 765, col: 5, offset: 22050},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 765, col: 5, offset: 22050},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 765, col: 5, offset: 22050},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 9, offset: 22054},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 14, offset: 22059},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 765, col: 17, offset: 22062},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 21, offset: 22066},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 765, col: 24, offset: 22069},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 30, offset: 22075},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 771, col: 1, offset: 22182},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 22194},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 22194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 772, col: 5, offset: 22194},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 15, offset: 22204},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 22218},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 10, offset: 22223},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 5, offset: 22235},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 11, offset: 22241},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 5, offset: 22254},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 11, offset: 22260},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 5, offset: 22273},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 13, offset: 22281},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 5, offset: 22296},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 12, offset: 22303},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 5, offset: 22317},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 13, offset: 22325},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 5, offset: 22340},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 11, offset: 22346},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 803, col: 1, offset: 22713},
			expr: &choiceExpr{
				pos: position{line: 804, col: 5, offset: 22727},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 22727},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 22727},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 804, col: 5, offset: 22727},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 12, offset: 22734},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 804, col: 14, offset: 22736},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 22764},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 22764},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 805, col: 5, offset: 22764},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 12, offset: 22771},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 805, col: 14, offset: 22773},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 26, offset: 22785},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 807, col: 1, offset: 22829},
			expr: &choiceExpr{
				pos: position{line: 808, col: 5, offset: 22847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 808, col: 5, offset: 22847},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 808, col: 5, offset: 22847},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 808, col: 5, offset: 22847},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 9, offset: 22851},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 14, offset: 22856},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 16, offset: 22858},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 19, offset: 22861},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 808, col: 21, offset: 22863},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 25, offset: 22867},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 22961},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 809, col: 5, offset: 22961},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 10, offset: 22966},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 811, col: 1, offset: 23058},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 23077},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 23077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 812, col: 5, offset: 23077},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 23083},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 812, col: 25, offset: 23097},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 812, col: 30, offset: 23102},
								expr: &actionExpr{
									pos: position{line: 812, col: 31, offset: 23103},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 812, col: 31, offset: 23103},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 812, col: 31, offset: 23103},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 812, col: 34, offset: 23106},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 812, col: 38, offset: 23110},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 812, col: 41, offset: 23113},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 812, col: 46, offset: 23118},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 816, col: 1, offset: 23239},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 23251},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23251},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 23251},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 817, col: 5, offset: 23251},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 7, offset: 23253},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 12, offset: 23258},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 817, col: 14, offset: 23260},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 20, offset: 23266},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 817, col: 29, offset: 23275},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 35, offset: 23281},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23375},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23375},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 820, col: 5, offset: 23375},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 7, offset: 23377},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 12, offset: 23382},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 820, col: 14, offset: 23384},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23412},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 821, col: 5, offset: 23412},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 823, col: 1, offset: 23436},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23449},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 23449},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 824, col: 5, offset: 23449},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 7, offset: 23451},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 10, offset: 23454},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 824, col: 12, offset: 23456},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 15, offset: 23459},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 23487},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 825, col: 5, offset: 23487},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 825, col: 5, offset: 23487},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 825, col: 7, offset: 23489},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 825, col: 10, offset: 23492},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 23520},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 826, col: 5, offset: 23520},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 828, col: 1, offset: 23544},
			expr: &ruleRefExpr{
				pos:  position{line: 829, col: 5, offset: 23557},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 831, col: 1, offset: 23563},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 23576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23576},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 23576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 832, col: 5, offset: 23576},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 23582},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 832, col: 19, offset: 23590},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 832, col: 24, offset: 23595},
										expr: &actionExpr{
											pos: position{line: 832, col: 25, offset: 23596},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 832, col: 25, offset: 23596},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 832, col: 30, offset: 23601},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 23719},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 835, col: 5, offset: 23719},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 837, col: 1, offset: 23743},
			expr: &actionExpr{
				pos: position{line: 838, col: 5, offset: 23755},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 838, col: 5, offset: 23755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 23755},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 11, offset: 23761},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 24, offset: 23774},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 26, offset: 23776},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 31, offset: 23781},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 33, offset: 23783},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 39, offset: 23789},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 48, offset: 23798},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 54, offset: 23804},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 63, offset: 23813},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 65, offset: 23815},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 68, offset: 23818},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 70, offset: 23820},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 78, offset: 23828},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 86, offset: 23836},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 838, col: 89, offset: 23839},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 93, offset: 23843},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 96, offset: 23846},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 105, offset: 23855},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 857, col: 1, offset: 24090},
			expr: &choiceExpr{
				pos: position{line: 858, col: 5, offset: 24107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24107},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 858, col: 5, offset: 24107},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 858, col: 5, offset: 24107},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 858, col: 7, offset: 24109},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 858, col: 14, offset: 24116},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 858, col: 14, offset: 24116},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 858, col: 21, offset: 24123},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 858, col: 29, offset: 24131},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 24164},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 859, col: 5, offset: 24164},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 861, col: 1, offset: 24200},
			expr: &choiceExpr{
				pos: position{line: 862, col: 5, offset: 24213},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 24213},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 862, col: 5, offset: 24213},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 862, col: 5, offset: 24213},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 7, offset: 24215},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 13, offset: 24221},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 862, col: 15, offset: 24223},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 20, offset: 24228},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 24267},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 863, col: 5, offset: 24267},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 865, col: 1, offset: 24291},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 24306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24306},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24306},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 866, col: 5, offset: 24306},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 7, offset: 24308},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 13, offset: 24314},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 15, offset: 24316},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 18, offset: 24319},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 20, offset: 24321},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 28, offset: 24329},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 24368},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 867, col: 5, offset: 24368},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 869, col: 1, offset: 24392},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 24406},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24406},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 24406},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 870, col: 5, offset: 24406},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 870, col: 7, offset: 24408},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 870, col: 14, offset: 24415},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 870, col: 16, offset: 24417},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 21, offset: 24422},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 24461},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 871, col: 5, offset: 24461},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 873, col: 1, offset: 24485},
			expr: &choiceExpr{
				pos: position{line: 874, col: 5, offset: 24500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 24500},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 874, col: 5, offset: 24500},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 874, col: 5, offset: 24500},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 7, offset: 24502},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 13, offset: 24508},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 15, offset: 24510},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 18, offset: 24513},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 874, col: 20, offset: 24515},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 25, offset: 24520},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 874, col: 31, offset: 24526},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 37, offset: 24532},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 24645},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 877, col: 5, offset: 24645},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 879, col: 1, offset: 24669},
			expr: &choiceExpr{
				pos: position{line: 880, col: 5, offset: 24682},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 24682},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 24682},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 880, col: 5, offset: 24682},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 7, offset: 24684},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 880, col: 12, offset: 24689},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 880, col: 12, offset: 24689},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 880, col: 18, offset: 24695},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24725},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 881, col: 5, offset: 24725},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 883, col: 1, offset: 24751},
			expr: &choiceExpr{
				pos: position{line: 884, col: 5, offset: 24764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 24764},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 884, col: 5, offset: 24764},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 884, col: 5, offset: 24764},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 7, offset: 24766},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 13, offset: 24772},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 884, col: 15, offset: 24774},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 21, offset: 24780},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 885, col: 5, offset: 24811},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 885, col: 5, offset: 24811},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 887, col: 1, offset: 24833},
			expr: &actionExpr{
				pos: position{line: 887, col: 10, offset: 24842},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 887, col: 10, offset: 24842},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 888, col: 1, offset: 24877},
			expr: &actionExpr{
				pos: position{line: 888, col: 6, offset: 24882},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 888, col: 6, offset: 24882},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 889, col: 1, offset: 24909},
			expr: &actionExpr{
				pos: position{line: 889, col: 8, offset: 24916},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 889, col: 8, offset: 24916},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 890, col: 1, offset: 24947},
			expr: &actionExpr{
				pos: position{line: 890, col: 8, offset: 24954},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 890, col: 8, offset: 24954},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 891, col: 1, offset: 24985},
			expr: &actionExpr{
				pos: position{line: 891, col: 9, offset: 24993},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 891, col: 9, offset: 24993},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 892, col: 1, offset: 25026},
			expr: &actionExpr{
				pos: position{line: 892, col: 9, offset: 25034},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 892, col: 9, offset: 25034},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 893, col: 1, offset: 25067},
			expr: &ruleRefExpr{
				pos:  position{line: 893, col: 6, offset: 25072},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 894, col: 1, offset: 25080},
			expr: &actionExpr{
				pos: position{line: 894, col: 10, offset: 25089},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 894, col: 10, offset: 25089},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 895, col: 1, offset: 25124},
			expr: &actionExpr{
				pos: position{line: 895, col: 9, offset: 25132},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 895, col: 9, offset: 25132},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 896, col: 1, offset: 25165},
			expr: &actionExpr{
				pos: position{line: 896, col: 6, offset: 25170},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 896, col: 6, offset: 25170},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 897, col: 1, offset: 25197},
			expr: &actionExpr{
				pos: position{line: 897, col: 9, offset: 25205},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 897, col: 9, offset: 25205},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 898, col: 1, offset: 25238},
			expr: &actionExpr{
				pos: position{line: 898, col: 7, offset: 25244},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 898, col: 7, offset: 25244},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 899, col: 1, offset: 25273},
			expr: &actionExpr{
				pos: position{line: 899, col: 8, offset: 25280},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 899, col: 8, offset: 25280},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 900, col: 1, offset: 25311},
			expr: &actionExpr{
				pos: position{line: 900, col: 8, offset: 25318},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 900, col: 8, offset: 25318},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 901, col: 1, offset: 25349},
			expr: &actionExpr{
				pos: position{line: 901, col: 9, offset: 25357},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 901, col: 9, offset: 25357},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 902, col: 1, offset: 25390},
			expr: &actionExpr{
				pos: position{line: 902, col: 9, offset: 25398},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 902, col: 9, offset: 25398},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 904, col: 1, offset: 25432},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25454},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 905, col: 5, offset: 25454},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 14, offset: 25463},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 19, offset: 25468},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 27, offset: 25476},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 34, offset: 25483},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 42, offset: 25491},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 50, offset: 25499},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 59, offset: 25508},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 67, offset: 25516},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 75, offset: 25524},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 909, col: 1, offset: 25550},
			expr: &choiceExpr{
				pos: position{line: 910, col: 5, offset: 25562},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 910, col: 5, offset: 25562},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 5, offset: 25578},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 5, offset: 25596},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 5, offset: 25614},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 5, offset: 25633},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 5, offset: 25646},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 5, offset: 25655},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 5, offset: 25672},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 5, offset: 25691},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 919, col: 5, offset: 25710},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 921, col: 1, offset: 25723},
			expr: &actionExpr{
				pos: position{line: 922, col: 5, offset: 25741},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 922, col: 5, offset: 25741},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 922, col: 7, offset: 25743},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 926, col: 1, offset: 25856},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 25874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 25874},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 927, col: 5, offset: 25874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 927, col: 5, offset: 25874},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 7, offset: 25876},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 927, col: 14, offset: 25883},
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 15, offset: 25884},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 25999},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 930, col: 5, offset: 25999},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 7, offset: 26001},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 934, col: 1, offset: 26105},
			expr: &choiceExpr{
				pos: position{line: 935, col: 5, offset: 26124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26124},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 935, col: 5, offset: 26124},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 935, col: 5, offset: 26124},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 7, offset: 26126},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 935, col: 11, offset: 26130},
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 12, offset: 26131},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 26245},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 938, col: 5, offset: 26245},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 7, offset: 26247},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 942, col: 1, offset: 26346},
			expr: &actionExpr{
				pos: position{line: 943, col: 5, offset: 26363},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 943, col: 5, offset: 26363},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 943, col: 7, offset: 26365},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 947, col: 1, offset: 26478},
			expr: &actionExpr{
				pos: position{line: 948, col: 5, offset: 26497},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 948, col: 5, offset: 26497},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 948, col: 7, offset: 26499},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 952, col: 1, offset: 26608},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 26627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 26627},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 953, col: 5, offset: 26627},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 26740},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 954, col: 5, offset: 26740},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 956, col: 1, offset: 26851},
			expr: &actionExpr{
				pos: position{line: 957, col: 5, offset: 26867},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 957, col: 5, offset: 26867},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 959, col: 1, offset: 26973},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 26989},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 26989},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 960, col: 5, offset: 26989},
							expr: &seqExpr{
								pos: position{line: 960, col: 7, offset: 26991},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 960, col: 7, offset: 26991},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 960, col: 25, offset: 27009},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 30, offset: 27014},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 34, offset: 27018},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 964, col: 1, offset: 27116},
			expr: &choiceExpr{
				pos: position{line: 965, col: 5, offset: 27129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 965, col: 5, offset: 27129},
						name: "TypeExternal",
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27146},
						run: (*parser).callonCastType3,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 27146},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 966, col: 5, offset: 27146},
									expr: &litMatcher{
										pos:        position{line: 966, col: 6, offset: 27147},
										val:        "null",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 966, col: 13, offset: 27154},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 17, offset: 27158},
										name: "PrimitiveType",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 968, col: 1, offset: 27193},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 27210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 969, col: 5, offset: 27210},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 5, offset: 27227},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 971, col: 5, offset: 27251},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 971, col: 5, offset: 27251},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 971, col: 5, offset: 27251},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 971, col: 9, offset: 27255},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 971, col: 31, offset: 27277},
									expr: &ruleRefExpr{
										pos:  position{line: 971, col: 32, offset: 27278},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 973, col: 1, offset: 27314},
			expr: &choiceExpr{
				pos: position{line: 974, col: 5, offset: 27323},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 5, offset: 27323},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 5, offset: 27340},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 5, offset: 27358},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 978, col: 1, offset: 27371},
			expr: &choiceExpr{
				pos: position{line: 979, col: 5, offset: 27388},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 27388},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 27388},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 979, col: 5, offset: 27388},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 979, col: 12, offset: 27395},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 979, col: 15, offset: 27398},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 979, col: 19, offset: 27402},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 22, offset: 27405},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 26, offset: 27409},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 979, col: 31, offset: 27414},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 979, col: 34, offset: 27417},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 27444},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 980, col: 5, offset: 27444},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 980, col: 5, offset: 27444},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 980, col: 12, offset: 27451},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 980, col: 15, offset: 27454},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 980, col: 19, offset: 27458},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 980, col: 22, offset: 27461},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 980, col: 26, offset: 27465},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 980, col: 36, offset: 27475},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 980, col: 39, offset: 27478},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 982, col: 1, offset: 27503},
			expr: &choiceExpr{
				pos: position{line: 983, col: 5, offset: 27521},
				alternatives: []interface{}{
					&labeledExpr{
						pos:   position{line: 983, col: 5, offset: 27521},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 983, col: 10, offset: 27526},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 27544},
						run: (*parser).callonAmbiguousType4,
						expr: &seqExpr{
							pos: position{line: 984, col: 5, offset: 27544},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 984, col: 5, offset: 27544},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 984, col: 10, offset: 27549},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 984, col: 25, offset: 27564},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 984, col: 28, offset: 27567},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 984, col: 32, offset: 27571},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 984, col: 35, offset: 27574},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 984, col: 39, offset: 27578},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 984, col: 42, offset: 27581},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 984, col: 46, offset: 27585},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 984, col: 51, offset: 27590},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 984, col: 54, offset: 27593},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 27694},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 987, col: 5, offset: 27694},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 10, offset: 27699},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 27801},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 990, col: 5, offset: 27801},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 990, col: 5, offset: 27801},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 9, offset: 27805},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 990, col: 12, offset: 27808},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 14, offset: 27810},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 990, col: 25, offset: 27821},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 992, col: 1, offset: 27844},
			expr: &actionExpr{
				pos: position{line: 993, col: 5, offset: 27858},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 5, offset: 27858},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 27864},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 997, col: 1, offset: 27960},
			expr: &actionExpr{
				pos: position{line: 998, col: 5, offset: 27973},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 998, col: 5, offset: 27973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 998, col: 5, offset: 27973},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 11, offset: 27979},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 998, col: 16, offset: 27984},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 998, col: 21, offset: 27989},
								expr: &ruleRefExpr{
									pos:  position{line: 998, col: 21, offset: 27989},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1002, col: 1, offset: 28083},
			expr: &actionExpr{
				pos: position{line: 1002, col: 16, offset: 28098},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 16, offset: 28098},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1002, col: 16, offset: 28098},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1002, col: 19, offset: 28101},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 23, offset: 28105},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 26, offset: 28108},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 30, offset: 28112},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1004, col: 1, offset: 28138},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 28154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 28154},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1005, col: 5, offset: 28154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1005, col: 5, offset: 28154},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1005, col: 9, offset: 28158},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1005, col: 12, offset: 28161},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1005, col: 19, offset: 28168},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1005, col: 33, offset: 28182},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1005, col: 36, offset: 28185},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28280},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 28280},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1008, col: 5, offset: 28280},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1008, col: 9, offset: 28284},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 12, offset: 28287},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 16, offset: 28291},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1008, col: 21, offset: 28296},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1008, col: 24, offset: 28299},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28388},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 28388},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1011, col: 5, offset: 28388},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1011, col: 10, offset: 28393},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 14, offset: 28397},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 18, offset: 28401},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1011, col: 23, offset: 28406},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1011, col: 26, offset: 28409},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 28497},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1014, col: 5, offset: 28497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1014, col: 5, offset: 28497},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 10, offset: 28502},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1014, col: 13, offset: 28505},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1014, col: 21, offset: 28513},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 26, offset: 28518},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1014, col: 29, offset: 28521},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 33, offset: 28525},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1014, col: 36, offset: 28528},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1014, col: 44, offset: 28536},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 49, offset: 28541},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1014, col: 52, offset: 28544},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1018, col: 1, offset: 28658},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 28682},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28682},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28682},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1019, col: 5, offset: 28682},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 9, offset: 28686},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 12, offset: 28689},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 19, offset: 28696},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 33, offset: 28710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 36, offset: 28713},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28808},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 28808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1022, col: 5, offset: 28808},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 9, offset: 28812},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 12, offset: 28815},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 16, offset: 28819},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 29, offset: 28832},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1022, col: 32, offset: 28835},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28924},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28924},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 28924},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 10, offset: 28929},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 13, offset: 28932},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 17, offset: 28936},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 30, offset: 28949},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 33, offset: 28952},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 29040},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 29040},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 29040},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 10, offset: 29045},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 13, offset: 29048},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 21, offset: 29056},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 34, offset: 29069},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 37, offset: 29072},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 41, offset: 29076},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 44, offset: 29079},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 52, offset: 29087},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 65, offset: 29100},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 68, offset: 29103},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1032, col: 1, offset: 29217},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 5, offset: 29235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1033, col: 5, offset: 29235},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 29261},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1040, col: 1, offset: 29520},
			expr: &actionExpr{
				pos: position{line: 1041, col: 5, offset: 29546},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1041, col: 9, offset: 29550},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1041, col: 9, offset: 29550},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 19, offset: 29560},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 30, offset: 29571},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 41, offset: 29582},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1042, col: 9, offset: 29599},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1042, col: 18, offset: 29608},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1042, col: 28, offset: 29618},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1042, col: 38, offset: 29628},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1043, col: 9, offset: 29644},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1044, col: 9, offset: 29662},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1044, col: 18, offset: 29671},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1055, col: 1, offset: 30312},
			expr: &actionExpr{
				pos: position{line: 1056, col: 5, offset: 30338},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1056, col: 9, offset: 30342},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1056, col: 9, offset: 30342},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1056, col: 22, offset: 30355},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1057, col: 9, offset: 30370},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1058, col: 9, offset: 30386},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1059, col: 9, offset: 30404},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1059, col: 16, offset: 30411},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1060, col: 9, offset: 30425},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1060, col: 18, offset: 30434},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1060, col: 28, offset: 30444},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1064, col: 1, offset: 30560},
			expr: &actionExpr{
				pos: position{line: 1065, col: 5, offset: 30578},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1065, col: 5, offset: 30578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 30578},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1065, col: 11, offset: 30584},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1065, col: 21, offset: 30594},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1065, col: 26, offset: 30599},
								expr: &ruleRefExpr{
									pos:  position{line: 1065, col: 26, offset: 30599},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1069, col: 1, offset: 30698},
			expr: &actionExpr{
				pos: position{line: 1069, col: 21, offset: 30718},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 21, offset: 30718},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1069, col: 21, offset: 30718},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1069, col: 24, offset: 30721},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 28, offset: 30725},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 31, offset: 30728},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 35, offset: 30732},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1071, col: 1, offset: 30763},
			expr: &actionExpr{
				pos: position{line: 1072, col: 5, offset: 30777},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 5, offset: 30777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 30777},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 10, offset: 30782},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1072, col: 20, offset: 30792},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1072, col: 23, offset: 30795},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1072, col: 27, offset: 30799},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 30, offset: 30802},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 34, offset: 30806},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1076, col: 1, offset: 30888},
			expr: &actionExpr{
				pos: position{line: 1077, col: 5, offset: 30914},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1077, col: 5, offset: 30914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 30914},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1077, col: 11, offset: 30920},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 21, offset: 30930},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1077, col: 26, offset: 30935},
								expr: &ruleRefExpr{
									pos:  position{line: 1077, col: 26, offset: 30935},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1081, col: 1, offset: 31042},
			expr: &actionExpr{
				pos: position{line: 1081, col: 29, offset: 31070},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 29, offset: 31070},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1081, col: 29, offset: 31070},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1081, col: 32, offset: 31073},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1081, col: 36, offset: 31077},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 39, offset: 31080},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 43, offset: 31084},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1083, col: 1, offset: 31123},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 31145},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 5, offset: 31145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1084, col: 5, offset: 31145},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 10, offset: 31150},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 20, offset: 31160},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1084, col: 23, offset: 31163},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 27, offset: 31167},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 30, offset: 31170},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 34, offset: 31174},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1088, col: 1, offset: 31264},
			expr: &choiceExpr{
				pos: position{line: 1089, col: 5, offset: 31278},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1089, col: 5, offset: 31278},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 5, offset: 31297},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1092, col: 1, offset: 31311},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 31329},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 5, offset: 31329},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 24, offset: 31348},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1095, col: 1, offset: 31366},
			expr: &actionExpr{
				pos: position{line: 1095, col: 12, offset: 31377},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 12, offset: 31377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1095, col: 12, offset: 31377},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1095, col: 19, offset: 31384},
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 20, offset: 31385},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1096, col: 1, offset: 31422},
			expr: &actionExpr{
				pos: position{line: 1096, col: 11, offset: 31432},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 11, offset: 31432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1096, col: 11, offset: 31432},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1096, col: 17, offset: 31438},
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 18, offset: 31439},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1097, col: 1, offset: 31475},
			expr: &actionExpr{
				pos: position{line: 1097, col: 11, offset: 31485},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 11, offset: 31485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1097, col: 11, offset: 31485},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1097, col: 17, offset: 31491},
							expr: &ruleRefExpr{
								pos:  position{line: 1097, col: 18, offset: 31492},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1098, col: 1, offset: 31528},
			expr: &actionExpr{
				pos: position{line: 1098, col: 12, offset: 31539},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 12, offset: 31539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 12, offset: 31539},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1098, col: 19, offset: 31546},
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 20, offset: 31547},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1099, col: 1, offset: 31584},
			expr: &actionExpr{
				pos: position{line: 1099, col: 11, offset: 31594},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 11, offset: 31594},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 11, offset: 31594},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1099, col: 17, offset: 31600},
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 18, offset: 31601},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1101, col: 1, offset: 31638},
			expr: &charClassMatcher{
				pos:        position{line: 1101, col: 19, offset: 31656},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1103, col: 1, offset: 31668},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 18, offset: 31685},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 18, offset: 31685},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1103, col: 36, offset: 31703},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1105, col: 1, offset: 31710},
			expr: &actionExpr{
				pos: position{line: 1106, col: 5, offset: 31725},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1106, col: 5, offset: 31725},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1106, col: 8, offset: 31728},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1108, col: 1, offset: 31809},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 5, offset: 31828},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 31828},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 31828},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1109, col: 5, offset: 31828},
									expr: &seqExpr{
										pos: position{line: 1109, col: 7, offset: 31830},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1109, col: 7, offset: 31830},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 1109, col: 15, offset: 31838},
												expr: &ruleRefExpr{
													pos:  position{line: 1109, col: 16, offset: 31839},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 32, offset: 31855},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1109, col: 48, offset: 31871},
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 48, offset: 31871},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31923},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1110, col: 5, offset: 31923},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 31962},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 31962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 31962},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 10, offset: 31967},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 13, offset: 31970},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 32061},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1113, col: 5, offset: 32061},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1114, col: 5, offset: 32103},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1114, col: 5, offset: 32103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1114, col: 5, offset: 32103},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 8, offset: 32106},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1114, col: 26, offset: 32124},
									expr: &seqExpr{
										pos: position{line: 1114, col: 28, offset: 32126},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1114, col: 28, offset: 32126},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1114, col: 31, offset: 32129},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 1116, col: 1, offset: 32154},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 5, offset: 32166},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 5, offset: 32166},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 5, offset: 32185},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 5, offset: 32201},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 5, offset: 32218},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1122, col: 1, offset: 32231},
			expr: &actionExpr{
				pos: position{line: 1123, col: 5, offset: 32240},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 5, offset: 32240},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1123, col: 5, offset: 32240},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1123, col: 14, offset: 32249},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1123, col: 18, offset: 32253},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1127, col: 1, offset: 32373},
			expr: &seqExpr{
				pos: position{line: 1127, col: 12, offset: 32384},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 12, offset: 32384},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1127, col: 15, offset: 32387},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 19, offset: 32391},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1127, col: 22, offset: 32394},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 26, offset: 32398},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1129, col: 1, offset: 32402},
			expr: &seqExpr{
				pos: position{line: 1129, col: 6, offset: 32407},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1129, col: 6, offset: 32407},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1129, col: 11, offset: 32412},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1129, col: 16, offset: 32417},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1129, col: 21, offset: 32422},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1130, col: 1, offset: 32428},
			expr: &seqExpr{
				pos: position{line: 1130, col: 6, offset: 32433},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1130, col: 6, offset: 32433},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1130, col: 11, offset: 32438},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1132, col: 1, offset: 32445},
			expr: &seqExpr{
				pos: position{line: 1132, col: 12, offset: 32456},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 12, offset: 32456},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 24, offset: 32468},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1134, col: 1, offset: 32480},
			expr: &seqExpr{
				pos: position{line: 1134, col: 15, offset: 32494},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 15, offset: 32494},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1134, col: 18, offset: 32497},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 22, offset: 32501},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1134, col: 25, offset: 32504},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 29, offset: 32508},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1134, col: 32, offset: 32511},
						expr: &seqExpr{
							pos: position{line: 1134, col: 33, offset: 32512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 33, offset: 32512},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1134, col: 37, offset: 32516},
									expr: &charClassMatcher{
										pos:        position{line: 1134, col: 37, offset: 32516},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1136, col: 1, offset: 32526},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 32541},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1137, col: 5, offset: 32541},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1138, col: 5, offset: 32549},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1138, col: 6, offset: 32550},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1138, col: 6, offset: 32550},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1138, col: 12, offset: 32556},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1138, col: 17, offset: 32561},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1138, col: 20, offset: 32564},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1138, col: 24, offset: 32568},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1138, col: 27, offset: 32571},
								expr: &seqExpr{
									pos: position{line: 1138, col: 28, offset: 32572},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1138, col: 28, offset: 32572},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1138, col: 32, offset: 32576},
											expr: &charClassMatcher{
												pos:        position{line: 1138, col: 32, offset: 32576},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1140, col: 1, offset: 32586},
			expr: &actionExpr{
				pos: position{line: 1141, col: 5, offset: 32599},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 5, offset: 32599},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1141, col: 5, offset: 32599},
							expr: &litMatcher{
								pos:        position{line: 1141, col: 5, offset: 32599},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1141, col: 10, offset: 32604},
							expr: &seqExpr{
								pos: position{line: 1141, col: 11, offset: 32605},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1141, col: 11, offset: 32605},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1141, col: 19, offset: 32613},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1145, col: 1, offset: 32739},
			expr: &seqExpr{
				pos: position{line: 1145, col: 11, offset: 32749},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 32749},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1145, col: 16, offset: 32754},
						expr: &seqExpr{
							pos: position{line: 1145, col: 17, offset: 32755},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 17, offset: 32755},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 21, offset: 32759},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1147, col: 1, offset: 32767},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 32780},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1148, col: 5, offset: 32780},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1149, col: 5, offset: 32790},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1150, col: 5, offset: 32800},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1151, col: 5, offset: 32810},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1152, col: 5, offset: 32819},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1153, col: 5, offset: 32828},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1154, col: 5, offset: 32837},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1155, col: 5, offset: 32846},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1156, col: 5, offset: 32855},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1158, col: 1, offset: 32861},
			expr: &actionExpr{
				pos: position{line: 1159, col: 5, offset: 32868},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 5, offset: 32868},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1159, col: 5, offset: 32868},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1159, col: 10, offset: 32873},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1159, col: 14, offset: 32877},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1159, col: 19, offset: 32882},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1159, col: 23, offset: 32886},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1159, col: 28, offset: 32891},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1159, col: 32, offset: 32895},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1161, col: 1, offset: 32932},
			expr: &actionExpr{
				pos: position{line: 1162, col: 5, offset: 32940},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1162, col: 5, offset: 32940},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1162, col: 5, offset: 32940},
							expr: &seqExpr{
								pos: position{line: 1162, col: 8, offset: 32943},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1162, col: 8, offset: 32943},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1162, col: 12, offset: 32947},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 16, offset: 32951},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1162, col: 20, offset: 32955},
										expr: &choiceExpr{
											pos: position{line: 1162, col: 22, offset: 32957},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1162, col: 22, offset: 32957},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1162, col: 33, offset: 32968},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 39, offset: 32974},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 41, offset: 32976},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1166, col: 1, offset: 33140},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 5, offset: 33158},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1167, col: 5, offset: 33158},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1167, col: 5, offset: 33158},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1167, col: 5, offset: 33158},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1167, col: 7, offset: 33160},
										expr: &ruleRefExpr{
											pos:  position{line: 1167, col: 7, offset: 33160},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1167, col: 17, offset: 33170},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1167, col: 19, offset: 33172},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1170, col: 5, offset: 33236},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1170, col: 5, offset: 33236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1170, col: 5, offset: 33236},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1170, col: 7, offset: 33238},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1170, col: 11, offset: 33242},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1170, col: 13, offset: 33244},
										expr: &ruleRefExpr{
											pos:  position{line: 1170, col: 13, offset: 33244},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1170, col: 23, offset: 33254},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1170, col: 28, offset: 33259},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1170, col: 30, offset: 33261},
										expr: &ruleRefExpr{
											pos:  position{line: 1170, col: 30, offset: 33261},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1170, col: 40, offset: 33271},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1170, col: 42, offset: 33273},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1173, col: 5, offset: 33372},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1173, col: 5, offset: 33372},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1173, col: 5, offset: 33372},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1173, col: 10, offset: 33377},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1173, col: 12, offset: 33379},
										expr: &ruleRefExpr{
											pos:  position{line: 1173, col: 12, offset: 33379},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1173, col: 22, offset: 33389},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1173, col: 24, offset: 33391},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 33462},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1176, col: 5, offset: 33462},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1176, col: 5, offset: 33462},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 7, offset: 33464},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 11, offset: 33468},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1176, col: 13, offset: 33470},
										expr: &ruleRefExpr{
											pos:  position{line: 1176, col: 13, offset: 33470},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 23, offset: 33480},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 5, offset: 33548},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1179, col: 5, offset: 33548},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1183, col: 1, offset: 33585},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 5, offset: 33597},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 5, offset: 33597},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 5, offset: 33604},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1187, col: 1, offset: 33609},
			expr: &actionExpr{
				pos: position{line: 1187, col: 12, offset: 33620},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 12, offset: 33620},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 12, offset: 33620},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 16, offset: 33624},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 18, offset: 33626},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1189, col: 1, offset: 33664},
			expr: &actionExpr{
				pos: position{line: 1189, col: 12, offset: 33675},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 12, offset: 33675},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1189, col: 12, offset: 33675},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 14, offset: 33677},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1189, col: 18, offset: 33681},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1191, col: 1, offset: 33719},
			expr: &actionExpr{
				pos: position{line: 1192, col: 5, offset: 33730},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 5, offset: 33730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1192, col: 5, offset: 33730},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 7, offset: 33732},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 10, offset: 33735},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 14, offset: 33739},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 16, offset: 33741},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1196, col: 1, offset: 33814},
			expr: &actionExpr{
				pos: position{line: 1197, col: 5, offset: 33825},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 5, offset: 33825},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 5, offset: 33825},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 7, offset: 33827},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1197, col: 11, offset: 33831},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 15, offset: 33835},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 17, offset: 33837},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1201, col: 1, offset: 33900},
			expr: &actionExpr{
				pos: position{line: 1202, col: 4, offset: 33908},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1202, col: 4, offset: 33908},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1202, col: 6, offset: 33910},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1204, col: 1, offset: 33950},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 33964},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 33964},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 5, offset: 33979},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1208, col: 1, offset: 33995},
			expr: &actionExpr{
				pos: position{line: 1208, col: 14, offset: 34008},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1208, col: 14, offset: 34008},
					expr: &charClassMatcher{
						pos:        position{line: 1208, col: 14, offset: 34008},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1210, col: 1, offset: 34047},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 34066},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 34066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1211, col: 5, offset: 34066},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1211, col: 9, offset: 34070},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1213, col: 1, offset: 34113},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 34129},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 34129},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 34129},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1214, col: 5, offset: 34129},
									expr: &litMatcher{
										pos:        position{line: 1214, col: 5, offset: 34129},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1214, col: 10, offset: 34134},
									expr: &charClassMatcher{
										pos:        position{line: 1214, col: 10, offset: 34134},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 17, offset: 34141},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1214, col: 21, offset: 34145},
									expr: &charClassMatcher{
										pos:        position{line: 1214, col: 21, offset: 34145},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1214, col: 28, offset: 34152},
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 28, offset: 34152},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 5, offset: 34211},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1217, col: 5, offset: 34211},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1217, col: 5, offset: 34211},
									expr: &litMatcher{
										pos:        position{line: 1217, col: 5, offset: 34211},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 10, offset: 34216},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1217, col: 14, offset: 34220},
									expr: &charClassMatcher{
										pos:        position{line: 1217, col: 14, offset: 34220},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1217, col: 21, offset: 34227},
									expr: &ruleRefExpr{
										pos:  position{line: 1217, col: 21, offset: 34227},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1221, col: 1, offset: 34283},
			expr: &seqExpr{
				pos: position{line: 1221, col: 16, offset: 34298},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1221, col: 16, offset: 34298},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1221, col: 21, offset: 34303},
						expr: &charClassMatcher{
							pos:        position{line: 1221, col: 21, offset: 34303},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 27, offset: 34309},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1223, col: 1, offset: 34321},
			expr: &actionExpr{
				pos: position{line: 1223, col: 7, offset: 34327},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1223, col: 7, offset: 34327},
					expr: &ruleRefExpr{
						pos:  position{line: 1223, col: 7, offset: 34327},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1225, col: 1, offset: 34369},
			expr: &charClassMatcher{
				pos:        position{line: 1225, col: 12, offset: 34380},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1228, col: 1, offset: 34394},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 34411},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 34411},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 34411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1229, col: 5, offset: 34411},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 9, offset: 34415},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1229, col: 11, offset: 34417},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 11, offset: 34417},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 29, offset: 34435},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 34472},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1230, col: 5, offset: 34472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 5, offset: 34472},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1230, col: 9, offset: 34476},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1230, col: 11, offset: 34478},
										expr: &ruleRefExpr{
											pos:  position{line: 1230, col: 11, offset: 34478},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 29, offset: 34496},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1232, col: 1, offset: 34530},
			expr: &choiceExpr{
				pos: position{line: 1233, col: 5, offset: 34551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1233, col: 5, offset: 34551},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1233, col: 5, offset: 34551},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1233, col: 5, offset: 34551},
									expr: &choiceExpr{
										pos: position{line: 1233, col: 7, offset: 34553},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1233, col: 7, offset: 34553},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1233, col: 13, offset: 34559},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1233, col: 26, offset: 34572,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 5, offset: 34609},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1234, col: 5, offset: 34609},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1234, col: 5, offset: 34609},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 10, offset: 34614},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 12, offset: 34616},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1236, col: 1, offset: 34650},
			expr: &actionExpr{
				pos: position{line: 1237, col: 5, offset: 34662},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 5, offset: 34662},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1237, col: 5, offset: 34662},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 10, offset: 34667},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 23, offset: 34680},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1237, col: 28, offset: 34685},
								expr: &ruleRefExpr{
									pos:  position{line: 1237, col: 28, offset: 34685},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1239, col: 1, offset: 34747},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 34764},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1240, col: 5, offset: 34764},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 5, offset: 34781},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1243, col: 1, offset: 34793},
			expr: &actionExpr{
				pos: position{line: 1243, col: 16, offset: 34808},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1243, col: 16, offset: 34808},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1245, col: 1, offset: 34857},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 5, offset: 34873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 5, offset: 34873},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1247, col: 5, offset: 34890},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1249, col: 1, offset: 34897},
			expr: &actionExpr{
				pos: position{line: 1249, col: 14, offset: 34910},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1249, col: 14, offset: 34910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1249, col: 14, offset: 34910},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 19, offset: 34915},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1249, col: 22, offset: 34918},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1249, col: 22, offset: 34918},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 38, offset: 34934},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1251, col: 1, offset: 34970},
			expr: &actionExpr{
				pos: position{line: 1252, col: 5, offset: 34979},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 5, offset: 34979},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1252, col: 5, offset: 34979},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 6, offset: 34980},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1252, col: 22, offset: 34996},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 23, offset: 34997},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 35, offset: 35009},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 40, offset: 35014},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 50, offset: 35024},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1252, col: 55, offset: 35029},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 55, offset: 35029},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1256, col: 1, offset: 35113},
			expr: &seqExpr{
				pos: position{line: 1256, col: 19, offset: 35131},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1256, col: 19, offset: 35131},
						expr: &litMatcher{
							pos:        position{line: 1256, col: 19, offset: 35131},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 24, offset: 35136},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1257, col: 1, offset: 35149},
			expr: &seqExpr{
				pos: position{line: 1257, col: 15, offset: 35163},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1257, col: 15, offset: 35163},
						expr: &ruleRefExpr{
							pos:  position{line: 1257, col: 15, offset: 35163},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1257, col: 28, offset: 35176},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1259, col: 1, offset: 35181},
			expr: &choiceExpr{
				pos: position{line: 1260, col: 5, offset: 35195},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1260, col: 5, offset: 35195},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 5, offset: 35212},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1262, col: 5, offset: 35224},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1262, col: 5, offset: 35224},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1264, col: 1, offset: 35248},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 35261},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 5, offset: 35261},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1266, col: 5, offset: 35275},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1268, col: 1, offset: 35282},
			expr: &actionExpr{
				pos: position{line: 1268, col: 11, offset: 35292},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 11, offset: 35292},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1268, col: 11, offset: 35292},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 16, offset: 35297},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1268, col: 19, offset: 35300},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1268, col: 19, offset: 35300},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1268, col: 32, offset: 35313},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1270, col: 1, offset: 35349},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 35364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1271, col: 5, offset: 35364},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1271, col: 5, offset: 35364},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 35392},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1272, col: 5, offset: 35392},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1273, col: 5, offset: 35422},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1276, col: 1, offset: 35429},
			expr: &choiceExpr{
				pos: position{line: 1277, col: 5, offset: 35450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1277, col: 5, offset: 35450},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1277, col: 5, offset: 35450},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1277, col: 5, offset: 35450},
									expr: &choiceExpr{
										pos: position{line: 1277, col: 7, offset: 35452},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1277, col: 7, offset: 35452},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1277, col: 13, offset: 35458},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1277, col: 26, offset: 35471,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 35508},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1278, col: 5, offset: 35508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1278, col: 5, offset: 35508},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 10, offset: 35513},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1278, col: 12, offset: 35515},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1280, col: 1, offset: 35549},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 35568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 35568},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1281, col: 5, offset: 35568},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1281, col: 5, offset: 35568},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1281, col: 9, offset: 35572},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1281, col: 18, offset: 35581},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 5, offset: 35632},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 5, offset: 35653},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1285, col: 1, offset: 35668},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 5, offset: 35689},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 35689},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1287, col: 5, offset: 35697},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 35706},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 35715},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1289, col: 5, offset: 35715},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 35744},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1290, col: 5, offset: 35744},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35773},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1291, col: 5, offset: 35773},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 35802},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1292, col: 5, offset: 35802},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 5, offset: 35831},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1293, col: 5, offset: 35831},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 35860},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1294, col: 5, offset: 35860},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1296, col: 1, offset: 35886},
			expr: &choiceExpr{
				pos: position{line: 1297, col: 5, offset: 35904},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 35904},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1297, col: 5, offset: 35904},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 35932},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1298, col: 5, offset: 35932},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1299, col: 5, offset: 35960},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1301, col: 1, offset: 35966},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 5, offset: 35984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35984},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 35984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1302, col: 5, offset: 35984},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 9, offset: 35988},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1302, col: 16, offset: 35995},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1302, col: 16, offset: 35995},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1302, col: 25, offset: 36004},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1302, col: 34, offset: 36013},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1302, col: 43, offset: 36022},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36085},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36085},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 5, offset: 36085},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1305, col: 9, offset: 36089},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 13, offset: 36093},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1305, col: 20, offset: 36100},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1305, col: 20, offset: 36100},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1305, col: 29, offset: 36109},
												expr: &ruleRefExpr{
													pos:  position{line: 1305, col: 29, offset: 36109},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1305, col: 39, offset: 36119},
												expr: &ruleRefExpr{
													pos:  position{line: 1305, col: 39, offset: 36119},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1305, col: 49, offset: 36129},
												expr: &ruleRefExpr{
													pos:  position{line: 1305, col: 49, offset: 36129},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1305, col: 59, offset: 36139},
												expr: &ruleRefExpr{
													pos:  position{line: 1305, col: 59, offset: 36139},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1305, col: 69, offset: 36149},
												expr: &ruleRefExpr{
													pos:  position{line: 1305, col: 69, offset: 36149},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 80, offset: 36160},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1309, col: 1, offset: 36214},
			expr: &actionExpr{
				pos: position{line: 1310, col: 5, offset: 36225},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 5, offset: 36225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1310, col: 5, offset: 36225},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 9, offset: 36229},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 14, offset: 36234},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1310, col: 25, offset: 36245},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1310, col: 29, offset: 36249},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 30, offset: 36250},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1312, col: 1, offset: 36285},
			expr: &actionExpr{
				pos: position{line: 1313, col: 5, offset: 36300},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1313, col: 5, offset: 36300},
					expr: &choiceExpr{
						pos: position{line: 1313, col: 6, offset: 36301},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1313, col: 6, offset: 36301},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1313, col: 13, offset: 36308},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1315, col: 1, offset: 36348},
			expr: &charClassMatcher{
				pos:        position{line: 1316, col: 5, offset: 36364},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1318, col: 1, offset: 36379},
			expr: &oneOrMoreExpr{
				pos: position{line: 1318, col: 6, offset: 36384},
				expr: &ruleRefExpr{
					pos:  position{line: 1318, col: 6, offset: 36384},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1320, col: 1, offset: 36395},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1320, col: 6, offset: 36400},
				expr: &ruleRefExpr{
					pos:  position{line: 1320, col: 6, offset: 36400},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1322, col: 1, offset: 36411},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 5, offset: 36424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1323, col: 5, offset: 36424},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 5, offset: 36439},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 5, offset: 36458},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1327, col: 1, offset: 36467},
			expr: &anyMatcher{
				line: 1328, col: 5, offset: 36487,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1330, col: 1, offset: 36490},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 5, offset: 36518},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1331, col: 5, offset: 36518},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1332, col: 5, offset: 36527},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1333, col: 5, offset: 36536},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1334, col: 5, offset: 36545},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1335, col: 5, offset: 36553},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1336, col: 5, offset: 36566},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1338, col: 1, offset: 36576},
			expr: &charClassMatcher{
				pos:        position{line: 1339, col: 5, offset: 36595},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1345, col: 1, offset: 36925},
			expr: &ruleRefExpr{
				pos:  position{line: 1348, col: 5, offset: 36996},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1350, col: 1, offset: 37015},
			expr: &seqExpr{
				pos: position{line: 1351, col: 5, offset: 37036},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1351, col: 5, offset: 37036},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1351, col: 10, offset: 37041},
						expr: &seqExpr{
							pos: position{line: 1351, col: 11, offset: 37042},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1351, col: 11, offset: 37042},
									expr: &litMatcher{
										pos:        position{line: 1351, col: 12, offset: 37043},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1351, col: 17, offset: 37048},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1351, col: 35, offset: 37066},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1353, col: 1, offset: 37072},
			expr: &seqExpr{
				pos: position{line: 1354, col: 5, offset: 37094},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1354, col: 5, offset: 37094},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1354, col: 10, offset: 37099},
						expr: &seqExpr{
							pos: position{line: 1354, col: 11, offset: 37100},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1354, col: 11, offset: 37100},
									expr: &ruleRefExpr{
										pos:  position{line: 1354, col: 12, offset: 37101},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1354, col: 27, offset: 37116},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1356, col: 1, offset: 37135},
			expr: &seqExpr{
				pos: position{line: 1356, col: 7, offset: 37141},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1356, col: 7, offset: 37141},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 7, offset: 37141},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 19, offset: 37153},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1358, col: 1, offset: 37169},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 7, offset: 37175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 7, offset: 37175},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 37179},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1360, col: 1, offset: 37184},
			expr: &notExpr{
				pos: position{line: 1360, col: 7, offset: 37190},
				expr: &anyMatcher{
					line: 1360, col: 8, offset: 37191,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation25(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["match"])
}

func (c *current) onShortCut17(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut17(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut29(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut29(stack["v"])
}

func (c *current) onShortCut37(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut37(stack["search"])
}

func (c *current) onShortCut45(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut45(stack["v"])
}

func (c *current) onShortCut55() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut55()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "taste"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "Id", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType4(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType4(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Id", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
