// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 22, offset: 47},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 25, offset: 50},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "query",
			pos:  position{line: 12, col: 1, offset: 75},
			expr: &choiceExpr{
				pos: position{line: 13, col: 5, offset: 85},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 85},
						run: (*parser).callonquery2,
						expr: &labeledExpr{
							pos:   position{line: 13, col: 5, offset: 85},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 11, offset: 91},
								name: "procChain",
							},
						},
					},
					&actionExpr{
						pos: position{line: 17, col: 5, offset: 357},
						run: (*parser).callonquery5,
						expr: &seqExpr{
							pos: position{line: 17, col: 5, offset: 357},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 17, col: 5, offset: 357},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 7, offset: 359},
										name: "search",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 14, offset: 366},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 17, col: 17, offset: 369},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 17, col: 22, offset: 374},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 22, offset: 374},
											name: "chainedProc",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 622},
						run: (*parser).callonquery13,
						expr: &labeledExpr{
							pos:   position{line: 24, col: 5, offset: 622},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 7, offset: 624},
								name: "search",
							},
						},
					},
				},
			},
		},
		{
			name: "procChain",
			pos:  position{line: 28, col: 1, offset: 732},
			expr: &actionExpr{
				pos: position{line: 29, col: 5, offset: 746},
				run: (*parser).callonprocChain1,
				expr: &seqExpr{
					pos: position{line: 29, col: 5, offset: 746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 29, col: 5, offset: 746},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 11, offset: 752},
								name: "proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 29, col: 16, offset: 757},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 29, col: 21, offset: 762},
								expr: &ruleRefExpr{
									pos:  position{line: 29, col: 21, offset: 762},
									name: "chainedProc",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainedProc",
			pos:  position{line: 37, col: 1, offset: 948},
			expr: &actionExpr{
				pos: position{line: 37, col: 15, offset: 962},
				run: (*parser).callonchainedProc1,
				expr: &seqExpr{
					pos: position{line: 37, col: 15, offset: 962},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 37, col: 15, offset: 962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 37, col: 18, offset: 965},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 37, col: 22, offset: 969},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 37, col: 25, offset: 972},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 27, offset: 974},
								name: "proc",
							},
						},
					},
				},
			},
		},
		{
			name: "search",
			pos:  position{line: 39, col: 1, offset: 998},
			expr: &actionExpr{
				pos: position{line: 40, col: 5, offset: 1009},
				run: (*parser).callonsearch1,
				expr: &labeledExpr{
					pos:   position{line: 40, col: 5, offset: 1009},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 40, col: 10, offset: 1014},
						name: "searchExpr",
					},
				},
			},
		},
		{
			name: "searchExpr",
			pos:  position{line: 44, col: 1, offset: 1111},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1126},
				run: (*parser).callonsearchExpr1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 45, col: 5, offset: 1126},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 11, offset: 1132},
								name: "searchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 45, col: 22, offset: 1143},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 45, col: 27, offset: 1148},
								expr: &ruleRefExpr{
									pos:  position{line: 45, col: 27, offset: 1148},
									name: "oredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "oredSearchTerm",
			pos:  position{line: 49, col: 1, offset: 1227},
			expr: &actionExpr{
				pos: position{line: 49, col: 18, offset: 1244},
				run: (*parser).callonoredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 49, col: 18, offset: 1244},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 49, col: 18, offset: 1244},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 20, offset: 1246},
							name: "orToken",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 28, offset: 1254},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 49, col: 30, offset: 1256},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 32, offset: 1258},
								name: "searchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "searchTerm",
			pos:  position{line: 51, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 52, col: 5, offset: 1303},
				run: (*parser).callonsearchTerm1,
				expr: &seqExpr{
					pos: position{line: 52, col: 5, offset: 1303},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 52, col: 5, offset: 1303},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 11, offset: 1309},
								name: "searchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 24, offset: 1322},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 29, offset: 1327},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 29, offset: 1327},
									name: "andedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andedSearchTerm",
			pos:  position{line: 56, col: 1, offset: 1408},
			expr: &actionExpr{
				pos: position{line: 56, col: 19, offset: 1426},
				run: (*parser).callonandedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 56, col: 19, offset: 1426},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 19, offset: 1426},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 56, col: 21, offset: 1428},
							expr: &seqExpr{
								pos: position{line: 56, col: 22, offset: 1429},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1429},
										name: "andToken",
									},
									&ruleRefExpr{
										pos:  position{line: 56, col: 31, offset: 1438},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 56, col: 35, offset: 1442},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 37, offset: 1444},
								name: "searchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "searchFactor",
			pos:  position{line: 58, col: 1, offset: 1476},
			expr: &choiceExpr{
				pos: position{line: 59, col: 5, offset: 1493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1493},
						run: (*parser).callonsearchFactor2,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1493},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 59, col: 6, offset: 1494},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 59, col: 6, offset: 1494},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 59, col: 6, offset: 1494},
													name: "notToken",
												},
												&ruleRefExpr{
													pos:  position{line: 59, col: 15, offset: 1503},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 59, col: 19, offset: 1507},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 59, col: 19, offset: 1507},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 59, col: 23, offset: 1511},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 59, col: 27, offset: 1515},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 29, offset: 1517},
										name: "searchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1612},
						run: (*parser).callonsearchFactor13,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1612},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 62, col: 5, offset: 1612},
									expr: &litMatcher{
										pos:        position{line: 62, col: 7, offset: 1614},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 62, col: 12, offset: 1619},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 14, offset: 1621},
										name: "searchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1654},
						run: (*parser).callonsearchFactor19,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 1654},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 9, offset: 1658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 63, col: 12, offset: 1661},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 17, offset: 1666},
										name: "searchExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 28, offset: 1677},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 31, offset: 1680},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchPred",
			pos:  position{line: 65, col: 1, offset: 1706},
			expr: &choiceExpr{
				pos: position{line: 66, col: 5, offset: 1721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1721},
						run: (*parser).callonsearchPred2,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 1721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 1721},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 9, offset: 1725},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 12, offset: 1728},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 17, offset: 1733},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 31, offset: 1747},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 34, offset: 1750},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 36, offset: 1752},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1889},
						run: (*parser).callonsearchPred11,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 1889},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 5, offset: 1889},
									val:        "**",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 10, offset: 1894},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 13, offset: 1897},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 18, offset: 1902},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 32, offset: 1916},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 35, offset: 1919},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 37, offset: 1921},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2057},
						run: (*parser).callonsearchPred20,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 5, offset: 2057},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 7, offset: 2059},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2064},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 15, offset: 2067},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 20, offset: 2072},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 34, offset: 2086},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 37, offset: 2089},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 39, offset: 2091},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2222},
						run: (*parser).callonsearchPred30,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2222},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2222},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 10, offset: 2227},
										name: "FunctionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 23, offset: 2240},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 26, offset: 2243},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 31, offset: 2248},
										name: "equalityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 45, offset: 2262},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 48, offset: 2265},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 50, offset: 2267},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2399},
						run: (*parser).callonsearchPred40,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2399},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 78, col: 5, offset: 2399},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 7, offset: 2401},
										name: "searchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 19, offset: 2413},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 22, offset: 2416},
									name: "inToken",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 30, offset: 2424},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 33, offset: 2427},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2556},
						run: (*parser).callonsearchPred48,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2556},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 81, col: 5, offset: 2556},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 7, offset: 2558},
										name: "searchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 19, offset: 2570},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 22, offset: 2573},
									name: "inToken",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 30, offset: 2581},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 33, offset: 2584},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 35, offset: 2586},
										name: "fieldExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2715},
						run: (*parser).callonsearchPred57,
						expr: &labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2715},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 7, offset: 2717},
								name: "searchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2836},
						run: (*parser).callonsearchPred60,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2836},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 87, col: 5, offset: 2836},
									expr: &seqExpr{
										pos: position{line: 87, col: 7, offset: 2838},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 87, col: 8, offset: 2839},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 87, col: 24, offset: 2855},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 87, col: 28, offset: 2859},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 30, offset: 2861},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchLiteral",
			pos:  position{line: 100, col: 1, offset: 3313},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 3331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3331},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 5, offset: 3349},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3367},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 3385},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3404},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 109, col: 5, offset: 3571},
						run: (*parser).callonsearchLiteral7,
						expr: &seqExpr{
							pos: position{line: 109, col: 5, offset: 3571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 109, col: 5, offset: 3571},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 7, offset: 3573},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 109, col: 22, offset: 3588},
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 23, offset: 3589},
										name: "searchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3623},
						run: (*parser).callonsearchLiteral13,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3623},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 111, col: 5, offset: 3623},
									expr: &seqExpr{
										pos: position{line: 111, col: 7, offset: 3625},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 111, col: 7, offset: 3625},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 111, col: 22, offset: 3640},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 111, col: 25, offset: 3643},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 27, offset: 3645},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3682},
						run: (*parser).callonsearchLiteral21,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3682},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 5, offset: 3682},
									expr: &seqExpr{
										pos: position{line: 112, col: 7, offset: 3684},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 112, col: 7, offset: 3684},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 22, offset: 3699},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 112, col: 25, offset: 3702},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 27, offset: 3704},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchValue",
			pos:  position{line: 115, col: 1, offset: 3736},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3752},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 5, offset: 3752},
						name: "searchLiteral",
					},
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3770},
						run: (*parser).callonsearchValue3,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3770},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 117, col: 5, offset: 3770},
									expr: &seqExpr{
										pos: position{line: 117, col: 7, offset: 3772},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 8, offset: 3773},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 117, col: 24, offset: 3789},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 27, offset: 3792},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 29, offset: 3794},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 121, col: 1, offset: 3902},
			expr: &actionExpr{
				pos: position{line: 122, col: 5, offset: 3920},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 122, col: 5, offset: 3920},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 122, col: 7, offset: 3922},
						name: "quotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 126, col: 1, offset: 4032},
			expr: &actionExpr{
				pos: position{line: 127, col: 5, offset: 4050},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 127, col: 5, offset: 4050},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 127, col: 7, offset: 4052},
						name: "reString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 131, col: 1, offset: 4158},
			expr: &choiceExpr{
				pos: position{line: 132, col: 5, offset: 4176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 132, col: 5, offset: 4176},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 132, col: 5, offset: 4176},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 132, col: 5, offset: 4176},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 132, col: 7, offset: 4178},
										name: "ip6subnet",
									},
								},
								&notExpr{
									pos: position{line: 132, col: 17, offset: 4188},
									expr: &ruleRefExpr{
										pos:  position{line: 132, col: 18, offset: 4189},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 4301},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 135, col: 5, offset: 4301},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 7, offset: 4303},
								name: "subnet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 139, col: 1, offset: 4404},
			expr: &choiceExpr{
				pos: position{line: 140, col: 5, offset: 4423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 140, col: 5, offset: 4423},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 140, col: 5, offset: 4423},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 140, col: 5, offset: 4423},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 7, offset: 4425},
										name: "ip6addr",
									},
								},
								&notExpr{
									pos: position{line: 140, col: 15, offset: 4433},
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 16, offset: 4434},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4545},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 143, col: 5, offset: 4545},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 7, offset: 4547},
								name: "addr",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 147, col: 1, offset: 4645},
			expr: &actionExpr{
				pos: position{line: 148, col: 5, offset: 4662},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 5, offset: 4662},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 148, col: 7, offset: 4664},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 152, col: 1, offset: 4770},
			expr: &actionExpr{
				pos: position{line: 153, col: 5, offset: 4789},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 153, col: 5, offset: 4789},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 153, col: 7, offset: 4791},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 157, col: 1, offset: 4896},
			expr: &choiceExpr{
				pos: position{line: 158, col: 5, offset: 4915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 4915},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 158, col: 5, offset: 4915},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5025},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 159, col: 5, offset: 5025},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 161, col: 1, offset: 5133},
			expr: &actionExpr{
				pos: position{line: 162, col: 5, offset: 5149},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 162, col: 5, offset: 5149},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "searchKeywords",
			pos:  position{line: 164, col: 1, offset: 5239},
			expr: &choiceExpr{
				pos: position{line: 165, col: 5, offset: 5258},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 165, col: 5, offset: 5258},
						name: "andToken",
					},
					&ruleRefExpr{
						pos:  position{line: 166, col: 5, offset: 5271},
						name: "orToken",
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 5, offset: 5283},
						name: "inToken",
					},
				},
			},
		},
		{
			name: "procList",
			pos:  position{line: 169, col: 1, offset: 5292},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 5305},
				run: (*parser).callonprocList1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 5305},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 170, col: 5, offset: 5305},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 11, offset: 5311},
								name: "procChain",
							},
						},
						&labeledExpr{
							pos:   position{line: 170, col: 21, offset: 5321},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 170, col: 26, offset: 5326},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 26, offset: 5326},
									name: "parallelChain",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parallelChain",
			pos:  position{line: 179, col: 1, offset: 5626},
			expr: &actionExpr{
				pos: position{line: 180, col: 5, offset: 5644},
				run: (*parser).callonparallelChain1,
				expr: &seqExpr{
					pos: position{line: 180, col: 5, offset: 5644},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 180, col: 5, offset: 5644},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 180, col: 8, offset: 5647},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 12, offset: 5651},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 15, offset: 5654},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 18, offset: 5657},
								name: "procChain",
							},
						},
					},
				},
			},
		},
		{
			name: "proc",
			pos:  position{line: 182, col: 1, offset: 5744},
			expr: &choiceExpr{
				pos: position{line: 183, col: 5, offset: 5753},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 183, col: 5, offset: 5753},
						name: "simpleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5768},
						name: "groupByProc",
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5784},
						run: (*parser).callonproc4,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 185, col: 5, offset: 5784},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 185, col: 9, offset: 5788},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 185, col: 12, offset: 5791},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 17, offset: 5796},
										name: "procList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 185, col: 26, offset: 5805},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 185, col: 29, offset: 5808},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKeys",
			pos:  position{line: 189, col: 1, offset: 5844},
			expr: &actionExpr{
				pos: position{line: 190, col: 5, offset: 5860},
				run: (*parser).callongroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 190, col: 5, offset: 5860},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 190, col: 5, offset: 5860},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 11, offset: 5866},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 13, offset: 5868},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 21, offset: 5876},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 195, col: 1, offset: 6156},
			expr: &choiceExpr{
				pos: position{line: 196, col: 5, offset: 6175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6175},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 6190},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6190},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 10, offset: 6195},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 199, col: 1, offset: 6279},
			expr: &actionExpr{
				pos: position{line: 200, col: 5, offset: 6299},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 200, col: 5, offset: 6299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 200, col: 5, offset: 6299},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 11, offset: 6305},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 200, col: 26, offset: 6320},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 200, col: 31, offset: 6325},
								expr: &actionExpr{
									pos: position{line: 200, col: 32, offset: 6326},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 200, col: 32, offset: 6326},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 200, col: 32, offset: 6326},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 200, col: 35, offset: 6329},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 200, col: 39, offset: 6333},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 200, col: 42, offset: 6336},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 200, col: 47, offset: 6341},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "everyDur",
			pos:  position{line: 204, col: 1, offset: 6461},
			expr: &actionExpr{
				pos: position{line: 205, col: 5, offset: 6474},
				run: (*parser).calloneveryDur1,
				expr: &seqExpr{
					pos: position{line: 205, col: 5, offset: 6474},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 5, offset: 6474},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 14, offset: 6483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 16, offset: 6485},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 20, offset: 6489},
								name: "duration",
							},
						},
					},
				},
			},
		},
		{
			name: "equalityToken",
			pos:  position{line: 207, col: 1, offset: 6519},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 6537},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6537},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 24, offset: 6556},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "andToken",
			pos:  position{line: 210, col: 1, offset: 6574},
			expr: &actionExpr{
				pos: position{line: 210, col: 12, offset: 6585},
				run: (*parser).callonandToken1,
				expr: &litMatcher{
					pos:        position{line: 210, col: 12, offset: 6585},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "orToken",
			pos:  position{line: 211, col: 1, offset: 6623},
			expr: &actionExpr{
				pos: position{line: 211, col: 11, offset: 6633},
				run: (*parser).callonorToken1,
				expr: &litMatcher{
					pos:        position{line: 211, col: 11, offset: 6633},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "inToken",
			pos:  position{line: 212, col: 1, offset: 6670},
			expr: &actionExpr{
				pos: position{line: 212, col: 11, offset: 6680},
				run: (*parser).calloninToken1,
				expr: &litMatcher{
					pos:        position{line: 212, col: 11, offset: 6680},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "notToken",
			pos:  position{line: 213, col: 1, offset: 6717},
			expr: &actionExpr{
				pos: position{line: 213, col: 12, offset: 6728},
				run: (*parser).callonnotToken1,
				expr: &litMatcher{
					pos:        position{line: 213, col: 12, offset: 6728},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 215, col: 1, offset: 6767},
			expr: &actionExpr{
				pos: position{line: 215, col: 18, offset: 6784},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 215, col: 18, offset: 6784},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 215, col: 18, offset: 6784},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 215, col: 34, offset: 6800},
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 34, offset: 6800},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 217, col: 1, offset: 6848},
			expr: &charClassMatcher{
				pos:        position{line: 217, col: 19, offset: 6866},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 218, col: 1, offset: 6877},
			expr: &choiceExpr{
				pos: position{line: 218, col: 18, offset: 6894},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 18, offset: 6894},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 218, col: 36, offset: 6912},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 220, col: 1, offset: 6919},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6934},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6934},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 221, col: 5, offset: 6934},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 221, col: 21, offset: 6950},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 21, offset: 6950},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "RootField",
			pos:  position{line: 223, col: 1, offset: 7050},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 7064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 7064},
						run: (*parser).callonRootField2,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 7064},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 224, col: 5, offset: 7064},
									expr: &litMatcher{
										pos:        position{line: 224, col: 5, offset: 7064},
										val:        ".",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 224, col: 10, offset: 7069},
									expr: &choiceExpr{
										pos: position{line: 224, col: 12, offset: 7071},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 224, col: 12, offset: 7071},
												name: "BooleanLiteral",
											},
											&ruleRefExpr{
												pos:  position{line: 224, col: 29, offset: 7088},
												name: "NullLiteral",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 42, offset: 7101},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 48, offset: 7107},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7260},
						run: (*parser).callonRootField12,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7260},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7260},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 225, col: 9, offset: 7264},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 11, offset: 7266},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 227, col: 1, offset: 7339},
			expr: &ruleRefExpr{
				pos:  position{line: 227, col: 8, offset: 7346},
				name: "DerefExpression",
			},
		},
		{
			name: "DerefExpression",
			pos:  position{line: 229, col: 1, offset: 7363},
			expr: &actionExpr{
				pos: position{line: 230, col: 5, offset: 7383},
				run: (*parser).callonDerefExpression1,
				expr: &seqExpr{
					pos: position{line: 230, col: 5, offset: 7383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 5, offset: 7383},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 11, offset: 7389},
								name: "RootField",
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 21, offset: 7399},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 230, col: 26, offset: 7404},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 27, offset: 7405},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 234, col: 1, offset: 7470},
			expr: &choiceExpr{
				pos: position{line: 235, col: 5, offset: 7480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 235, col: 5, offset: 7480},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 235, col: 5, offset: 7480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 235, col: 5, offset: 7480},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 235, col: 9, offset: 7484},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 235, col: 14, offset: 7489},
										name: "Expression",
									},
								},
								&litMatcher{
									pos:        position{line: 235, col: 25, offset: 7500},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 5, offset: 7549},
						run: (*parser).callonDeref8,
						expr: &seqExpr{
							pos: position{line: 236, col: 5, offset: 7549},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 236, col: 5, offset: 7549},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 236, col: 9, offset: 7553},
									expr: &litMatcher{
										pos:        position{line: 236, col: 11, offset: 7555},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 236, col: 16, offset: 7560},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 236, col: 19, offset: 7563},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionExpr",
			pos:  position{line: 243, col: 1, offset: 7875},
			expr: &actionExpr{
				pos: position{line: 244, col: 7, offset: 7894},
				run: (*parser).callonFunctionExpr1,
				expr: &seqExpr{
					pos: position{line: 244, col: 7, offset: 7894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 244, col: 7, offset: 7894},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 10, offset: 7897},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 23, offset: 7910},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 244, col: 26, offset: 7913},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 30, offset: 7917},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 35, offset: 7922},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 48, offset: 7935},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldExpr",
			pos:  position{line: 248, col: 1, offset: 8047},
			expr: &ruleRefExpr{
				pos:  position{line: 248, col: 13, offset: 8059},
				name: "Lval",
			},
		},
		{
			name: "fieldExprList",
			pos:  position{line: 250, col: 1, offset: 8065},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 8083},
				run: (*parser).callonfieldExprList1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 8083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8083},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 11, offset: 8089},
								name: "fieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 21, offset: 8099},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 26, offset: 8104},
								expr: &seqExpr{
									pos: position{line: 251, col: 27, offset: 8105},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 251, col: 27, offset: 8105},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 251, col: 30, offset: 8108},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 34, offset: 8112},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 37, offset: 8115},
											name: "fieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprList",
			pos:  position{line: 261, col: 1, offset: 8312},
			expr: &actionExpr{
				pos: position{line: 262, col: 5, offset: 8325},
				run: (*parser).callonExprList1,
				expr: &seqExpr{
					pos: position{line: 262, col: 5, offset: 8325},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 262, col: 5, offset: 8325},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 11, offset: 8331},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 262, col: 22, offset: 8342},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 262, col: 27, offset: 8347},
								expr: &seqExpr{
									pos: position{line: 262, col: 28, offset: 8348},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 262, col: 28, offset: 8348},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 262, col: 31, offset: 8351},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 262, col: 35, offset: 8355},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 262, col: 38, offset: 8358},
											name: "Expression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "countOp",
			pos:  position{line: 272, col: 1, offset: 8558},
			expr: &actionExpr{
				pos: position{line: 273, col: 5, offset: 8570},
				run: (*parser).calloncountOp1,
				expr: &litMatcher{
					pos:        position{line: 273, col: 5, offset: 8570},
					val:        "count",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ReducerOp",
			pos:  position{line: 275, col: 1, offset: 8603},
			expr: &actionExpr{
				pos: position{line: 276, col: 5, offset: 8617},
				run: (*parser).callonReducerOp1,
				expr: &ruleRefExpr{
					pos:  position{line: 276, col: 5, offset: 8617},
					name: "ReducerOps",
				},
			},
		},
		{
			name: "ReducerOps",
			pos:  position{line: 278, col: 1, offset: 8660},
			expr: &choiceExpr{
				pos: position{line: 279, col: 5, offset: 8675},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 279, col: 5, offset: 8675},
						val:        "sum",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 280, col: 5, offset: 8685},
						val:        "avg",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 281, col: 5, offset: 8695},
						val:        "stdev",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 282, col: 5, offset: 8707},
						val:        "var",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 283, col: 5, offset: 8717},
						val:        "entropy",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 284, col: 5, offset: 8731},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 285, col: 5, offset: 8741},
						val:        "max",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 286, col: 5, offset: 8751},
						val:        "first",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 287, col: 5, offset: 8763},
						val:        "last",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 288, col: 5, offset: 8774},
						val:        "countdistinct",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "groupByProc",
			pos:  position{line: 290, col: 1, offset: 8791},
			expr: &actionExpr{
				pos: position{line: 291, col: 5, offset: 8807},
				run: (*parser).callongroupByProc1,
				expr: &seqExpr{
					pos: position{line: 291, col: 5, offset: 8807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 291, col: 5, offset: 8807},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 11, offset: 8813},
								expr: &seqExpr{
									pos: position{line: 291, col: 12, offset: 8814},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 291, col: 12, offset: 8814},
											name: "everyDur",
										},
										&ruleRefExpr{
											pos:  position{line: 291, col: 21, offset: 8823},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 25, offset: 8827},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 34, offset: 8836},
								name: "reducerList",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 46, offset: 8848},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 51, offset: 8853},
								expr: &seqExpr{
									pos: position{line: 291, col: 52, offset: 8854},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 291, col: 52, offset: 8854},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 291, col: 54, offset: 8856},
											name: "groupByKeys",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 68, offset: 8870},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 74, offset: 8876},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 74, offset: 8876},
									name: "procLimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 308, col: 1, offset: 9341},
			expr: &choiceExpr{
				pos: position{line: 309, col: 5, offset: 9363},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 9363},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 9363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 309, col: 5, offset: 9363},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 10, offset: 9368},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 15, offset: 9373},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 309, col: 18, offset: 9376},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 309, col: 22, offset: 9380},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 30, offset: 9388},
										name: "reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9496},
						run: (*parser).callonReducerAssignment10,
						expr: &labeledExpr{
							pos:   position{line: 312, col: 5, offset: 9496},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 13, offset: 9504},
								name: "reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "reducer",
			pos:  position{line: 316, col: 1, offset: 9596},
			expr: &choiceExpr{
				pos: position{line: 316, col: 11, offset: 9606},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 316, col: 11, offset: 9606},
						name: "countReducer",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 26, offset: 9621},
						name: "fieldReducer",
					},
				},
			},
		},
		{
			name: "countReducer",
			pos:  position{line: 318, col: 1, offset: 9635},
			expr: &actionExpr{
				pos: position{line: 319, col: 5, offset: 9652},
				run: (*parser).calloncountReducer1,
				expr: &seqExpr{
					pos: position{line: 319, col: 5, offset: 9652},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 319, col: 5, offset: 9652},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 8, offset: 9655},
								name: "countOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 16, offset: 9663},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 319, col: 19, offset: 9666},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 23, offset: 9670},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 26, offset: 9673},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 319, col: 31, offset: 9678},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 31, offset: 9678},
									name: "fieldExpr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 43, offset: 9690},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 319, col: 46, offset: 9693},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldReducer",
			pos:  position{line: 327, col: 1, offset: 9840},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 9857},
				run: (*parser).callonfieldReducer1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 9857},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 5, offset: 9857},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 8, offset: 9860},
								name: "ReducerOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 18, offset: 9870},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 328, col: 21, offset: 9873},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 25, offset: 9877},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 28, offset: 9880},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 33, offset: 9885},
								name: "fieldExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 44, offset: 9896},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 328, col: 47, offset: 9899},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reducerList",
			pos:  position{line: 336, col: 1, offset: 10046},
			expr: &actionExpr{
				pos: position{line: 337, col: 5, offset: 10062},
				run: (*parser).callonreducerList1,
				expr: &seqExpr{
					pos: position{line: 337, col: 5, offset: 10062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 5, offset: 10062},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 10068},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 10086},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 337, col: 34, offset: 10091},
								expr: &seqExpr{
									pos: position{line: 337, col: 35, offset: 10092},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 337, col: 35, offset: 10092},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 337, col: 38, offset: 10095},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 337, col: 42, offset: 10099},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 337, col: 45, offset: 10102},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleProc",
			pos:  position{line: 345, col: 1, offset: 10307},
			expr: &choiceExpr{
				pos: position{line: 346, col: 5, offset: 10322},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 10322},
						name: "sort",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10331},
						name: "top",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10339},
						name: "cut",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10347},
						name: "head",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 5, offset: 10356},
						name: "tail",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 5, offset: 10365},
						name: "filter",
					},
					&ruleRefExpr{
						pos:  position{line: 352, col: 5, offset: 10376},
						name: "uniq",
					},
					&ruleRefExpr{
						pos:  position{line: 353, col: 5, offset: 10385},
						name: "put",
					},
					&ruleRefExpr{
						pos:  position{line: 354, col: 5, offset: 10393},
						name: "rename",
					},
					&ruleRefExpr{
						pos:  position{line: 355, col: 5, offset: 10404},
						name: "fuse",
					},
				},
			},
		},
		{
			name: "sort",
			pos:  position{line: 357, col: 1, offset: 10410},
			expr: &actionExpr{
				pos: position{line: 358, col: 5, offset: 10419},
				run: (*parser).callonsort1,
				expr: &seqExpr{
					pos: position{line: 358, col: 5, offset: 10419},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 5, offset: 10419},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 358, col: 13, offset: 10427},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 18, offset: 10432},
								name: "sortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 27, offset: 10441},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 32, offset: 10446},
								expr: &actionExpr{
									pos: position{line: 358, col: 33, offset: 10447},
									run: (*parser).callonsort8,
									expr: &seqExpr{
										pos: position{line: 358, col: 33, offset: 10447},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 358, col: 33, offset: 10447},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 358, col: 35, offset: 10449},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 358, col: 37, offset: 10451},
													name: "ExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArgs",
			pos:  position{line: 372, col: 1, offset: 10849},
			expr: &actionExpr{
				pos: position{line: 372, col: 12, offset: 10860},
				run: (*parser).callonsortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 372, col: 12, offset: 10860},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 372, col: 17, offset: 10865},
						expr: &actionExpr{
							pos: position{line: 372, col: 18, offset: 10866},
							run: (*parser).callonsortArgs4,
							expr: &seqExpr{
								pos: position{line: 372, col: 18, offset: 10866},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 372, col: 18, offset: 10866},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 372, col: 20, offset: 10868},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 372, col: 22, offset: 10870},
											name: "sortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArg",
			pos:  position{line: 376, col: 1, offset: 10930},
			expr: &choiceExpr{
				pos: position{line: 377, col: 5, offset: 10942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 377, col: 5, offset: 10942},
						run: (*parser).callonsortArg2,
						expr: &litMatcher{
							pos:        position{line: 377, col: 5, offset: 10942},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 378, col: 5, offset: 11017},
						run: (*parser).callonsortArg4,
						expr: &seqExpr{
							pos: position{line: 378, col: 5, offset: 11017},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 378, col: 5, offset: 11017},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 378, col: 14, offset: 11026},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 378, col: 16, offset: 11028},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 378, col: 23, offset: 11035},
										run: (*parser).callonsortArg9,
										expr: &choiceExpr{
											pos: position{line: 378, col: 24, offset: 11036},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 378, col: 24, offset: 11036},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 378, col: 34, offset: 11046},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "top",
			pos:  position{line: 380, col: 1, offset: 11160},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 11168},
				run: (*parser).callontop1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 11168},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 381, col: 5, offset: 11168},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 381, col: 12, offset: 11175},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 18, offset: 11181},
								expr: &actionExpr{
									pos: position{line: 381, col: 19, offset: 11182},
									run: (*parser).callontop6,
									expr: &seqExpr{
										pos: position{line: 381, col: 19, offset: 11182},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 381, col: 19, offset: 11182},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 381, col: 21, offset: 11184},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 381, col: 23, offset: 11186},
													name: "unsignedInteger",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 58, offset: 11221},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 64, offset: 11227},
								expr: &seqExpr{
									pos: position{line: 381, col: 65, offset: 11228},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 381, col: 65, offset: 11228},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 381, col: 67, offset: 11230},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 78, offset: 11241},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 85, offset: 11248},
								expr: &actionExpr{
									pos: position{line: 381, col: 86, offset: 11249},
									run: (*parser).callontop18,
									expr: &seqExpr{
										pos: position{line: 381, col: 86, offset: 11249},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 381, col: 86, offset: 11249},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 381, col: 88, offset: 11251},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 381, col: 90, offset: 11253},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "procLimitArg",
			pos:  position{line: 395, col: 1, offset: 11540},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11557},
				run: (*parser).callonprocLimitArg1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 396, col: 5, offset: 11557},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 396, col: 7, offset: 11559},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 14, offset: 11566},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 396, col: 16, offset: 11568},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 25, offset: 11577},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 27, offset: 11579},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 33, offset: 11585},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "cutArgs",
			pos:  position{line: 398, col: 1, offset: 11624},
			expr: &actionExpr{
				pos: position{line: 399, col: 5, offset: 11636},
				run: (*parser).calloncutArgs1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 5, offset: 11636},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 399, col: 10, offset: 11641},
						expr: &actionExpr{
							pos: position{line: 399, col: 11, offset: 11642},
							run: (*parser).calloncutArgs4,
							expr: &seqExpr{
								pos: position{line: 399, col: 11, offset: 11642},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 11642},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 399, col: 13, offset: 11644},
										val:        "-c",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "cut",
			pos:  position{line: 403, col: 1, offset: 11752},
			expr: &actionExpr{
				pos: position{line: 404, col: 5, offset: 11760},
				run: (*parser).calloncut1,
				expr: &seqExpr{
					pos: position{line: 404, col: 5, offset: 11760},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 5, offset: 11760},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 404, col: 12, offset: 11767},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 17, offset: 11772},
								name: "cutArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 25, offset: 11780},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 27, offset: 11782},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 35, offset: 11790},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "head",
			pos:  position{line: 414, col: 1, offset: 12046},
			expr: &choiceExpr{
				pos: position{line: 415, col: 5, offset: 12055},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12055},
						run: (*parser).callonhead2,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12055},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12055},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12063},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 415, col: 15, offset: 12065},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 21, offset: 12071},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12164},
						run: (*parser).callonhead8,
						expr: &litMatcher{
							pos:        position{line: 416, col: 5, offset: 12164},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "tail",
			pos:  position{line: 417, col: 1, offset: 12241},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 12250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12250},
						run: (*parser).callontail2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 12250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 418, col: 5, offset: 12250},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 13, offset: 12258},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 15, offset: 12260},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 21, offset: 12266},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12359},
						run: (*parser).callontail8,
						expr: &litMatcher{
							pos:        position{line: 419, col: 5, offset: 12359},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "filter",
			pos:  position{line: 421, col: 1, offset: 12437},
			expr: &actionExpr{
				pos: position{line: 422, col: 5, offset: 12448},
				run: (*parser).callonfilter1,
				expr: &seqExpr{
					pos: position{line: 422, col: 5, offset: 12448},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 422, col: 5, offset: 12448},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 422, col: 15, offset: 12458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 17, offset: 12460},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 22, offset: 12465},
								name: "searchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "uniq",
			pos:  position{line: 425, col: 1, offset: 12561},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12570},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12570},
						run: (*parser).callonuniq2,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12570},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 5, offset: 12570},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 13, offset: 12578},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 426, col: 15, offset: 12580},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 12671},
						run: (*parser).callonuniq7,
						expr: &litMatcher{
							pos:        position{line: 429, col: 5, offset: 12671},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "put",
			pos:  position{line: 433, col: 1, offset: 12763},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 12771},
				run: (*parser).callonput1,
				expr: &seqExpr{
					pos: position{line: 434, col: 5, offset: 12771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 5, offset: 12771},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 434, col: 12, offset: 12778},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 434, col: 14, offset: 12780},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 22, offset: 12788},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "rename",
			pos:  position{line: 438, col: 1, offset: 12891},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12902},
				run: (*parser).callonrename1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12902},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 5, offset: 12902},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 15, offset: 12912},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 439, col: 17, offset: 12914},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 23, offset: 12920},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 34, offset: 12931},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 439, col: 39, offset: 12936},
								expr: &actionExpr{
									pos: position{line: 439, col: 40, offset: 12937},
									run: (*parser).callonrename9,
									expr: &seqExpr{
										pos: position{line: 439, col: 40, offset: 12937},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 439, col: 40, offset: 12937},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 439, col: 43, offset: 12940},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 439, col: 47, offset: 12944},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 439, col: 50, offset: 12947},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 439, col: 53, offset: 12950},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fuse",
			pos:  position{line: 443, col: 1, offset: 13120},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 13129},
				run: (*parser).callonfuse1,
				expr: &litMatcher{
					pos:        position{line: 444, col: 5, offset: 13129},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 448, col: 1, offset: 13203},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 13218},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 13218},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 13218},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 9, offset: 13222},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 14, offset: 13227},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 449, col: 17, offset: 13230},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 21, offset: 13234},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 24, offset: 13237},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 28, offset: 13241},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 451, col: 1, offset: 13316},
			expr: &choiceExpr{
				pos: position{line: 452, col: 5, offset: 13328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 452, col: 5, offset: 13328},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 5, offset: 13346},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 5, offset: 13364},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 455, col: 5, offset: 13382},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 5, offset: 13401},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 457, col: 5, offset: 13418},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 458, col: 5, offset: 13437},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 459, col: 5, offset: 13456},
						name: "NullLiteral",
					},
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 13472},
						run: (*parser).callonPrimary10,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 13472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 5, offset: 13472},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 9, offset: 13476},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 460, col: 12, offset: 13479},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 17, offset: 13484},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 28, offset: 13495},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 460, col: 31, offset: 13498},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 468, col: 1, offset: 13700},
			expr: &ruleRefExpr{
				pos:  position{line: 468, col: 14, offset: 13713},
				name: "ConditionalExpression",
			},
		},
		{
			name: "ConditionalExpression",
			pos:  position{line: 470, col: 1, offset: 13736},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13762},
						run: (*parser).callonConditionalExpression2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13762},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 471, col: 5, offset: 13762},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 15, offset: 13772},
										name: "LogicalORExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 35, offset: 13792},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 471, col: 38, offset: 13795},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 42, offset: 13799},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 471, col: 45, offset: 13802},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 56, offset: 13813},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 67, offset: 13824},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 471, col: 70, offset: 13827},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 74, offset: 13831},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 471, col: 77, offset: 13834},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 88, offset: 13845},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 5, offset: 13994},
						name: "LogicalORExpression",
					},
				},
			},
		},
		{
			name: "LogicalORExpression",
			pos:  position{line: 476, col: 1, offset: 14015},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14039},
				run: (*parser).callonLogicalORExpression1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14039},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14039},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 14045},
								name: "LogicalANDExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 478, col: 5, offset: 14070},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 478, col: 10, offset: 14075},
								expr: &actionExpr{
									pos: position{line: 478, col: 11, offset: 14076},
									run: (*parser).callonLogicalORExpression7,
									expr: &seqExpr{
										pos: position{line: 478, col: 11, offset: 14076},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 478, col: 11, offset: 14076},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 478, col: 14, offset: 14079},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 17, offset: 14082},
													name: "orToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 478, col: 25, offset: 14090},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 478, col: 28, offset: 14093},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 33, offset: 14098},
													name: "LogicalANDExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpression",
			pos:  position{line: 482, col: 1, offset: 14222},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14247},
				run: (*parser).callonLogicalANDExpression1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 483, col: 5, offset: 14247},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 14253},
								name: "EqualityCompareExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 14283},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 484, col: 10, offset: 14288},
								expr: &actionExpr{
									pos: position{line: 484, col: 11, offset: 14289},
									run: (*parser).callonLogicalANDExpression7,
									expr: &seqExpr{
										pos: position{line: 484, col: 11, offset: 14289},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 484, col: 11, offset: 14289},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 484, col: 14, offset: 14292},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 484, col: 17, offset: 14295},
													name: "andToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 484, col: 26, offset: 14304},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 484, col: 29, offset: 14307},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 484, col: 34, offset: 14312},
													name: "EqualityCompareExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpression",
			pos:  position{line: 488, col: 1, offset: 14441},
			expr: &actionExpr{
				pos: position{line: 489, col: 5, offset: 14471},
				run: (*parser).callonEqualityCompareExpression1,
				expr: &seqExpr{
					pos: position{line: 489, col: 5, offset: 14471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 14471},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 11, offset: 14477},
								name: "RelativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 14500},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 490, col: 10, offset: 14505},
								expr: &actionExpr{
									pos: position{line: 490, col: 11, offset: 14506},
									run: (*parser).callonEqualityCompareExpression7,
									expr: &seqExpr{
										pos: position{line: 490, col: 11, offset: 14506},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 490, col: 11, offset: 14506},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 490, col: 14, offset: 14509},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 19, offset: 14514},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 490, col: 38, offset: 14533},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 490, col: 41, offset: 14536},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 46, offset: 14541},
													name: "RelativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 494, col: 1, offset: 14665},
			expr: &actionExpr{
				pos: position{line: 494, col: 20, offset: 14684},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 494, col: 21, offset: 14685},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 21, offset: 14685},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 28, offset: 14692},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 35, offset: 14699},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 41, offset: 14705},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 496, col: 1, offset: 14743},
			expr: &choiceExpr{
				pos: position{line: 497, col: 5, offset: 14766},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 497, col: 5, offset: 14766},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 14787},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 498, col: 5, offset: 14787},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpression",
			pos:  position{line: 500, col: 1, offset: 14824},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14847},
				run: (*parser).callonRelativeExpression1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 501, col: 5, offset: 14847},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 14853},
								name: "AdditiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 5, offset: 14876},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 502, col: 10, offset: 14881},
								expr: &actionExpr{
									pos: position{line: 502, col: 11, offset: 14882},
									run: (*parser).callonRelativeExpression7,
									expr: &seqExpr{
										pos: position{line: 502, col: 11, offset: 14882},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 502, col: 11, offset: 14882},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 502, col: 14, offset: 14885},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 502, col: 17, offset: 14888},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 502, col: 34, offset: 14905},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 502, col: 37, offset: 14908},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 502, col: 42, offset: 14913},
													name: "AdditiveExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 506, col: 1, offset: 15035},
			expr: &actionExpr{
				pos: position{line: 506, col: 20, offset: 15054},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 506, col: 21, offset: 15055},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 506, col: 21, offset: 15055},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 28, offset: 15062},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 34, offset: 15068},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 506, col: 41, offset: 15075},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpression",
			pos:  position{line: 508, col: 1, offset: 15112},
			expr: &actionExpr{
				pos: position{line: 509, col: 5, offset: 15135},
				run: (*parser).callonAdditiveExpression1,
				expr: &seqExpr{
					pos: position{line: 509, col: 5, offset: 15135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 509, col: 5, offset: 15135},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 15141},
								name: "MultiplicativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 5, offset: 15170},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 510, col: 10, offset: 15175},
								expr: &actionExpr{
									pos: position{line: 510, col: 11, offset: 15176},
									run: (*parser).callonAdditiveExpression7,
									expr: &seqExpr{
										pos: position{line: 510, col: 11, offset: 15176},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 510, col: 11, offset: 15176},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 510, col: 14, offset: 15179},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 510, col: 17, offset: 15182},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 510, col: 34, offset: 15199},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 510, col: 37, offset: 15202},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 510, col: 42, offset: 15207},
													name: "MultiplicativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 514, col: 1, offset: 15335},
			expr: &actionExpr{
				pos: position{line: 514, col: 20, offset: 15354},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 514, col: 21, offset: 15355},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 21, offset: 15355},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 514, col: 27, offset: 15361},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpression",
			pos:  position{line: 516, col: 1, offset: 15398},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15427},
				run: (*parser).callonMultiplicativeExpression1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15427},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 517, col: 5, offset: 15427},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 11, offset: 15433},
								name: "NotExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 518, col: 5, offset: 15451},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 518, col: 10, offset: 15456},
								expr: &actionExpr{
									pos: position{line: 518, col: 11, offset: 15457},
									run: (*parser).callonMultiplicativeExpression7,
									expr: &seqExpr{
										pos: position{line: 518, col: 11, offset: 15457},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 518, col: 11, offset: 15457},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 518, col: 14, offset: 15460},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 518, col: 17, offset: 15463},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 518, col: 40, offset: 15486},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 518, col: 43, offset: 15489},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 518, col: 48, offset: 15494},
													name: "NotExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 522, col: 1, offset: 15611},
			expr: &actionExpr{
				pos: position{line: 522, col: 26, offset: 15636},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 522, col: 27, offset: 15637},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 27, offset: 15637},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 522, col: 33, offset: 15643},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 524, col: 1, offset: 15680},
			expr: &choiceExpr{
				pos: position{line: 525, col: 5, offset: 15698},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 525, col: 5, offset: 15698},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 525, col: 5, offset: 15698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 525, col: 5, offset: 15698},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 9, offset: 15702},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 525, col: 12, offset: 15705},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 14, offset: 15707},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 528, col: 5, offset: 15826},
						name: "CastExpression",
					},
				},
			},
		},
		{
			name: "CastExpression",
			pos:  position{line: 530, col: 1, offset: 15842},
			expr: &choiceExpr{
				pos: position{line: 531, col: 5, offset: 15861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 15861},
						run: (*parser).callonCastExpression2,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 15861},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 531, col: 5, offset: 15861},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 7, offset: 15863},
										name: "FuncExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 531, col: 22, offset: 15878},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 531, col: 28, offset: 15884},
										run: (*parser).callonCastExpression7,
										expr: &seqExpr{
											pos: position{line: 531, col: 28, offset: 15884},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 531, col: 28, offset: 15884},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 531, col: 32, offset: 15888},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 531, col: 36, offset: 15892},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 5, offset: 16018},
						name: "FuncExpression",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 537, col: 1, offset: 16035},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 16053},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 538, col: 9, offset: 16057},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 9, offset: 16057},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 538, col: 19, offset: 16067},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 538, col: 29, offset: 16077},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 538, col: 40, offset: 16088},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 538, col: 51, offset: 16099},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 9, offset: 16116},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 18, offset: 16125},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 28, offset: 16135},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 38, offset: 16145},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 9, offset: 16161},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 22, offset: 16174},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 541, col: 9, offset: 16189},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 542, col: 9, offset: 16207},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 542, col: 18, offset: 16216},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 542, col: 28, offset: 16226},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 542, col: 39, offset: 16237},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 543, col: 9, offset: 16255},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 543, col: 16, offset: 16262},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 544, col: 9, offset: 16276},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 544, col: 18, offset: 16285},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 544, col: 28, offset: 16295},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpression",
			pos:  position{line: 546, col: 1, offset: 16336},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16355},
						run: (*parser).callonFuncExpression2,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 547, col: 5, offset: 16355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 11, offset: 16361},
										name: "FunctionCall",
									},
								},
								&labeledExpr{
									pos:   position{line: 547, col: 24, offset: 16374},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 547, col: 29, offset: 16379},
										expr: &ruleRefExpr{
											pos:  position{line: 547, col: 30, offset: 16380},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16447},
						name: "DerefExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 16467},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 553, col: 1, offset: 16476},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16493},
				run: (*parser).callonFunctionCall1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16493},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 8, offset: 16496},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 21, offset: 16509},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 24, offset: 16512},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 554, col: 28, offset: 16516},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 33, offset: 16521},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 554, col: 46, offset: 16534},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionName",
			pos:  position{line: 558, col: 1, offset: 16642},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16659},
				run: (*parser).callonFunctionName1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16659},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 559, col: 5, offset: 16659},
							name: "FunctionNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 23, offset: 16677},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 23, offset: 16677},
								name: "FunctionNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionNameStart",
			pos:  position{line: 561, col: 1, offset: 16727},
			expr: &charClassMatcher{
				pos:        position{line: 561, col: 21, offset: 16747},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FunctionNameRest",
			pos:  position{line: 562, col: 1, offset: 16756},
			expr: &choiceExpr{
				pos: position{line: 562, col: 20, offset: 16775},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 562, col: 20, offset: 16775},
						name: "FunctionNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 562, col: 40, offset: 16795},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 564, col: 1, offset: 16803},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16820},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 565, col: 5, offset: 16820},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 565, col: 5, offset: 16820},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 565, col: 11, offset: 16826},
										name: "Expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 565, col: 22, offset: 16837},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 565, col: 27, offset: 16842},
										expr: &actionExpr{
											pos: position{line: 565, col: 28, offset: 16843},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 565, col: 28, offset: 16843},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 565, col: 28, offset: 16843},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 565, col: 31, offset: 16846},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 565, col: 35, offset: 16850},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 565, col: 38, offset: 16853},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 565, col: 40, offset: 16855},
															name: "Expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16971},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 568, col: 5, offset: 16971},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "duration",
			pos:  position{line: 570, col: 1, offset: 17007},
			expr: &choiceExpr{
				pos: position{line: 571, col: 5, offset: 17020},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 571, col: 5, offset: 17020},
						name: "seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 572, col: 5, offset: 17032},
						name: "minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 17044},
						name: "hours",
					},
					&seqExpr{
						pos: position{line: 574, col: 5, offset: 17054},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 574, col: 5, offset: 17054},
								name: "hours",
							},
							&ruleRefExpr{
								pos:  position{line: 574, col: 11, offset: 17060},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 574, col: 13, offset: 17062},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 574, col: 19, offset: 17068},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 574, col: 21, offset: 17070},
								name: "minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 575, col: 5, offset: 17082},
						name: "days",
					},
					&ruleRefExpr{
						pos:  position{line: 576, col: 5, offset: 17091},
						name: "weeks",
					},
				},
			},
		},
		{
			name: "sec_abbrev",
			pos:  position{line: 578, col: 1, offset: 17098},
			expr: &choiceExpr{
				pos: position{line: 579, col: 5, offset: 17113},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 579, col: 5, offset: 17113},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 580, col: 5, offset: 17127},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 581, col: 5, offset: 17140},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 582, col: 5, offset: 17151},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 583, col: 5, offset: 17161},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "min_abbrev",
			pos:  position{line: 585, col: 1, offset: 17166},
			expr: &choiceExpr{
				pos: position{line: 586, col: 5, offset: 17181},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 586, col: 5, offset: 17181},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 587, col: 5, offset: 17195},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 588, col: 5, offset: 17208},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 589, col: 5, offset: 17219},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 590, col: 5, offset: 17229},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "hour_abbrev",
			pos:  position{line: 592, col: 1, offset: 17234},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 17250},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 593, col: 5, offset: 17250},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 594, col: 5, offset: 17262},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 595, col: 5, offset: 17272},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 596, col: 5, offset: 17281},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 597, col: 5, offset: 17289},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "day_abbrev",
			pos:  position{line: 599, col: 1, offset: 17297},
			expr: &choiceExpr{
				pos: position{line: 599, col: 14, offset: 17310},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 599, col: 14, offset: 17310},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 599, col: 21, offset: 17317},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 599, col: 27, offset: 17323},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "week_abbrev",
			pos:  position{line: 600, col: 1, offset: 17327},
			expr: &choiceExpr{
				pos: position{line: 600, col: 15, offset: 17341},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 600, col: 15, offset: 17341},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 600, col: 23, offset: 17349},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 600, col: 30, offset: 17356},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 600, col: 36, offset: 17362},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 600, col: 41, offset: 17367},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "seconds",
			pos:  position{line: 602, col: 1, offset: 17372},
			expr: &choiceExpr{
				pos: position{line: 603, col: 5, offset: 17384},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 603, col: 5, offset: 17384},
						run: (*parser).callonseconds2,
						expr: &litMatcher{
							pos:        position{line: 603, col: 5, offset: 17384},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 604, col: 5, offset: 17470},
						run: (*parser).callonseconds4,
						expr: &seqExpr{
							pos: position{line: 604, col: 5, offset: 17470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 604, col: 5, offset: 17470},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 9, offset: 17474},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 16, offset: 17481},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 19, offset: 17484},
									name: "sec_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "minutes",
			pos:  position{line: 606, col: 1, offset: 17571},
			expr: &choiceExpr{
				pos: position{line: 607, col: 5, offset: 17583},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 607, col: 5, offset: 17583},
						run: (*parser).callonminutes2,
						expr: &litMatcher{
							pos:        position{line: 607, col: 5, offset: 17583},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 17670},
						run: (*parser).callonminutes4,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 17670},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 608, col: 5, offset: 17670},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 9, offset: 17674},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 16, offset: 17681},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 19, offset: 17684},
									name: "min_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hours",
			pos:  position{line: 610, col: 1, offset: 17780},
			expr: &choiceExpr{
				pos: position{line: 611, col: 5, offset: 17790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 611, col: 5, offset: 17790},
						run: (*parser).callonhours2,
						expr: &litMatcher{
							pos:        position{line: 611, col: 5, offset: 17790},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 17877},
						run: (*parser).callonhours4,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 17877},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 612, col: 5, offset: 17877},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 9, offset: 17881},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 612, col: 16, offset: 17888},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 612, col: 19, offset: 17891},
									name: "hour_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "days",
			pos:  position{line: 614, col: 1, offset: 17990},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 17999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 17999},
						run: (*parser).callondays2,
						expr: &litMatcher{
							pos:        position{line: 615, col: 5, offset: 17999},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 18088},
						run: (*parser).callondays4,
						expr: &seqExpr{
							pos: position{line: 616, col: 5, offset: 18088},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 616, col: 5, offset: 18088},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 9, offset: 18092},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 16, offset: 18099},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 19, offset: 18102},
									name: "day_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "weeks",
			pos:  position{line: 618, col: 1, offset: 18205},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 18215},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18215},
						run: (*parser).callonweeks2,
						expr: &litMatcher{
							pos:        position{line: 619, col: 5, offset: 18215},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 18307},
						run: (*parser).callonweeks4,
						expr: &seqExpr{
							pos: position{line: 620, col: 5, offset: 18307},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 620, col: 5, offset: 18307},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 9, offset: 18311},
										name: "number",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 620, col: 16, offset: 18318},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 620, col: 19, offset: 18321},
									name: "week_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 622, col: 1, offset: 18425},
			expr: &ruleRefExpr{
				pos:  position{line: 622, col: 10, offset: 18434},
				name: "unsignedInteger",
			},
		},
		{
			name: "addr",
			pos:  position{line: 626, col: 1, offset: 18480},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18489},
				run: (*parser).callonaddr1,
				expr: &labeledExpr{
					pos:   position{line: 627, col: 5, offset: 18489},
					label: "a",
					expr: &seqExpr{
						pos: position{line: 627, col: 8, offset: 18492},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 627, col: 8, offset: 18492},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 627, col: 24, offset: 18508},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 28, offset: 18512},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 627, col: 44, offset: 18528},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 48, offset: 18532},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 627, col: 64, offset: 18548},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 68, offset: 18552},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6addr",
			pos:  position{line: 631, col: 1, offset: 18732},
			expr: &choiceExpr{
				pos: position{line: 632, col: 5, offset: 18744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 18744},
						run: (*parser).callonip6addr2,
						expr: &seqExpr{
							pos: position{line: 632, col: 5, offset: 18744},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 632, col: 5, offset: 18744},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 632, col: 7, offset: 18746},
										expr: &ruleRefExpr{
											pos:  position{line: 632, col: 8, offset: 18747},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 632, col: 20, offset: 18759},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 632, col: 22, offset: 18761},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 18825},
						run: (*parser).callonip6addr9,
						expr: &seqExpr{
							pos: position{line: 635, col: 5, offset: 18825},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 635, col: 5, offset: 18825},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 7, offset: 18827},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 635, col: 11, offset: 18831},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 635, col: 13, offset: 18833},
										expr: &ruleRefExpr{
											pos:  position{line: 635, col: 14, offset: 18834},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 635, col: 25, offset: 18845},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 635, col: 30, offset: 18850},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 635, col: 32, offset: 18852},
										expr: &ruleRefExpr{
											pos:  position{line: 635, col: 33, offset: 18853},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 635, col: 45, offset: 18865},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 47, offset: 18867},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 5, offset: 18966},
						run: (*parser).callonip6addr22,
						expr: &seqExpr{
							pos: position{line: 638, col: 5, offset: 18966},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 638, col: 5, offset: 18966},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 638, col: 10, offset: 18971},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 638, col: 12, offset: 18973},
										expr: &ruleRefExpr{
											pos:  position{line: 638, col: 13, offset: 18974},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 638, col: 25, offset: 18986},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 638, col: 27, offset: 18988},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 19059},
						run: (*parser).callonip6addr30,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 19059},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 641, col: 5, offset: 19059},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 7, offset: 19061},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 641, col: 11, offset: 19065},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 641, col: 13, offset: 19067},
										expr: &ruleRefExpr{
											pos:  position{line: 641, col: 14, offset: 19068},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 641, col: 25, offset: 19079},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 19147},
						run: (*parser).callonip6addr38,
						expr: &litMatcher{
							pos:        position{line: 644, col: 5, offset: 19147},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ip6tail",
			pos:  position{line: 648, col: 1, offset: 19184},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 19196},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 649, col: 5, offset: 19196},
						name: "addr",
					},
					&ruleRefExpr{
						pos:  position{line: 650, col: 5, offset: 19205},
						name: "h16",
					},
				},
			},
		},
		{
			name: "h_append",
			pos:  position{line: 652, col: 1, offset: 19210},
			expr: &actionExpr{
				pos: position{line: 652, col: 12, offset: 19221},
				run: (*parser).callonh_append1,
				expr: &seqExpr{
					pos: position{line: 652, col: 12, offset: 19221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 652, col: 12, offset: 19221},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 652, col: 16, offset: 19225},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 18, offset: 19227},
								name: "h16",
							},
						},
					},
				},
			},
		},
		{
			name: "h_prepend",
			pos:  position{line: 653, col: 1, offset: 19264},
			expr: &actionExpr{
				pos: position{line: 653, col: 13, offset: 19276},
				run: (*parser).callonh_prepend1,
				expr: &seqExpr{
					pos: position{line: 653, col: 13, offset: 19276},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 13, offset: 19276},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 15, offset: 19278},
								name: "h16",
							},
						},
						&litMatcher{
							pos:        position{line: 653, col: 19, offset: 19282},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "subnet",
			pos:  position{line: 655, col: 1, offset: 19320},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19331},
				run: (*parser).callonsubnet1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19331},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 7, offset: 19333},
								name: "addr",
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 12, offset: 19338},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 656, col: 16, offset: 19342},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 18, offset: 19344},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6subnet",
			pos:  position{line: 660, col: 1, offset: 19428},
			expr: &actionExpr{
				pos: position{line: 661, col: 5, offset: 19442},
				run: (*parser).callonip6subnet1,
				expr: &seqExpr{
					pos: position{line: 661, col: 5, offset: 19442},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19442},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 7, offset: 19444},
								name: "ip6addr",
							},
						},
						&litMatcher{
							pos:        position{line: 661, col: 15, offset: 19452},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 661, col: 19, offset: 19456},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 21, offset: 19458},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "unsignedInteger",
			pos:  position{line: 665, col: 1, offset: 19532},
			expr: &actionExpr{
				pos: position{line: 666, col: 5, offset: 19552},
				run: (*parser).callonunsignedInteger1,
				expr: &labeledExpr{
					pos:   position{line: 666, col: 5, offset: 19552},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 666, col: 7, offset: 19554},
						name: "suint",
					},
				},
			},
		},
		{
			name: "suint",
			pos:  position{line: 668, col: 1, offset: 19589},
			expr: &actionExpr{
				pos: position{line: 669, col: 5, offset: 19599},
				run: (*parser).callonsuint1,
				expr: &oneOrMoreExpr{
					pos: position{line: 669, col: 5, offset: 19599},
					expr: &charClassMatcher{
						pos:        position{line: 669, col: 5, offset: 19599},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "integer",
			pos:  position{line: 671, col: 1, offset: 19638},
			expr: &actionExpr{
				pos: position{line: 672, col: 5, offset: 19650},
				run: (*parser).calloninteger1,
				expr: &labeledExpr{
					pos:   position{line: 672, col: 5, offset: 19650},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 672, col: 7, offset: 19652},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "sinteger",
			pos:  position{line: 674, col: 1, offset: 19690},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19703},
				run: (*parser).callonsinteger1,
				expr: &seqExpr{
					pos: position{line: 675, col: 5, offset: 19703},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 675, col: 5, offset: 19703},
							expr: &charClassMatcher{
								pos:        position{line: 675, col: 5, offset: 19703},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 11, offset: 19709},
							name: "suint",
						},
					},
				},
			},
		},
		{
			name: "double",
			pos:  position{line: 677, col: 1, offset: 19747},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 19758},
				run: (*parser).callondouble1,
				expr: &labeledExpr{
					pos:   position{line: 678, col: 5, offset: 19758},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 678, col: 7, offset: 19760},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "sdouble",
			pos:  position{line: 682, col: 1, offset: 19807},
			expr: &choiceExpr{
				pos: position{line: 683, col: 5, offset: 19819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19819},
						run: (*parser).callonsdouble2,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 19819},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 683, col: 5, offset: 19819},
									expr: &litMatcher{
										pos:        position{line: 683, col: 5, offset: 19819},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 683, col: 10, offset: 19824},
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 10, offset: 19824},
										name: "doubleInteger",
									},
								},
								&litMatcher{
									pos:        position{line: 683, col: 25, offset: 19839},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 683, col: 29, offset: 19843},
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 29, offset: 19843},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 683, col: 42, offset: 19856},
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 42, offset: 19856},
										name: "exponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 19915},
						run: (*parser).callonsdouble13,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 19915},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 686, col: 5, offset: 19915},
									expr: &litMatcher{
										pos:        position{line: 686, col: 5, offset: 19915},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 686, col: 10, offset: 19920},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 686, col: 14, offset: 19924},
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 14, offset: 19924},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 686, col: 27, offset: 19937},
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 27, offset: 19937},
										name: "exponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleInteger",
			pos:  position{line: 690, col: 1, offset: 19993},
			expr: &choiceExpr{
				pos: position{line: 691, col: 5, offset: 20011},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 691, col: 5, offset: 20011},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 692, col: 5, offset: 20019},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 692, col: 5, offset: 20019},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 692, col: 11, offset: 20025},
								expr: &charClassMatcher{
									pos:        position{line: 692, col: 11, offset: 20025},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleDigit",
			pos:  position{line: 694, col: 1, offset: 20033},
			expr: &charClassMatcher{
				pos:        position{line: 694, col: 15, offset: 20047},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "exponentPart",
			pos:  position{line: 696, col: 1, offset: 20054},
			expr: &seqExpr{
				pos: position{line: 696, col: 16, offset: 20069},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 696, col: 16, offset: 20069},
						val:        "e",
						ignoreCase: true,
					},
					&ruleRefExpr{
						pos:  position{line: 696, col: 21, offset: 20074},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "h16",
			pos:  position{line: 698, col: 1, offset: 20084},
			expr: &actionExpr{
				pos: position{line: 698, col: 7, offset: 20090},
				run: (*parser).callonh161,
				expr: &labeledExpr{
					pos:   position{line: 698, col: 7, offset: 20090},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 698, col: 13, offset: 20096},
						expr: &ruleRefExpr{
							pos:  position{line: 698, col: 13, offset: 20096},
							name: "hexdigit",
						},
					},
				},
			},
		},
		{
			name: "hexdigit",
			pos:  position{line: 700, col: 1, offset: 20138},
			expr: &charClassMatcher{
				pos:        position{line: 700, col: 12, offset: 20149},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "searchWord",
			pos:  position{line: 702, col: 1, offset: 20162},
			expr: &actionExpr{
				pos: position{line: 703, col: 5, offset: 20177},
				run: (*parser).callonsearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 703, col: 5, offset: 20177},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 703, col: 11, offset: 20183},
						expr: &ruleRefExpr{
							pos:  position{line: 703, col: 11, offset: 20183},
							name: "searchWordPart",
						},
					},
				},
			},
		},
		{
			name: "searchWordPart",
			pos:  position{line: 705, col: 1, offset: 20233},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20252},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20252},
						run: (*parser).callonsearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20252},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20252},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 706, col: 10, offset: 20257},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 706, col: 13, offset: 20260},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 706, col: 13, offset: 20260},
												name: "escapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 706, col: 30, offset: 20277},
												name: "searchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20314},
						run: (*parser).callonsearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20314},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 707, col: 5, offset: 20314},
									expr: &choiceExpr{
										pos: position{line: 707, col: 7, offset: 20316},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 707, col: 7, offset: 20316},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;:]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';', ':'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 707, col: 43, offset: 20352},
												name: "ws",
											},
										},
									},
								},
								&anyMatcher{
									line: 707, col: 47, offset: 20356,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "quotedString",
			pos:  position{line: 709, col: 1, offset: 20390},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 20407},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 20407},
						run: (*parser).callonquotedString2,
						expr: &seqExpr{
							pos: position{line: 710, col: 5, offset: 20407},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 710, col: 5, offset: 20407},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 710, col: 9, offset: 20411},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 710, col: 11, offset: 20413},
										expr: &ruleRefExpr{
											pos:  position{line: 710, col: 11, offset: 20413},
											name: "doubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 710, col: 29, offset: 20431},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20468},
						run: (*parser).callonquotedString9,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20468},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 711, col: 5, offset: 20468},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 711, col: 9, offset: 20472},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 711, col: 11, offset: 20474},
										expr: &ruleRefExpr{
											pos:  position{line: 711, col: 11, offset: 20474},
											name: "singleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 711, col: 29, offset: 20492},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleQuotedChar",
			pos:  position{line: 713, col: 1, offset: 20526},
			expr: &choiceExpr{
				pos: position{line: 714, col: 5, offset: 20547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 20547},
						run: (*parser).callondoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 714, col: 5, offset: 20547},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 714, col: 5, offset: 20547},
									expr: &choiceExpr{
										pos: position{line: 714, col: 7, offset: 20549},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 714, col: 7, offset: 20549},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 714, col: 13, offset: 20555},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 714, col: 26, offset: 20568,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20605},
						run: (*parser).callondoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20605},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 715, col: 5, offset: 20605},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 715, col: 10, offset: 20610},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 12, offset: 20612},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleQuotedChar",
			pos:  position{line: 717, col: 1, offset: 20646},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 20667},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 20667},
						run: (*parser).callonsingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 20667},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 718, col: 5, offset: 20667},
									expr: &choiceExpr{
										pos: position{line: 718, col: 7, offset: 20669},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 718, col: 7, offset: 20669},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 718, col: 13, offset: 20675},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 718, col: 26, offset: 20688,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 20725},
						run: (*parser).callonsingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 20725},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 719, col: 5, offset: 20725},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 719, col: 10, offset: 20730},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 719, col: 12, offset: 20732},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "escapeSequence",
			pos:  position{line: 721, col: 1, offset: 20766},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 20785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 20785},
						run: (*parser).callonescapeSequence2,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 20785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 722, col: 5, offset: 20785},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 9, offset: 20789},
									name: "hexdigit",
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 18, offset: 20798},
									name: "hexdigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 20849},
						name: "singleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 20870},
						name: "unicodeEscape",
					},
				},
			},
		},
		{
			name: "singleCharEscape",
			pos:  position{line: 726, col: 1, offset: 20885},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 20906},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 727, col: 5, offset: 20906},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 728, col: 5, offset: 20914},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 729, col: 5, offset: 20922},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 20931},
						run: (*parser).callonsingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 730, col: 5, offset: 20931},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 20960},
						run: (*parser).callonsingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 731, col: 5, offset: 20960},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 20989},
						run: (*parser).callonsingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 732, col: 5, offset: 20989},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21018},
						run: (*parser).callonsingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 733, col: 5, offset: 21018},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 21047},
						run: (*parser).callonsingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 734, col: 5, offset: 21047},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 21076},
						run: (*parser).callonsingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 735, col: 5, offset: 21076},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "searchEscape",
			pos:  position{line: 737, col: 1, offset: 21102},
			expr: &choiceExpr{
				pos: position{line: 738, col: 5, offset: 21119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21119},
						run: (*parser).callonsearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 738, col: 5, offset: 21119},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21147},
						run: (*parser).callonsearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 739, col: 5, offset: 21147},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "unicodeEscape",
			pos:  position{line: 741, col: 1, offset: 21174},
			expr: &choiceExpr{
				pos: position{line: 742, col: 5, offset: 21192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21192},
						run: (*parser).callonunicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 21192},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 742, col: 9, offset: 21196},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 742, col: 16, offset: 21203},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 742, col: 16, offset: 21203},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 742, col: 25, offset: 21212},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 742, col: 34, offset: 21221},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 742, col: 43, offset: 21230},
												name: "hexdigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21293},
						run: (*parser).callonunicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 745, col: 5, offset: 21293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 745, col: 5, offset: 21293},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 745, col: 9, offset: 21297},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 745, col: 13, offset: 21301},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 745, col: 20, offset: 21308},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 745, col: 20, offset: 21308},
												name: "hexdigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 745, col: 29, offset: 21317},
												expr: &ruleRefExpr{
													pos:  position{line: 745, col: 29, offset: 21317},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 745, col: 39, offset: 21327},
												expr: &ruleRefExpr{
													pos:  position{line: 745, col: 39, offset: 21327},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 745, col: 49, offset: 21337},
												expr: &ruleRefExpr{
													pos:  position{line: 745, col: 49, offset: 21337},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 745, col: 59, offset: 21347},
												expr: &ruleRefExpr{
													pos:  position{line: 745, col: 59, offset: 21347},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 745, col: 69, offset: 21357},
												expr: &ruleRefExpr{
													pos:  position{line: 745, col: 69, offset: 21357},
													name: "hexdigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 745, col: 80, offset: 21368},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reString",
			pos:  position{line: 749, col: 1, offset: 21422},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 21435},
				run: (*parser).callonreString1,
				expr: &seqExpr{
					pos: position{line: 750, col: 5, offset: 21435},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 750, col: 5, offset: 21435},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 750, col: 9, offset: 21439},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 11, offset: 21441},
								name: "reBody",
							},
						},
						&litMatcher{
							pos:        position{line: 750, col: 18, offset: 21448},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reBody",
			pos:  position{line: 752, col: 1, offset: 21471},
			expr: &actionExpr{
				pos: position{line: 753, col: 5, offset: 21482},
				run: (*parser).callonreBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 753, col: 5, offset: 21482},
					expr: &choiceExpr{
						pos: position{line: 753, col: 6, offset: 21483},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 753, col: 6, offset: 21483},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 753, col: 13, offset: 21490},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "escapedChar",
			pos:  position{line: 755, col: 1, offset: 21530},
			expr: &charClassMatcher{
				pos:        position{line: 756, col: 5, offset: 21546},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "ws",
			pos:  position{line: 758, col: 1, offset: 21561},
			expr: &choiceExpr{
				pos: position{line: 759, col: 5, offset: 21568},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 759, col: 5, offset: 21568},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 760, col: 5, offset: 21577},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 5, offset: 21586},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 762, col: 5, offset: 21595},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 5, offset: 21603},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 764, col: 5, offset: 21616},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 766, col: 1, offset: 21626},
			expr: &oneOrMoreExpr{
				pos: position{line: 766, col: 18, offset: 21643},
				expr: &ruleRefExpr{
					pos:  position{line: 766, col: 18, offset: 21643},
					name: "ws",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 767, col: 1, offset: 21647},
			expr: &zeroOrMoreExpr{
				pos: position{line: 767, col: 6, offset: 21652},
				expr: &ruleRefExpr{
					pos:  position{line: 767, col: 6, offset: 21652},
					name: "ws",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 769, col: 1, offset: 21657},
			expr: &notExpr{
				pos: position{line: 769, col: 7, offset: 21663},
				expr: &anyMatcher{
					line: 769, col: 8, offset: 21664,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onquery2(procs interface{}) (interface{}, error) {
	var filt = map[string]interface{}{"op": "FilterProc", "filter": map[string]interface{}{"op": "MatchAll"}}
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{filt}, (procs.([]interface{}))...)}, nil

}

func (p *parser) callonquery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery2(stack["procs"])
}

func (c *current) onquery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{s}, (rest.([]interface{}))...)}, nil
	}

}

func (p *parser) callonquery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery5(stack["s"], stack["rest"])
}

func (c *current) onquery13(s interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{s}}, nil

}

func (p *parser) callonquery13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery13(stack["s"])
}

func (c *current) onprocChain1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonprocChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocChain1(stack["first"], stack["rest"])
}

func (c *current) onchainedProc1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonchainedProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainedProc1(stack["p"])
}

func (c *current) onsearch1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonsearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearch1(stack["expr"])
}

func (c *current) onsearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalOr"), nil

}

func (p *parser) callonsearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onoredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonoredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoredSearchTerm1(stack["t"])
}

func (c *current) onsearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalAnd"), nil

}

func (p *parser) callonsearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onandedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonandedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandedSearchTerm1(stack["f"])
}

func (c *current) onsearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "LogicalNot", "expr": e}, nil

}

func (p *parser) callonsearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor2(stack["e"])
}

func (c *current) onsearchFactor13(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor13(stack["s"])
}

func (c *current) onsearchFactor19(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonsearchFactor19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor19(stack["expr"])
}

func (c *current) onsearchPred2(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred2(stack["comp"], stack["v"])
}

func (c *current) onsearchPred11(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": true, "value": v}, nil

}

func (p *parser) callonsearchPred11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred11(stack["comp"], stack["v"])
}

func (c *current) onsearchPred20(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": comp, "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred20(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred30(expr, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpression", "operator": comp, "lhs": expr, "rhs": v}, nil

}

func (p *parser) callonsearchPred30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred30(stack["expr"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred40(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": "in", "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred40(stack["v"])
}

func (c *current) onsearchPred48(v, f interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": "in", "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred48(stack["v"], stack["f"])
}

func (c *current) onsearchPred57(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonsearchPred57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred57(stack["v"])
}

func (c *current) onsearchPred60(v interface{}) (interface{}, error) {
	var str = v.(string)
	if str == "*" {
		return map[string]interface{}{"op": "MatchAll"}, nil
	}
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": literal}, nil

}

func (p *parser) callonsearchPred60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred60(stack["v"])
}

func (c *current) onsearchLiteral7(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonsearchLiteral7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral7(stack["i"])
}

func (c *current) onsearchLiteral13(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral13(stack["v"])
}

func (c *current) onsearchLiteral21(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral21(stack["v"])
}

func (c *current) onsearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonsearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchValue3(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null"}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onprocList1(first, rest interface{}) (interface{}, error) {
	var fp = map[string]interface{}{"op": "SequentialProc", "procs": first}
	if rest != nil {
		return map[string]interface{}{"op": "ParallelProc", "procs": append([]interface{}{fp}, (rest.([]interface{}))...)}, nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonprocList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocList1(stack["first"], stack["rest"])
}

func (c *current) onparallelChain1(ch interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": ch}, nil
}

func (p *parser) callonparallelChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparallelChain1(stack["ch"])
}

func (c *current) onproc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonproc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onproc4(stack["proc"])
}

func (c *current) ongroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callongroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys1(stack["columns"])
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) oneveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) calloneveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneveryDur1(stack["dur"])
}

func (c *current) onandToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonandToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandToken1()
}

func (c *current) onorToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonorToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onorToken1()
}

func (c *current) oninToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) calloninToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninToken1()
}

func (c *current) onnotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonnotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotToken1()
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": string(c.text)}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onRootField2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".", "lhs": map[string]interface{}{"op": "RootRecord"}, "rhs": field}, nil
}

func (p *parser) callonRootField2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField2(stack["field"])
}

func (c *current) onRootField12() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonRootField12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField12()
}

func (c *current) onDerefExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpression1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["expr"])
}

func (c *current) onDeref8(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref8(stack["id"])
}

func (c *current) onFunctionExpr1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunctionExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionExpr1(stack["fn"], stack["args"])
}

func (c *current) onfieldExprList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonfieldExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExprList1(stack["first"], stack["rest"])
}

func (c *current) onExprList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprList1(stack["first"], stack["rest"])
}

func (c *current) oncountOp1() (interface{}, error) {
	return "count", nil
}

func (p *parser) calloncountOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountOp1()
}

func (c *current) onReducerOp1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReducerOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerOp1()
}

func (c *current) ongroupByProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	if OR(keys, every) != nil {
		if keys != nil {
			keys = keys.([]interface{})[1]
		} else {
			keys = []interface{}{}
		}

		if every != nil {
			every = every.([]interface{})[0]
		}

		return map[string]interface{}{"op": "GroupByProc", "duration": every, "limit": limit, "keys": keys, "reducers": reducers}, nil
	}
	return map[string]interface{}{"op": "GroupByProc", "reducers": reducers}, nil

}

func (p *parser) callongroupByProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment10(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment10(stack["reducer"])
}

func (c *current) oncountReducer1(op, expr interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) calloncountReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountReducer1(stack["op"], stack["expr"])
}

func (c *current) onfieldReducer1(op, expr interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonfieldReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducer1(stack["op"], stack["expr"])
}

func (c *current) onreducerList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonreducerList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerList1(stack["first"], stack["rest"])
}

func (c *current) onsort8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonsort8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort8(stack["l"])
}

func (c *current) onsort1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonsort1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort1(stack["args"], stack["list"])
}

func (c *current) onsortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonsortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs4(stack["a"])
}

func (c *current) onsortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonsortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs1(stack["args"])
}

func (c *current) onsortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonsortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg2()
}

func (c *current) onsortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg9()
}

func (c *current) onsortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonsortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg4(stack["where"])
}

func (c *current) ontop6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callontop6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop6(stack["n"])
}

func (c *current) ontop18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callontop18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop18(stack["f"])
}

func (c *current) ontop1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc"}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callontop1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onprocLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonprocLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocLimitArg1(stack["limit"])
}

func (c *current) oncutArgs4() (interface{}, error) {
	return map[string]interface{}{"name": "c", "value": nil}, nil
}

func (p *parser) calloncutArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs4()
}

func (c *current) oncutArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)

}

func (p *parser) calloncutArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs1(stack["args"])
}

func (c *current) oncut1(args, columns interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "CutProc", "fields": columns, "complement": false}
	if _, ok := argm["c"]; ok {
		proc["complement"] = true
	}
	return proc, nil

}

func (p *parser) calloncut1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut1(stack["args"], stack["columns"])
}

func (c *current) onhead2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonhead2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead2(stack["count"])
}

func (c *current) onhead8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonhead8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead8()
}

func (c *current) ontail2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callontail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail2(stack["count"])
}

func (c *current) ontail8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callontail8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail8()
}

func (c *current) onfilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonfilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilter1(stack["expr"])
}

func (c *current) onuniq2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonuniq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq2()
}

func (c *current) onuniq7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonuniq7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq7()
}

func (c *current) onput1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput1(stack["columns"])
}

func (c *current) onrename9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonrename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename9(stack["cl"])
}

func (c *current) onrename1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonrename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename1(stack["first"], stack["rest"])
}

func (c *current) onfuse1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonfuse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuse1()
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onPrimary10(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["expr"])
}

func (c *current) onConditionalExpression2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpression2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalORExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalORExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalANDExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalANDExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpression7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpression2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["e"])
}

func (c *current) onCastExpression7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonCastExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression7(stack["typ"])
}

func (c *current) onCastExpression2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpression2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpression2(stack["first"], stack["rest"])
}

func (c *current) onFunctionCall1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunctionCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionCall1(stack["fn"], stack["args"])
}

func (c *current) onFunctionName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFunctionName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onseconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonseconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds2()
}

func (c *current) onseconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonseconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds4(stack["num"])
}

func (c *current) onminutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonminutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes2()
}

func (c *current) onminutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonminutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes4(stack["num"])
}

func (c *current) onhours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonhours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours2()
}

func (c *current) onhours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonhours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours4(stack["num"])
}

func (c *current) ondays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callondays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays2()
}

func (c *current) ondays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callondays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays4(stack["num"])
}

func (c *current) onweeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks2()
}

func (c *current) onweeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks4(stack["num"])
}

func (c *current) onaddr1(a interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonaddr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onaddr1(stack["a"])
}

func (c *current) onip6addr2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr2(stack["a"], stack["b"])
}

func (c *current) onip6addr9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonip6addr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onip6addr22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr22(stack["a"], stack["b"])
}

func (c *current) onip6addr30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonip6addr30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr30(stack["a"], stack["b"])
}

func (c *current) onip6addr38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonip6addr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr38()
}

func (c *current) onh_append1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonh_append1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_append1(stack["v"])
}

func (c *current) onh_prepend1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonh_prepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_prepend1(stack["v"])
}

func (c *current) onsubnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonsubnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsubnet1(stack["a"], stack["m"])
}

func (c *current) onip6subnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonip6subnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6subnet1(stack["a"], stack["m"])
}

func (c *current) onunsignedInteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonunsignedInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunsignedInteger1(stack["s"])
}

func (c *current) onsuint1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsuint1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuint1()
}

func (c *current) oninteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) calloninteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninteger1(stack["s"])
}

func (c *current) onsinteger1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsinteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsinteger1()
}

func (c *current) ondouble1(s interface{}) (interface{}, error) {
	return parseFloat(s), nil

}

func (p *parser) callondouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondouble1(stack["s"])
}

func (c *current) onsdouble2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble2()
}

func (c *current) onsdouble13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble13()
}

func (c *current) onh161(chars interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonh161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh161(stack["chars"])
}

func (c *current) onsearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonsearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWord1(stack["chars"])
}

func (c *current) onsearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart2(stack["s"])
}

func (c *current) onsearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart9()
}

func (c *current) onquotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString2(stack["v"])
}

func (c *current) onquotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString9(stack["v"])
}

func (c *current) ondoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar2()
}

func (c *current) ondoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callondoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar9(stack["s"])
}

func (c *current) onsingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar2()
}

func (c *current) onsingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar9(stack["s"])
}

func (c *current) onescapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonescapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescapeSequence2()
}

func (c *current) onsingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonsingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape5()
}

func (c *current) onsingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonsingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape7()
}

func (c *current) onsingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonsingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape9()
}

func (c *current) onsingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonsingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape11()
}

func (c *current) onsingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonsingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape13()
}

func (c *current) onsingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonsingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape15()
}

func (c *current) onsearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonsearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape2()
}

func (c *current) onsearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonsearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape4()
}

func (c *current) onunicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape2(stack["chars"])
}

func (c *current) onunicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape11(stack["chars"])
}

func (c *current) onreString1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonreString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreString1(stack["v"])
}

func (c *current) onreBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonreBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
