// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 16, col: 1, offset: 352},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 432},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 17, col: 5, offset: 432},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 17, col: 5, offset: 432},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 17, col: 5, offset: 432},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 17, col: 12, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 12, offset: 439},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 19, offset: 446},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 17, col: 22, offset: 449},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 28, offset: 455},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 17, col: 38, offset: 465},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 17, col: 43, offset: 470},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 43, offset: 470},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 5, offset: 746},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 27, col: 1, offset: 758},
			expr: &actionExpr{
				pos: position{line: 27, col: 9, offset: 766},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 27, col: 9, offset: 766},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 27, col: 9, offset: 766},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 769},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 14, offset: 771},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 29, col: 1, offset: 799},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 812},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 812},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 13, offset: 820},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 15, offset: 822},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 18, offset: 825},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 33, offset: 840},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 36, offset: 843},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 40, offset: 847},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 43, offset: 850},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 48, offset: 855},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 55, offset: 862},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 55, offset: 862},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 55, offset: 862},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 58, offset: 865},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 64, offset: 871},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 971},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 33, col: 5, offset: 971},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 33, col: 5, offset: 971},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 12, offset: 978},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 14, offset: 980},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 17, offset: 983},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 32, offset: 998},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 35, offset: 1001},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 39, offset: 1005},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 42, offset: 1008},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 46, offset: 1012},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 33, col: 53, offset: 1019},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 33, col: 53, offset: 1019},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 33, col: 53, offset: 1019},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 33, col: 56, offset: 1022},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 33, col: 62, offset: 1028},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 37, col: 1, offset: 1123},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 1138},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1138},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 38, col: 5, offset: 1138},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 38, col: 5, offset: 1138},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 38, col: 11, offset: 1144},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 38, col: 21, offset: 1154},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 38, col: 26, offset: 1159},
										expr: &ruleRefExpr{
											pos:  position{line: 38, col: 26, offset: 1159},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1319},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 41, col: 5, offset: 1319},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 8, offset: 1322},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 45, col: 1, offset: 1434},
			expr: &actionExpr{
				pos: position{line: 45, col: 18, offset: 1451},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 45, col: 18, offset: 1451},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 18, offset: 1451},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 21, offset: 1454},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 25, offset: 1458},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 28, offset: 1461},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 30, offset: 1463},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 47, col: 1, offset: 1492},
			expr: &choiceExpr{
				pos: position{line: 48, col: 5, offset: 1505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1505},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 48, col: 5, offset: 1505},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1511},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 48, col: 22, offset: 1522},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 48, col: 27, offset: 1527},
										expr: &ruleRefExpr{
											pos:  position{line: 48, col: 27, offset: 1527},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1628},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 51, col: 5, offset: 1628},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 11, offset: 1634},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 55, col: 1, offset: 1693},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1710},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1710},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 5, offset: 1710},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 8, offset: 1713},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 13, offset: 1718},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 16, offset: 1721},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 19, offset: 1724},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 59, col: 1, offset: 1756},
			expr: &actionExpr{
				pos: position{line: 60, col: 5, offset: 1773},
				run: (*parser).callonSwitchBranch1,
				expr: &seqExpr{
					pos: position{line: 60, col: 5, offset: 1773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1773},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 12, offset: 1780},
								name: "SearchBoolean",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 26, offset: 1794},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 60, col: 29, offset: 1797},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 34, offset: 1802},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 60, col: 37, offset: 1805},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 42, offset: 1810},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 64, col: 1, offset: 1899},
			expr: &choiceExpr{
				pos: position{line: 65, col: 5, offset: 1910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1910},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1910},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 65, col: 5, offset: 1910},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1916},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 65, col: 24, offset: 1929},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 29, offset: 1934},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 29, offset: 1934},
											name: "SwitchTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2033},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 68, col: 5, offset: 2033},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2039},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchTail",
			pos:  position{line: 72, col: 1, offset: 2100},
			expr: &actionExpr{
				pos: position{line: 73, col: 5, offset: 2115},
				run: (*parser).callonSwitchTail1,
				expr: &seqExpr{
					pos: position{line: 73, col: 5, offset: 2115},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 73, col: 5, offset: 2115},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 8, offset: 2118},
							name: "CaseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 18, offset: 2128},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 73, col: 21, offset: 2131},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 24, offset: 2134},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 75, col: 1, offset: 2167},
			expr: &litMatcher{
				pos:        position{line: 75, col: 13, offset: 2179},
				val:        "case",
				ignoreCase: false,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 77, col: 1, offset: 2187},
			expr: &choiceExpr{
				pos: position{line: 78, col: 5, offset: 2201},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2201},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2201},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 13, offset: 2209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 16, offset: 2212},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 20, offset: 2216},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 23, offset: 2219},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 28, offset: 2224},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 31, offset: 2227},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 41, offset: 2237},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2246},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 53, offset: 2249},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2348},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2348},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 81, col: 5, offset: 2348},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 14, offset: 2357},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 81, col: 17, offset: 2360},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 21, offset: 2364},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 24, offset: 2367},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 34, offset: 2377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 37, offset: 2380},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 47, offset: 2390},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 54, offset: 2397},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 81, col: 57, offset: 2400},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 5, offset: 2497},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2510},
						run: (*parser).callonOperation27,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2510},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 85, col: 5, offset: 2510},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 7, offset: 2512},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 85, col: 16, offset: 2521},
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 17, offset: 2522},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2552},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2552},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 86, col: 5, offset: 2552},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 7, offset: 2554},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 86, col: 19, offset: 2566},
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 20, offset: 2567},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2598},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2598},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 87, col: 5, offset: 2598},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 10, offset: 2603},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 87, col: 24, offset: 2617},
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 25, offset: 2618},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 91, col: 1, offset: 2713},
			expr: &seqExpr{
				pos: position{line: 91, col: 11, offset: 2723},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 11, offset: 2723},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 91, col: 15, offset: 2727},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 91, col: 15, offset: 2727},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 21, offset: 2733},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 28, offset: 2740},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2746},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 93, col: 1, offset: 2752},
			expr: &seqExpr{
				pos: position{line: 93, col: 13, offset: 2764},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 93, col: 13, offset: 2764},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 93, col: 17, offset: 2768},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 93, col: 18, offset: 2769},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 93, col: 18, offset: 2769},
										expr: &litMatcher{
											pos:        position{line: 93, col: 19, offset: 2770},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 93, col: 24, offset: 2775},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 38, offset: 2789},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 57, offset: 2808},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 93, col: 82, offset: 2833},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 93, col: 88, offset: 2839},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 94, col: 1, offset: 2844},
			expr: &choiceExpr{
				pos: position{line: 94, col: 12, offset: 2855},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 94, col: 13, offset: 2856},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 13, offset: 2856},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 94, col: 16, offset: 2859},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 94, col: 16, offset: 2859},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 94, col: 26, offset: 2869},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 35, offset: 2878},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 43, offset: 2886},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 43, offset: 2886},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 94, col: 46, offset: 2889},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 96, col: 1, offset: 2895},
			expr: &actionExpr{
				pos: position{line: 97, col: 5, offset: 2913},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 97, col: 5, offset: 2913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2913},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 11, offset: 2919},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 21, offset: 2929},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 97, col: 26, offset: 2934},
								expr: &ruleRefExpr{
									pos:  position{line: 97, col: 26, offset: 2934},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 101, col: 1, offset: 3008},
			expr: &actionExpr{
				pos: position{line: 101, col: 16, offset: 3023},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 101, col: 16, offset: 3023},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 101, col: 16, offset: 3023},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 18, offset: 3025},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 26, offset: 3033},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 28, offset: 3035},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 30, offset: 3037},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 103, col: 1, offset: 3087},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3101},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3101},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3107},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3124},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 10, offset: 3129},
								expr: &actionExpr{
									pos: position{line: 105, col: 11, offset: 3130},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 105, col: 11, offset: 3130},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 105, col: 11, offset: 3130},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 105, col: 14, offset: 3133},
												expr: &seqExpr{
													pos: position{line: 105, col: 15, offset: 3134},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 105, col: 15, offset: 3134},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 105, col: 24, offset: 3143},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 28, offset: 3147},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 105, col: 31, offset: 3150},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 36, offset: 3155},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 109, col: 1, offset: 3271},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 3288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 3288},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 3288},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 110, col: 6, offset: 3289},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 110, col: 6, offset: 3289},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 110, col: 6, offset: 3289},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 110, col: 15, offset: 3298},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 110, col: 19, offset: 3302},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 110, col: 19, offset: 3302},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 110, col: 23, offset: 3306},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 110, col: 27, offset: 3310},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 29, offset: 3312},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 3428},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 114, col: 5, offset: 3441},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 3456},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 3456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 115, col: 5, offset: 3456},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 9, offset: 3460},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 12, offset: 3463},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 17, offset: 3468},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 31, offset: 3482},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 115, col: 34, offset: 3485},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 117, col: 1, offset: 3511},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 118, col: 5, offset: 3524},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 118, col: 5, offset: 3524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 5, offset: 3524},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 118, col: 9, offset: 3528},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 118, col: 12, offset: 3531},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 22, offset: 3541},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 118, col: 36, offset: 3555},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 118, col: 39, offset: 3558},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 41, offset: 3560},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4254},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 4254},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 139, col: 5, offset: 4254},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 7, offset: 4256},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 12, offset: 4261},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 15, offset: 4264},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 20, offset: 4269},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 34, offset: 4283},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 37, offset: 4286},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 39, offset: 4288},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 139, col: 57, offset: 4306},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 58, offset: 4307},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 142, col: 5, offset: 4425},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 142, col: 5, offset: 4425},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 142, col: 5, offset: 4425},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 142, col: 7, offset: 4427},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 142, col: 19, offset: 4439},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 142, col: 21, offset: 4441},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 142, col: 29, offset: 4449},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 142, col: 31, offset: 4451},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 5138},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 5138},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 163, col: 5, offset: 5138},
									expr: &seqExpr{
										pos: position{line: 163, col: 7, offset: 5140},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 163, col: 7, offset: 5140},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 163, col: 19, offset: 5152},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 24, offset: 5157},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 26, offset: 5159},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 163, col: 44, offset: 5177},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 45, offset: 5178},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5293},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 166, col: 5, offset: 5293},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 166, col: 9, offset: 5297},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 10, offset: 5298},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 170, col: 1, offset: 5408},
			expr: &choiceExpr{
				pos: position{line: 171, col: 5, offset: 5424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 5424},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 5436},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 172, col: 5, offset: 5436},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 7, offset: 5438},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 176, col: 1, offset: 5543},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 5565},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5565},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5577},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5577},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 7, offset: 5579},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 188, col: 1, offset: 5865},
			expr: &actionExpr{
				pos: position{line: 189, col: 5, offset: 5880},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 189, col: 5, offset: 5880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5880},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 189, col: 10, offset: 5885},
								expr: &ruleRefExpr{
									pos:  position{line: 189, col: 10, offset: 5885},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 20, offset: 5895},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 25, offset: 5900},
								expr: &litMatcher{
									pos:        position{line: 189, col: 26, offset: 5901},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 193, col: 1, offset: 5968},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5981},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 194, col: 5, offset: 5981},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 7, offset: 5983},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 13, offset: 5989},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 15, offset: 5991},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6041},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 197, col: 1, offset: 6050},
			expr: &actionExpr{
				pos: position{line: 197, col: 9, offset: 6058},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 197, col: 9, offset: 6058},
					expr: &litMatcher{
						pos:        position{line: 197, col: 9, offset: 6058},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 199, col: 1, offset: 6095},
			expr: &choiceExpr{
				pos: position{line: 200, col: 5, offset: 6111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6111},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6124},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6136},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6149},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6161},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6173},
						name: "CaseToken",
					},
					&litMatcher{
						pos:        position{line: 206, col: 5, offset: 6187},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 210, col: 1, offset: 6244},
			expr: &ruleRefExpr{
				pos:  position{line: 210, col: 14, offset: 6257},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 212, col: 1, offset: 6277},
			expr: &actionExpr{
				pos: position{line: 212, col: 14, offset: 6290},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 212, col: 15, offset: 6291},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 212, col: 15, offset: 6291},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 21, offset: 6297},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 28, offset: 6304},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 35, offset: 6311},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 42, offset: 6318},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 48, offset: 6324},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 212, col: 55, offset: 6331},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 214, col: 1, offset: 6368},
			expr: &actionExpr{
				pos: position{line: 215, col: 5, offset: 6391},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 215, col: 5, offset: 6391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 215, col: 5, offset: 6391},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 11, offset: 6397},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 216, col: 5, offset: 6415},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 216, col: 10, offset: 6420},
								expr: &actionExpr{
									pos: position{line: 216, col: 11, offset: 6421},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 216, col: 11, offset: 6421},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 216, col: 11, offset: 6421},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 216, col: 14, offset: 6424},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 216, col: 17, offset: 6427},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 216, col: 28, offset: 6438},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 216, col: 31, offset: 6441},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 216, col: 36, offset: 6446},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 220, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6581},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 221, col: 5, offset: 6581},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 11, offset: 6587},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 5, offset: 6605},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 222, col: 10, offset: 6610},
								expr: &actionExpr{
									pos: position{line: 222, col: 11, offset: 6611},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 222, col: 11, offset: 6611},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 222, col: 11, offset: 6611},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 222, col: 14, offset: 6614},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 222, col: 17, offset: 6617},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 222, col: 34, offset: 6634},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 222, col: 37, offset: 6637},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 222, col: 42, offset: 6642},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 226, col: 1, offset: 6759},
			expr: &actionExpr{
				pos: position{line: 227, col: 5, offset: 6777},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 227, col: 5, offset: 6777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6777},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 11, offset: 6783},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6802},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 228, col: 10, offset: 6807},
								expr: &actionExpr{
									pos: position{line: 228, col: 11, offset: 6808},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 228, col: 11, offset: 6808},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 11, offset: 6808},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 14, offset: 6811},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 17, offset: 6814},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 228, col: 40, offset: 6837},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 43, offset: 6840},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 48, offset: 6845},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 232, col: 1, offset: 6963},
			expr: &choiceExpr{
				pos: position{line: 233, col: 5, offset: 6982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 6982},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 233, col: 5, offset: 6982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 233, col: 5, offset: 6982},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 7, offset: 6984},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 233, col: 22, offset: 6999},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 233, col: 25, offset: 7002},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 233, col: 29, offset: 7006},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 233, col: 32, offset: 7009},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 36, offset: 7013},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 7117},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 238, col: 1, offset: 7133},
			expr: &choiceExpr{
				pos: position{line: 239, col: 5, offset: 7152},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7152},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7166},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 7182},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 241, col: 5, offset: 7182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 241, col: 5, offset: 7182},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 11, offset: 7188},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 241, col: 20, offset: 7197},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 241, col: 25, offset: 7202},
										expr: &ruleRefExpr{
											pos:  position{line: 241, col: 26, offset: 7203},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7275},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7289},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 249, col: 1, offset: 7324},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 7340},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 7340},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 250, col: 5, offset: 7340},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 250, col: 5, offset: 7340},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 250, col: 15, offset: 7350},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 21, offset: 7356},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 250, col: 30, offset: 7365},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 35, offset: 7370},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 250, col: 47, offset: 7382},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 53, offset: 7388},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7537},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 7537},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 253, col: 5, offset: 7537},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 253, col: 15, offset: 7547},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 21, offset: 7553},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 30, offset: 7562},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 39, offset: 7571},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 48, offset: 7580},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 253, col: 53, offset: 7585},
										expr: &seqExpr{
											pos: position{line: 253, col: 54, offset: 7586},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 253, col: 54, offset: 7586},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 253, col: 56, offset: 7588},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 70, offset: 7602},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 76, offset: 7608},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 261, col: 1, offset: 7849},
			expr: &choiceExpr{
				pos: position{line: 261, col: 13, offset: 7861},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 261, col: 13, offset: 7861},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 261, col: 13, offset: 7861},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 261, col: 25, offset: 7873},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 261, col: 29, offset: 7877},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 263, col: 1, offset: 7881},
			expr: &choiceExpr{
				pos: position{line: 264, col: 5, offset: 7894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7894},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 264, col: 5, offset: 7894},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 264, col: 14, offset: 7903},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 16, offset: 7905},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 20, offset: 7909},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 264, col: 29, offset: 7918},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7944},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 7944},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 267, col: 1, offset: 7969},
			expr: &actionExpr{
				pos: position{line: 268, col: 5, offset: 7985},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 268, col: 5, offset: 7985},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 268, col: 5, offset: 7985},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 13, offset: 7993},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 15, offset: 7995},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 23, offset: 8003},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 270, col: 1, offset: 8044},
			expr: &choiceExpr{
				pos: position{line: 271, col: 5, offset: 8057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 8057},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 271, col: 5, offset: 8057},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 271, col: 5, offset: 8057},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 271, col: 7, offset: 8059},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 271, col: 14, offset: 8066},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 271, col: 16, offset: 8068},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 271, col: 25, offset: 8077},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 271, col: 27, offset: 8079},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 33, offset: 8085},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 272, col: 5, offset: 8116},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 272, col: 5, offset: 8116},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 277, col: 1, offset: 8376},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 8395},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 8395},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 279, col: 5, offset: 8410},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 279, col: 5, offset: 8410},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 10, offset: 8415},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 281, col: 1, offset: 8505},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 8525},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 8525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 282, col: 5, offset: 8525},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 11, offset: 8531},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 26, offset: 8546},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 282, col: 31, offset: 8551},
								expr: &actionExpr{
									pos: position{line: 282, col: 32, offset: 8552},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 282, col: 32, offset: 8552},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 282, col: 32, offset: 8552},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 282, col: 35, offset: 8555},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 282, col: 39, offset: 8559},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 282, col: 42, offset: 8562},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 282, col: 47, offset: 8567},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 286, col: 1, offset: 8689},
			expr: &choiceExpr{
				pos: position{line: 287, col: 5, offset: 8711},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 287, col: 5, offset: 8711},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 287, col: 5, offset: 8711},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 287, col: 5, offset: 8711},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 287, col: 10, offset: 8716},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 287, col: 15, offset: 8721},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 287, col: 18, offset: 8724},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 287, col: 22, offset: 8728},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 287, col: 25, offset: 8731},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 287, col: 33, offset: 8739},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8849},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 290, col: 5, offset: 8849},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 13, offset: 8857},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 294, col: 1, offset: 8963},
			expr: &actionExpr{
				pos: position{line: 295, col: 5, offset: 8975},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 295, col: 5, offset: 8975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 295, col: 5, offset: 8975},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 6, offset: 8976},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 16, offset: 8986},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 19, offset: 8989},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 31, offset: 9001},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 295, col: 34, offset: 9004},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 38, offset: 9008},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 295, col: 41, offset: 9011},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 295, col: 46, offset: 9016},
								expr: &ruleRefExpr{
									pos:  position{line: 295, col: 46, offset: 9016},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 53, offset: 9023},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 295, col: 56, offset: 9026},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 295, col: 60, offset: 9030},
							expr: &seqExpr{
								pos: position{line: 295, col: 62, offset: 9032},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 295, col: 62, offset: 9032},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 295, col: 65, offset: 9035},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 70, offset: 9040},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 295, col: 76, offset: 9046},
								expr: &ruleRefExpr{
									pos:  position{line: 295, col: 76, offset: 9046},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 303, col: 1, offset: 9242},
			expr: &choiceExpr{
				pos: position{line: 304, col: 5, offset: 9258},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 304, col: 5, offset: 9258},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 305, col: 5, offset: 9277},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 9290},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 308, col: 1, offset: 9299},
			expr: &actionExpr{
				pos: position{line: 308, col: 15, offset: 9313},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 308, col: 15, offset: 9313},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 308, col: 15, offset: 9313},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 308, col: 17, offset: 9315},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 25, offset: 9323},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 27, offset: 9325},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 32, offset: 9330},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 310, col: 1, offset: 9366},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9379},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 311, col: 5, offset: 9379},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 9385},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 29, offset: 9403},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 311, col: 34, offset: 9408},
								expr: &seqExpr{
									pos: position{line: 311, col: 35, offset: 9409},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 311, col: 35, offset: 9409},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 311, col: 38, offset: 9412},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 42, offset: 9416},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 45, offset: 9419},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 319, col: 1, offset: 9624},
			expr: &choiceExpr{
				pos: position{line: 320, col: 5, offset: 9637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9637},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 9650},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 5, offset: 9662},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 5, offset: 9674},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 5, offset: 9687},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 325, col: 5, offset: 9700},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 5, offset: 9713},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 5, offset: 9726},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 5, offset: 9741},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 5, offset: 9754},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 330, col: 5, offset: 9766},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 9781},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9794},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9807},
						name: "TasteProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 335, col: 1, offset: 9818},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 9831},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 9831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 336, col: 5, offset: 9831},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 336, col: 13, offset: 9839},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 18, offset: 9844},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 336, col: 27, offset: 9853},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 336, col: 32, offset: 9858},
								expr: &actionExpr{
									pos: position{line: 336, col: 33, offset: 9859},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 336, col: 33, offset: 9859},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 336, col: 33, offset: 9859},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 336, col: 35, offset: 9861},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 336, col: 37, offset: 9863},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 350, col: 1, offset: 10282},
			expr: &actionExpr{
				pos: position{line: 350, col: 12, offset: 10293},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 350, col: 12, offset: 10293},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 350, col: 17, offset: 10298},
						expr: &actionExpr{
							pos: position{line: 350, col: 18, offset: 10299},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 350, col: 18, offset: 10299},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 350, col: 18, offset: 10299},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 350, col: 20, offset: 10301},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 22, offset: 10303},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 352, col: 1, offset: 10359},
			expr: &choiceExpr{
				pos: position{line: 353, col: 5, offset: 10371},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 10371},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 353, col: 5, offset: 10371},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 354, col: 5, offset: 10446},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 354, col: 5, offset: 10446},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 354, col: 5, offset: 10446},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 14, offset: 10455},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 354, col: 16, offset: 10457},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 354, col: 23, offset: 10464},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 354, col: 24, offset: 10465},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 354, col: 24, offset: 10465},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 354, col: 34, offset: 10475},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 356, col: 1, offset: 10589},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 10601},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 10601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 10601},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 12, offset: 10608},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 18, offset: 10614},
								expr: &actionExpr{
									pos: position{line: 357, col: 19, offset: 10615},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 357, col: 19, offset: 10615},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 357, col: 19, offset: 10615},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 357, col: 21, offset: 10617},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 357, col: 23, offset: 10619},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 47, offset: 10643},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 53, offset: 10649},
								expr: &seqExpr{
									pos: position{line: 357, col: 54, offset: 10650},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 357, col: 54, offset: 10650},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 357, col: 56, offset: 10652},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 67, offset: 10663},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 74, offset: 10670},
								expr: &actionExpr{
									pos: position{line: 357, col: 75, offset: 10671},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 357, col: 75, offset: 10671},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 357, col: 75, offset: 10671},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 357, col: 77, offset: 10673},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 357, col: 79, offset: 10675},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 371, col: 1, offset: 11026},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 11038},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 11038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 11038},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 12, offset: 11045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 14, offset: 11047},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 22, offset: 11055},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 376, col: 1, offset: 11157},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11170},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 11170},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 5, offset: 11170},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 13, offset: 11178},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 15, offset: 11180},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 23, offset: 11188},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 381, col: 1, offset: 11291},
			expr: &actionExpr{
				pos: position{line: 382, col: 5, offset: 11304},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 382, col: 5, offset: 11304},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 5, offset: 11304},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 13, offset: 11312},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 15, offset: 11314},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 23, offset: 11322},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 386, col: 1, offset: 11420},
			expr: &choiceExpr{
				pos: position{line: 387, col: 5, offset: 11433},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 387, col: 5, offset: 11433},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 387, col: 5, offset: 11433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 387, col: 5, offset: 11433},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 387, col: 13, offset: 11441},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 387, col: 15, offset: 11443},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 387, col: 21, offset: 11449},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 388, col: 5, offset: 11531},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 388, col: 5, offset: 11531},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 390, col: 1, offset: 11609},
			expr: &choiceExpr{
				pos: position{line: 391, col: 5, offset: 11622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 11622},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 391, col: 5, offset: 11622},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 391, col: 5, offset: 11622},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 13, offset: 11630},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 391, col: 15, offset: 11632},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 21, offset: 11638},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 11720},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 392, col: 5, offset: 11720},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 394, col: 1, offset: 11798},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11813},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11813},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 15, offset: 11823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 17, offset: 11825},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 20, offset: 11828},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 399, col: 1, offset: 11865},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11876},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 400, col: 5, offset: 11876},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 400, col: 10, offset: 11881},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 404, col: 1, offset: 11981},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 11994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11994},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 405, col: 5, offset: 11994},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 5, offset: 11994},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 13, offset: 12002},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 405, col: 15, offset: 12004},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 408, col: 5, offset: 12095},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 408, col: 5, offset: 12095},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 412, col: 1, offset: 12187},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12199},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12199},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 5, offset: 12199},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 12, offset: 12206},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 14, offset: 12208},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 22, offset: 12216},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 417, col: 1, offset: 12319},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 12334},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 418, col: 5, offset: 12334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 5, offset: 12334},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 418, col: 15, offset: 12344},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 418, col: 17, offset: 12346},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 23, offset: 12352},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 418, col: 34, offset: 12363},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 418, col: 39, offset: 12368},
								expr: &actionExpr{
									pos: position{line: 418, col: 40, offset: 12369},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 418, col: 40, offset: 12369},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 418, col: 40, offset: 12369},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 418, col: 43, offset: 12372},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 418, col: 47, offset: 12376},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 418, col: 50, offset: 12379},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 418, col: 53, offset: 12382},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 426, col: 1, offset: 12793},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 12806},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 12806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 12806},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 427, col: 13, offset: 12814},
							expr: &seqExpr{
								pos: position{line: 427, col: 15, offset: 12816},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 427, col: 15, offset: 12816},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 427, col: 18, offset: 12819},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 431, col: 1, offset: 12892},
			expr: &choiceExpr{
				pos: position{line: 432, col: 5, offset: 12905},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 432, col: 5, offset: 12905},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 432, col: 5, offset: 12905},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 432, col: 5, offset: 12905},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 13, offset: 12913},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 432, col: 15, offset: 12915},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 432, col: 23, offset: 12923},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 31, offset: 12931},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 432, col: 34, offset: 12934},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 38, offset: 12938},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 432, col: 41, offset: 12941},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 432, col: 50, offset: 12950},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 432, col: 58, offset: 12958},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 432, col: 66, offset: 12966},
										expr: &seqExpr{
											pos: position{line: 432, col: 67, offset: 12967},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 432, col: 67, offset: 12967},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 432, col: 69, offset: 12969},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 13227},
						run: (*parser).callonJoinProc18,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 13227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 13227},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 13, offset: 13235},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 439, col: 15, offset: 13237},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 439, col: 19, offset: 13241},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 439, col: 27, offset: 13249},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 439, col: 35, offset: 13257},
										expr: &seqExpr{
											pos: position{line: 439, col: 36, offset: 13258},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 439, col: 36, offset: 13258},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 439, col: 38, offset: 13260},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 447, col: 1, offset: 13506},
			expr: &choiceExpr{
				pos: position{line: 448, col: 5, offset: 13518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 5, offset: 13518},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13527},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13527},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 449, col: 5, offset: 13527},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 449, col: 9, offset: 13531},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 14, offset: 13536},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 19, offset: 13541},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 451, col: 1, offset: 13567},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13581},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 5, offset: 13581},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 452, col: 14, offset: 13590},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 16, offset: 13592},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 479, col: 1, offset: 14526},
			expr: &choiceExpr{
				pos: position{line: 480, col: 5, offset: 14540},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 480, col: 5, offset: 14540},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 480, col: 5, offset: 14540},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 480, col: 5, offset: 14540},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 480, col: 7, offset: 14542},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 12, offset: 14547},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 5, offset: 14576},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 481, col: 5, offset: 14576},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 483, col: 1, offset: 14638},
			expr: &ruleRefExpr{
				pos:  position{line: 483, col: 8, offset: 14645},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 485, col: 1, offset: 14656},
			expr: &ruleRefExpr{
				pos:  position{line: 485, col: 13, offset: 14668},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 487, col: 1, offset: 14674},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14689},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 14689},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 14695},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 21, offset: 14705},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 488, col: 26, offset: 14710},
								expr: &seqExpr{
									pos: position{line: 488, col: 27, offset: 14711},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 488, col: 27, offset: 14711},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 488, col: 30, offset: 14714},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 488, col: 34, offset: 14718},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 488, col: 37, offset: 14721},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 498, col: 1, offset: 14920},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14930},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 499, col: 5, offset: 14930},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 14936},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 16, offset: 14941},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 499, col: 21, offset: 14946},
								expr: &seqExpr{
									pos: position{line: 499, col: 22, offset: 14947},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 499, col: 22, offset: 14947},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 499, col: 25, offset: 14950},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 499, col: 29, offset: 14954},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 499, col: 32, offset: 14957},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 509, col: 1, offset: 15151},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 15166},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 510, col: 5, offset: 15166},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 5, offset: 15166},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 9, offset: 15170},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 510, col: 14, offset: 15175},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 510, col: 17, offset: 15178},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 510, col: 21, offset: 15182},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 24, offset: 15185},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 28, offset: 15189},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 512, col: 1, offset: 15278},
			expr: &ruleRefExpr{
				pos:  position{line: 512, col: 8, offset: 15285},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 514, col: 1, offset: 15302},
			expr: &choiceExpr{
				pos: position{line: 515, col: 5, offset: 15322},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15322},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 15322},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 515, col: 5, offset: 15322},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 15, offset: 15332},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 29, offset: 15346},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 515, col: 32, offset: 15349},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 36, offset: 15353},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 515, col: 39, offset: 15356},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 50, offset: 15367},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 55, offset: 15372},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 515, col: 58, offset: 15375},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 62, offset: 15379},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 515, col: 65, offset: 15382},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 76, offset: 15393},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 5, offset: 15540},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 520, col: 1, offset: 15555},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15573},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15573},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 521, col: 5, offset: 15573},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 11, offset: 15579},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 5, offset: 15598},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 522, col: 10, offset: 15603},
								expr: &actionExpr{
									pos: position{line: 522, col: 11, offset: 15604},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 522, col: 11, offset: 15604},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 522, col: 11, offset: 15604},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 522, col: 14, offset: 15607},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 522, col: 17, offset: 15610},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 522, col: 25, offset: 15618},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 522, col: 28, offset: 15621},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 522, col: 33, offset: 15626},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 526, col: 1, offset: 15744},
			expr: &actionExpr{
				pos: position{line: 527, col: 5, offset: 15763},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 527, col: 5, offset: 15763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 527, col: 5, offset: 15763},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 15769},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 5, offset: 15793},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 528, col: 10, offset: 15798},
								expr: &actionExpr{
									pos: position{line: 528, col: 11, offset: 15799},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 528, col: 11, offset: 15799},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 528, col: 11, offset: 15799},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 528, col: 14, offset: 15802},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 528, col: 17, offset: 15805},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 528, col: 26, offset: 15814},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 528, col: 29, offset: 15817},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 528, col: 34, offset: 15822},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 532, col: 1, offset: 15945},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15969},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15969},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 5, offset: 15969},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 15975},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 5, offset: 15992},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 534, col: 10, offset: 15997},
								expr: &actionExpr{
									pos: position{line: 534, col: 11, offset: 15998},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 534, col: 11, offset: 15998},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 534, col: 11, offset: 15998},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 534, col: 14, offset: 16001},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 534, col: 19, offset: 16006},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 534, col: 38, offset: 16025},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 534, col: 41, offset: 16028},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 534, col: 46, offset: 16033},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 538, col: 1, offset: 16151},
			expr: &actionExpr{
				pos: position{line: 539, col: 5, offset: 16172},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 539, col: 6, offset: 16173},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 6, offset: 16173},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 12, offset: 16179},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 541, col: 1, offset: 16217},
			expr: &choiceExpr{
				pos: position{line: 542, col: 5, offset: 16240},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 542, col: 5, offset: 16240},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 16261},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 543, col: 5, offset: 16261},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 545, col: 1, offset: 16298},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 16315},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 16315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 16315},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 11, offset: 16321},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 5, offset: 16338},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 547, col: 10, offset: 16343},
								expr: &actionExpr{
									pos: position{line: 547, col: 11, offset: 16344},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 547, col: 11, offset: 16344},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 547, col: 11, offset: 16344},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 547, col: 14, offset: 16347},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 547, col: 17, offset: 16350},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 547, col: 34, offset: 16367},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 547, col: 37, offset: 16370},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 547, col: 42, offset: 16375},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 551, col: 1, offset: 16491},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 16510},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 551, col: 21, offset: 16511},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 21, offset: 16511},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 551, col: 28, offset: 16518},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 551, col: 34, offset: 16524},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 551, col: 41, offset: 16531},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 553, col: 1, offset: 16568},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16585},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16585},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 16591},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16614},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 10, offset: 16619},
								expr: &actionExpr{
									pos: position{line: 555, col: 11, offset: 16620},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 555, col: 11, offset: 16620},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 555, col: 11, offset: 16620},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 14, offset: 16623},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 17, offset: 16626},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 555, col: 34, offset: 16643},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 37, offset: 16646},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 42, offset: 16651},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 559, col: 1, offset: 16773},
			expr: &actionExpr{
				pos: position{line: 559, col: 20, offset: 16792},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 559, col: 21, offset: 16793},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 21, offset: 16793},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 559, col: 27, offset: 16799},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 561, col: 1, offset: 16836},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16859},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 562, col: 5, offset: 16859},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 11, offset: 16865},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16877},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 563, col: 10, offset: 16882},
								expr: &actionExpr{
									pos: position{line: 563, col: 11, offset: 16883},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 563, col: 11, offset: 16883},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 563, col: 11, offset: 16883},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 563, col: 14, offset: 16886},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 563, col: 17, offset: 16889},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 563, col: 40, offset: 16912},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 563, col: 43, offset: 16915},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 563, col: 48, offset: 16920},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 567, col: 1, offset: 17031},
			expr: &actionExpr{
				pos: position{line: 567, col: 26, offset: 17056},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 567, col: 27, offset: 17057},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 27, offset: 17057},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 567, col: 33, offset: 17063},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 569, col: 1, offset: 17100},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 17112},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 17112},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 17112},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 570, col: 5, offset: 17112},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 9, offset: 17116},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 12, offset: 17119},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 14, offset: 17121},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 17234},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 575, col: 1, offset: 17244},
			expr: &choiceExpr{
				pos: position{line: 576, col: 5, offset: 17257},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 17257},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 576, col: 5, offset: 17257},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 576, col: 5, offset: 17257},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 7, offset: 17259},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 16, offset: 17268},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 576, col: 19, offset: 17271},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 23, offset: 17275},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 576, col: 26, offset: 17278},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 30, offset: 17282},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 17386},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 581, col: 1, offset: 17396},
			expr: &choiceExpr{
				pos: position{line: 582, col: 5, offset: 17409},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 582, col: 5, offset: 17409},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 583, col: 5, offset: 17424},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 5, offset: 17438},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17454},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 17454},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 585, col: 5, offset: 17454},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 17460},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 585, col: 20, offset: 17469},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 585, col: 25, offset: 17474},
										expr: &ruleRefExpr{
											pos:  position{line: 585, col: 26, offset: 17475},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 588, col: 5, offset: 17546},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 5, offset: 17560},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 591, col: 1, offset: 17569},
			expr: &seqExpr{
				pos: position{line: 591, col: 13, offset: 17581},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 591, col: 13, offset: 17581},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 591, col: 22, offset: 17590},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 591, col: 25, offset: 17593},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 593, col: 1, offset: 17598},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 17611},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 5, offset: 17611},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 595, col: 5, offset: 17621},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 596, col: 5, offset: 17633},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 597, col: 5, offset: 17646},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 599, col: 1, offset: 17654},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 17668},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 600, col: 5, offset: 17668},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 5, offset: 17668},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 13, offset: 17676},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 600, col: 16, offset: 17679},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 600, col: 20, offset: 17683},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 25, offset: 17688},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 39, offset: 17702},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 602, col: 1, offset: 17728},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17743},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 17743},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 17743},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 14, offset: 17752},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 603, col: 17, offset: 17755},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 21, offset: 17759},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 24, offset: 17762},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 29, offset: 17767},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 42, offset: 17780},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 603, col: 45, offset: 17783},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 603, col: 49, offset: 17787},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 603, col: 57, offset: 17795},
								expr: &actionExpr{
									pos: position{line: 603, col: 58, offset: 17796},
									run: (*parser).callonSelectExpr13,
									expr: &seqExpr{
										pos: position{line: 603, col: 58, offset: 17796},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 603, col: 58, offset: 17796},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 603, col: 61, offset: 17799},
												val:        ".",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 603, col: 65, offset: 17803},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 603, col: 68, offset: 17806},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 603, col: 70, offset: 17808},
													name: "Function",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 607, col: 1, offset: 17974},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17987},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17987},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 608, col: 5, offset: 17987},
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 6, offset: 17988},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 16, offset: 17998},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 19, offset: 18001},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 34, offset: 18016},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 608, col: 37, offset: 18019},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 41, offset: 18023},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 44, offset: 18026},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 49, offset: 18031},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 62, offset: 18044},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 608, col: 65, offset: 18047},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 612, col: 1, offset: 18153},
			expr: &choiceExpr{
				pos: position{line: 613, col: 5, offset: 18170},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 18170},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 18170},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 613, col: 5, offset: 18170},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 11, offset: 18176},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 613, col: 16, offset: 18181},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 613, col: 21, offset: 18186},
										expr: &actionExpr{
											pos: position{line: 613, col: 22, offset: 18187},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 613, col: 22, offset: 18187},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 613, col: 22, offset: 18187},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 613, col: 25, offset: 18190},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 613, col: 29, offset: 18194},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 613, col: 32, offset: 18197},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 613, col: 34, offset: 18199},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 18311},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 616, col: 5, offset: 18311},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 618, col: 1, offset: 18347},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 18361},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18361},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18361},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 18361},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 11, offset: 18367},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 619, col: 17, offset: 18373},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 22, offset: 18378},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 23, offset: 18379},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18450},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18450},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 11, offset: 18456},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 622, col: 22, offset: 18467},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 622, col: 27, offset: 18472},
										expr: &ruleRefExpr{
											pos:  position{line: 622, col: 28, offset: 18473},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18544},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 625, col: 5, offset: 18544},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 629, col: 1, offset: 18617},
			expr: &choiceExpr{
				pos: position{line: 630, col: 5, offset: 18627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 18627},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 630, col: 5, offset: 18627},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 630, col: 5, offset: 18627},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 630, col: 9, offset: 18631},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 15, offset: 18637},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18861},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 18861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 639, col: 5, offset: 18861},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 639, col: 9, offset: 18865},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 639, col: 13, offset: 18869},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 18, offset: 18874},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 639, col: 23, offset: 18879},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 649, col: 1, offset: 19092},
			expr: &choiceExpr{
				pos: position{line: 650, col: 5, offset: 19102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 19102},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 19102},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 650, col: 5, offset: 19102},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 650, col: 9, offset: 19106},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 14, offset: 19111},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 27, offset: 19124},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 650, col: 30, offset: 19127},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 34, offset: 19131},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 650, col: 37, offset: 19134},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 40, offset: 19137},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 650, col: 53, offset: 19150},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 19325},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 19325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 656, col: 5, offset: 19325},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 9, offset: 19329},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 656, col: 12, offset: 19332},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 16, offset: 19336},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 656, col: 19, offset: 19339},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 22, offset: 19342},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 656, col: 35, offset: 19355},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19562},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 662, col: 5, offset: 19562},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 662, col: 9, offset: 19566},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 14, offset: 19571},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 27, offset: 19584},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 662, col: 30, offset: 19587},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 34, offset: 19591},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 662, col: 37, offset: 19594},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19803},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 19803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 668, col: 5, offset: 19803},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 668, col: 9, offset: 19807},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 14, offset: 19812},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 668, col: 19, offset: 19817},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19866},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 19866},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 669, col: 5, offset: 19866},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 669, col: 9, offset: 19870},
									expr: &litMatcher{
										pos:        position{line: 669, col: 11, offset: 19872},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 669, col: 16, offset: 19877},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 669, col: 19, offset: 19880},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 671, col: 1, offset: 19931},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 19943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 672, col: 5, offset: 19943},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19955},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 19955},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 9, offset: 19959},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 673, col: 12, offset: 19962},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 17, offset: 19967},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 22, offset: 19972},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 673, col: 25, offset: 19975},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 675, col: 1, offset: 20001},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 20013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 20013},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 677, col: 5, offset: 20029},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 678, col: 5, offset: 20047},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 679, col: 5, offset: 20065},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 20083},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 681, col: 5, offset: 20102},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 5, offset: 20119},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 5, offset: 20138},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 684, col: 5, offset: 20157},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 686, col: 1, offset: 20170},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 20188},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 687, col: 5, offset: 20188},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 687, col: 7, offset: 20190},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 691, col: 1, offset: 20300},
			expr: &actionExpr{
				pos: position{line: 692, col: 5, offset: 20318},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 692, col: 5, offset: 20318},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 20318},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 7, offset: 20320},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 692, col: 14, offset: 20327},
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 15, offset: 20328},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 696, col: 1, offset: 20438},
			expr: &choiceExpr{
				pos: position{line: 697, col: 5, offset: 20456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20456},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20456},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 697, col: 5, offset: 20456},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 7, offset: 20458},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 697, col: 14, offset: 20465},
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 15, offset: 20466},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 20578},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 700, col: 5, offset: 20578},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 7, offset: 20580},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 704, col: 1, offset: 20681},
			expr: &choiceExpr{
				pos: position{line: 705, col: 5, offset: 20700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20700},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20700},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 705, col: 5, offset: 20700},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 7, offset: 20702},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 705, col: 11, offset: 20706},
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 12, offset: 20707},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20818},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20818},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 7, offset: 20820},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 712, col: 1, offset: 20916},
			expr: &actionExpr{
				pos: position{line: 713, col: 5, offset: 20933},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 713, col: 5, offset: 20933},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 713, col: 7, offset: 20935},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 717, col: 1, offset: 21045},
			expr: &actionExpr{
				pos: position{line: 718, col: 5, offset: 21064},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 718, col: 5, offset: 21064},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 718, col: 7, offset: 21066},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 722, col: 1, offset: 21172},
			expr: &choiceExpr{
				pos: position{line: 723, col: 5, offset: 21191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 723, col: 5, offset: 21191},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 723, col: 5, offset: 21191},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 21301},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 724, col: 5, offset: 21301},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 726, col: 1, offset: 21409},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 21425},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 727, col: 5, offset: 21425},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 729, col: 1, offset: 21528},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 21544},
				run: (*parser).callonTypeLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 730, col: 5, offset: 21544},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 730, col: 9, offset: 21548},
						name: "TypeExternal",
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 734, col: 1, offset: 21642},
			expr: &choiceExpr{
				pos: position{line: 735, col: 5, offset: 21655},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 21655},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 21672},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 738, col: 1, offset: 21687},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 21704},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21704},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21704},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 739, col: 5, offset: 21704},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 12, offset: 21711},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 739, col: 15, offset: 21714},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 19, offset: 21718},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 739, col: 22, offset: 21721},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 26, offset: 21725},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 31, offset: 21730},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 739, col: 34, offset: 21733},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21760},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 740, col: 5, offset: 21760},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 12, offset: 21767},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 15, offset: 21770},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 19, offset: 21774},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 22, offset: 21777},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 26, offset: 21781},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 36, offset: 21791},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 39, offset: 21794},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21822},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21838},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21838},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 742, col: 5, offset: 21838},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 9, offset: 21842},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 742, col: 31, offset: 21864},
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 32, offset: 21865},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 744, col: 1, offset: 21901},
			expr: &choiceExpr{
				pos: position{line: 745, col: 5, offset: 21910},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 745, col: 5, offset: 21910},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21928},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 748, col: 1, offset: 21941},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21959},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 749, col: 5, offset: 21959},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 752, col: 5, offset: 22037},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 752, col: 10, offset: 22042},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 22060},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 753, col: 5, offset: 22060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 753, col: 5, offset: 22060},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 10, offset: 22065},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 25, offset: 22080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 753, col: 28, offset: 22083},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 32, offset: 22087},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 753, col: 35, offset: 22090},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 39, offset: 22094},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 753, col: 42, offset: 22097},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 46, offset: 22101},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 51, offset: 22106},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 753, col: 54, offset: 22109},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 22208},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 756, col: 5, offset: 22208},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 10, offset: 22213},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22313},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22313},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 759, col: 5, offset: 22313},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 9, offset: 22317},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 12, offset: 22320},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 14, offset: 22322},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 759, col: 25, offset: 22333},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 761, col: 1, offset: 22356},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 22370},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 762, col: 5, offset: 22370},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 762, col: 11, offset: 22376},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 766, col: 1, offset: 22470},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 22483},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 767, col: 5, offset: 22483},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 767, col: 5, offset: 22483},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 11, offset: 22489},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 16, offset: 22494},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 767, col: 21, offset: 22499},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 21, offset: 22499},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 771, col: 1, offset: 22593},
			expr: &actionExpr{
				pos: position{line: 771, col: 16, offset: 22608},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 771, col: 16, offset: 22608},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 771, col: 16, offset: 22608},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 771, col: 19, offset: 22611},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 23, offset: 22615},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 26, offset: 22618},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 30, offset: 22622},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 773, col: 1, offset: 22648},
			expr: &choiceExpr{
				pos: position{line: 774, col: 5, offset: 22664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 22664},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 774, col: 5, offset: 22664},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 774, col: 5, offset: 22664},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 774, col: 9, offset: 22668},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 774, col: 12, offset: 22671},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 774, col: 19, offset: 22678},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 774, col: 33, offset: 22692},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 774, col: 36, offset: 22695},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 22788},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 22788},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 777, col: 5, offset: 22788},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 777, col: 9, offset: 22792},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 777, col: 12, offset: 22795},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 777, col: 16, offset: 22799},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 777, col: 21, offset: 22804},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 777, col: 24, offset: 22807},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 22894},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 780, col: 5, offset: 22894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 780, col: 5, offset: 22894},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 780, col: 10, offset: 22899},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 780, col: 13, offset: 22902},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 17, offset: 22906},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 780, col: 22, offset: 22911},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 780, col: 25, offset: 22914},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 23000},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 23000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 783, col: 5, offset: 23000},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 10, offset: 23005},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 13, offset: 23008},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 21, offset: 23016},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 26, offset: 23021},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 29, offset: 23024},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 33, offset: 23028},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 36, offset: 23031},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 44, offset: 23039},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 49, offset: 23044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 52, offset: 23047},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 787, col: 1, offset: 23159},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 23177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 5, offset: 23177},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 23203},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 795, col: 1, offset: 23462},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 23488},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 796, col: 9, offset: 23492},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 796, col: 9, offset: 23492},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 796, col: 19, offset: 23502},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 796, col: 30, offset: 23513},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 796, col: 41, offset: 23524},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 797, col: 9, offset: 23541},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 797, col: 18, offset: 23550},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 797, col: 28, offset: 23560},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 797, col: 38, offset: 23570},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 798, col: 9, offset: 23586},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 799, col: 9, offset: 23604},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 799, col: 18, offset: 23613},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 808, col: 1, offset: 24095},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 24121},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 809, col: 9, offset: 24125},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 9, offset: 24125},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 809, col: 22, offset: 24138},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 810, col: 9, offset: 24153},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 811, col: 9, offset: 24169},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 812, col: 9, offset: 24187},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 812, col: 16, offset: 24194},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 813, col: 9, offset: 24208},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 813, col: 18, offset: 24217},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 817, col: 1, offset: 24332},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 24350},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 24350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 24350},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 24356},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 21, offset: 24366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 818, col: 26, offset: 24371},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 26, offset: 24371},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 822, col: 1, offset: 24470},
			expr: &actionExpr{
				pos: position{line: 822, col: 21, offset: 24490},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 822, col: 21, offset: 24490},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 822, col: 21, offset: 24490},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 822, col: 24, offset: 24493},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 822, col: 28, offset: 24497},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 822, col: 31, offset: 24500},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 35, offset: 24504},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 824, col: 1, offset: 24535},
			expr: &actionExpr{
				pos: position{line: 825, col: 5, offset: 24549},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 825, col: 5, offset: 24549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 825, col: 5, offset: 24549},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 10, offset: 24554},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 25, offset: 24569},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 825, col: 28, offset: 24572},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 32, offset: 24576},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 825, col: 35, offset: 24579},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 39, offset: 24583},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 829, col: 1, offset: 24665},
			expr: &choiceExpr{
				pos: position{line: 830, col: 5, offset: 24683},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 830, col: 5, offset: 24683},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 830, col: 24, offset: 24702},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 832, col: 1, offset: 24720},
			expr: &actionExpr{
				pos: position{line: 832, col: 12, offset: 24731},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 832, col: 12, offset: 24731},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 833, col: 1, offset: 24760},
			expr: &actionExpr{
				pos: position{line: 833, col: 11, offset: 24770},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 833, col: 11, offset: 24770},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 834, col: 1, offset: 24797},
			expr: &actionExpr{
				pos: position{line: 834, col: 11, offset: 24807},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 834, col: 11, offset: 24807},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 835, col: 1, offset: 24834},
			expr: &actionExpr{
				pos: position{line: 835, col: 12, offset: 24845},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 835, col: 12, offset: 24845},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 836, col: 1, offset: 24874},
			expr: &actionExpr{
				pos: position{line: 836, col: 11, offset: 24884},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 836, col: 11, offset: 24884},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 838, col: 1, offset: 24912},
			expr: &charClassMatcher{
				pos:        position{line: 838, col: 19, offset: 24930},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 839, col: 1, offset: 24941},
			expr: &choiceExpr{
				pos: position{line: 839, col: 18, offset: 24958},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 839, col: 18, offset: 24958},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 839, col: 36, offset: 24976},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 841, col: 1, offset: 24983},
			expr: &actionExpr{
				pos: position{line: 842, col: 5, offset: 24998},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 842, col: 5, offset: 24998},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 842, col: 8, offset: 25001},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 844, col: 1, offset: 25088},
			expr: &choiceExpr{
				pos: position{line: 845, col: 5, offset: 25107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 25107},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 25107},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 5, offset: 25107},
									expr: &seqExpr{
										pos: position{line: 845, col: 7, offset: 25109},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 845, col: 7, offset: 25109},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 845, col: 15, offset: 25117},
												expr: &ruleRefExpr{
													pos:  position{line: 845, col: 16, offset: 25118},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 32, offset: 25134},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 845, col: 48, offset: 25150},
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 48, offset: 25150},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 25202},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 846, col: 5, offset: 25202},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 25241},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 25241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 847, col: 5, offset: 25241},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 847, col: 10, offset: 25246},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 13, offset: 25249},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 25340},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 849, col: 5, offset: 25340},
							val:        "type",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 852, col: 1, offset: 25380},
			expr: &choiceExpr{
				pos: position{line: 853, col: 5, offset: 25392},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 853, col: 5, offset: 25392},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 854, col: 5, offset: 25411},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 855, col: 5, offset: 25427},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 856, col: 5, offset: 25444},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 858, col: 1, offset: 25457},
			expr: &choiceExpr{
				pos: position{line: 859, col: 5, offset: 25470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 5, offset: 25470},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 860, col: 5, offset: 25482},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 5, offset: 25494},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 862, col: 5, offset: 25504},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 862, col: 5, offset: 25504},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 25510},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 862, col: 13, offset: 25512},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 862, col: 19, offset: 25518},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 862, col: 21, offset: 25520},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 863, col: 5, offset: 25532},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 864, col: 5, offset: 25541},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 866, col: 1, offset: 25548},
			expr: &choiceExpr{
				pos: position{line: 867, col: 5, offset: 25565},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 867, col: 5, offset: 25565},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 868, col: 5, offset: 25579},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 869, col: 5, offset: 25592},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 870, col: 5, offset: 25603},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 871, col: 5, offset: 25613},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 873, col: 1, offset: 25618},
			expr: &choiceExpr{
				pos: position{line: 874, col: 5, offset: 25635},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 874, col: 5, offset: 25635},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 875, col: 5, offset: 25649},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 876, col: 5, offset: 25662},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 877, col: 5, offset: 25673},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 878, col: 5, offset: 25683},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 880, col: 1, offset: 25688},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 25703},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 881, col: 5, offset: 25703},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 882, col: 5, offset: 25715},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 883, col: 5, offset: 25725},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 884, col: 5, offset: 25734},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 885, col: 5, offset: 25742},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 887, col: 1, offset: 25750},
			expr: &choiceExpr{
				pos: position{line: 887, col: 13, offset: 25762},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 887, col: 13, offset: 25762},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 887, col: 20, offset: 25769},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 887, col: 26, offset: 25775},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 888, col: 1, offset: 25779},
			expr: &choiceExpr{
				pos: position{line: 888, col: 14, offset: 25792},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 888, col: 14, offset: 25792},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 888, col: 22, offset: 25800},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 888, col: 29, offset: 25807},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 888, col: 35, offset: 25813},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 888, col: 40, offset: 25818},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 890, col: 1, offset: 25823},
			expr: &choiceExpr{
				pos: position{line: 891, col: 5, offset: 25835},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 25835},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 891, col: 5, offset: 25835},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25921},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25921},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 25921},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 9, offset: 25925},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 14, offset: 25930},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 17, offset: 25933},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 894, col: 1, offset: 26022},
			expr: &choiceExpr{
				pos: position{line: 895, col: 5, offset: 26034},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 26034},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 895, col: 5, offset: 26034},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 26121},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 26121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 896, col: 5, offset: 26121},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 9, offset: 26125},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 14, offset: 26130},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 17, offset: 26133},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 898, col: 1, offset: 26231},
			expr: &choiceExpr{
				pos: position{line: 899, col: 5, offset: 26241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 26241},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 899, col: 5, offset: 26241},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 26328},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 26328},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 900, col: 5, offset: 26328},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 9, offset: 26332},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 14, offset: 26337},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 17, offset: 26340},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 902, col: 1, offset: 26438},
			expr: &choiceExpr{
				pos: position{line: 903, col: 5, offset: 26447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 26447},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 903, col: 5, offset: 26447},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 904, col: 5, offset: 26536},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 904, col: 5, offset: 26536},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 904, col: 5, offset: 26536},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 904, col: 9, offset: 26540},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 904, col: 14, offset: 26545},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 904, col: 17, offset: 26548},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 906, col: 1, offset: 26650},
			expr: &choiceExpr{
				pos: position{line: 907, col: 5, offset: 26660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 907, col: 5, offset: 26660},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 907, col: 5, offset: 26660},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 26752},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 26752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 908, col: 5, offset: 26752},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 9, offset: 26756},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 14, offset: 26761},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 17, offset: 26764},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 911, col: 1, offset: 26895},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 26902},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 26902},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 912, col: 5, offset: 26902},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 912, col: 10, offset: 26907},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 14, offset: 26911},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 912, col: 19, offset: 26916},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 23, offset: 26920},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 912, col: 28, offset: 26925},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 32, offset: 26929},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 914, col: 1, offset: 26966},
			expr: &actionExpr{
				pos: position{line: 915, col: 5, offset: 26974},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 915, col: 5, offset: 26974},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 915, col: 5, offset: 26974},
							expr: &seqExpr{
								pos: position{line: 915, col: 8, offset: 26977},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 915, col: 8, offset: 26977},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 915, col: 12, offset: 26981},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 16, offset: 26985},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 915, col: 20, offset: 26989},
										expr: &choiceExpr{
											pos: position{line: 915, col: 22, offset: 26991},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 915, col: 22, offset: 26991},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 915, col: 33, offset: 27002},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 39, offset: 27008},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 41, offset: 27010},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 919, col: 1, offset: 27174},
			expr: &choiceExpr{
				pos: position{line: 920, col: 5, offset: 27192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 27192},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 920, col: 5, offset: 27192},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 920, col: 5, offset: 27192},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 920, col: 7, offset: 27194},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 7, offset: 27194},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 920, col: 17, offset: 27204},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 19, offset: 27206},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 27270},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 923, col: 5, offset: 27270},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 923, col: 5, offset: 27270},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 7, offset: 27272},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 11, offset: 27276},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 923, col: 13, offset: 27278},
										expr: &ruleRefExpr{
											pos:  position{line: 923, col: 13, offset: 27278},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 923, col: 23, offset: 27288},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 923, col: 28, offset: 27293},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 923, col: 30, offset: 27295},
										expr: &ruleRefExpr{
											pos:  position{line: 923, col: 30, offset: 27295},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 40, offset: 27305},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 42, offset: 27307},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 27406},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 27406},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 926, col: 5, offset: 27406},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 926, col: 10, offset: 27411},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 12, offset: 27413},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 12, offset: 27413},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 22, offset: 27423},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 24, offset: 27425},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 27496},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 27496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 929, col: 5, offset: 27496},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 7, offset: 27498},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 929, col: 11, offset: 27502},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 929, col: 13, offset: 27504},
										expr: &ruleRefExpr{
											pos:  position{line: 929, col: 13, offset: 27504},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 929, col: 23, offset: 27514},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 27582},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 932, col: 5, offset: 27582},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 936, col: 1, offset: 27619},
			expr: &choiceExpr{
				pos: position{line: 937, col: 5, offset: 27631},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 937, col: 5, offset: 27631},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 5, offset: 27638},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 940, col: 1, offset: 27643},
			expr: &actionExpr{
				pos: position{line: 940, col: 12, offset: 27654},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 940, col: 12, offset: 27654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 940, col: 12, offset: 27654},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 940, col: 16, offset: 27658},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 18, offset: 27660},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 941, col: 1, offset: 27697},
			expr: &actionExpr{
				pos: position{line: 941, col: 12, offset: 27708},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 941, col: 12, offset: 27708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 941, col: 12, offset: 27708},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 14, offset: 27710},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 941, col: 18, offset: 27714},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 943, col: 1, offset: 27752},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 27763},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 27763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 27763},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 27765},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 10, offset: 27768},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 14, offset: 27772},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 27774},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 948, col: 1, offset: 27847},
			expr: &actionExpr{
				pos: position{line: 949, col: 5, offset: 27858},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 949, col: 5, offset: 27858},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 949, col: 5, offset: 27858},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 7, offset: 27860},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 949, col: 11, offset: 27864},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 949, col: 15, offset: 27868},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 17, offset: 27870},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 953, col: 1, offset: 27933},
			expr: &actionExpr{
				pos: position{line: 954, col: 4, offset: 27941},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 954, col: 4, offset: 27941},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 954, col: 6, offset: 27943},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 956, col: 1, offset: 27983},
			expr: &choiceExpr{
				pos: position{line: 957, col: 5, offset: 27997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 957, col: 5, offset: 27997},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 5, offset: 28012},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 960, col: 1, offset: 28028},
			expr: &actionExpr{
				pos: position{line: 960, col: 14, offset: 28041},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 960, col: 14, offset: 28041},
					expr: &charClassMatcher{
						pos:        position{line: 960, col: 14, offset: 28041},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 962, col: 1, offset: 28080},
			expr: &actionExpr{
				pos: position{line: 963, col: 5, offset: 28099},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 963, col: 5, offset: 28099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 963, col: 5, offset: 28099},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 963, col: 9, offset: 28103},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 965, col: 1, offset: 28146},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 28162},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 28162},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 28162},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 966, col: 5, offset: 28162},
									expr: &litMatcher{
										pos:        position{line: 966, col: 5, offset: 28162},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 966, col: 10, offset: 28167},
									expr: &charClassMatcher{
										pos:        position{line: 966, col: 10, offset: 28167},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 17, offset: 28174},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 966, col: 21, offset: 28178},
									expr: &charClassMatcher{
										pos:        position{line: 966, col: 21, offset: 28178},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 966, col: 28, offset: 28185},
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 28, offset: 28185},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 28244},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 28244},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 969, col: 5, offset: 28244},
									expr: &litMatcher{
										pos:        position{line: 969, col: 5, offset: 28244},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 10, offset: 28249},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 969, col: 14, offset: 28253},
									expr: &charClassMatcher{
										pos:        position{line: 969, col: 14, offset: 28253},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 969, col: 21, offset: 28260},
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 21, offset: 28260},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 973, col: 1, offset: 28316},
			expr: &seqExpr{
				pos: position{line: 973, col: 16, offset: 28331},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 973, col: 16, offset: 28331},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 973, col: 21, offset: 28336},
						expr: &charClassMatcher{
							pos:        position{line: 973, col: 21, offset: 28336},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 27, offset: 28342},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 975, col: 1, offset: 28354},
			expr: &actionExpr{
				pos: position{line: 975, col: 7, offset: 28360},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 975, col: 7, offset: 28360},
					expr: &ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 28360},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 977, col: 1, offset: 28402},
			expr: &charClassMatcher{
				pos:        position{line: 977, col: 12, offset: 28413},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 980, col: 1, offset: 28427},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 28444},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 28444},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 28444},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 981, col: 5, offset: 28444},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 981, col: 9, offset: 28448},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 981, col: 11, offset: 28450},
										expr: &ruleRefExpr{
											pos:  position{line: 981, col: 11, offset: 28450},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 981, col: 29, offset: 28468},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 28505},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 982, col: 5, offset: 28505},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 982, col: 5, offset: 28505},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 982, col: 9, offset: 28509},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 982, col: 11, offset: 28511},
										expr: &ruleRefExpr{
											pos:  position{line: 982, col: 11, offset: 28511},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 982, col: 29, offset: 28529},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 984, col: 1, offset: 28563},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 28584},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 28584},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 985, col: 5, offset: 28584},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 985, col: 5, offset: 28584},
									expr: &choiceExpr{
										pos: position{line: 985, col: 7, offset: 28586},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 985, col: 7, offset: 28586},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 13, offset: 28592},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 985, col: 26, offset: 28605,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 28642},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 28642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 986, col: 5, offset: 28642},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 986, col: 10, offset: 28647},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 12, offset: 28649},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 988, col: 1, offset: 28683},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 28695},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 28695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 989, col: 5, offset: 28695},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 10, offset: 28700},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 23, offset: 28713},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 989, col: 28, offset: 28718},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 28, offset: 28718},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 991, col: 1, offset: 28780},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28797},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 28797},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 992, col: 5, offset: 28797},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 5, offset: 28849},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 995, col: 1, offset: 28861},
			expr: &choiceExpr{
				pos: position{line: 996, col: 5, offset: 28877},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 28877},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 997, col: 5, offset: 28894},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 999, col: 1, offset: 28901},
			expr: &actionExpr{
				pos: position{line: 999, col: 14, offset: 28914},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 999, col: 14, offset: 28914},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 999, col: 14, offset: 28914},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 999, col: 19, offset: 28919},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 999, col: 22, offset: 28922},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 999, col: 22, offset: 28922},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 999, col: 38, offset: 28938},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1001, col: 1, offset: 28974},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 28995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28995},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1002, col: 5, offset: 28995},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1002, col: 5, offset: 28995},
									expr: &choiceExpr{
										pos: position{line: 1002, col: 7, offset: 28997},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1002, col: 7, offset: 28997},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1002, col: 13, offset: 29003},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1002, col: 26, offset: 29016,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 29053},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 29053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1003, col: 5, offset: 29053},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 10, offset: 29058},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 12, offset: 29060},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1005, col: 1, offset: 29094},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 5, offset: 29113},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1006, col: 5, offset: 29113},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1006, col: 5, offset: 29113},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1006, col: 5, offset: 29113},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1006, col: 9, offset: 29117},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1006, col: 18, offset: 29126},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 29177},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 29198},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1010, col: 1, offset: 29213},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 29234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 29234},
						run: (*parser).callonSingleCharEscape2,
						expr: &litMatcher{
							pos:        position{line: 1011, col: 5, offset: 29234},
							val:        "'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 29261},
						run: (*parser).callonSingleCharEscape4,
						expr: &litMatcher{
							pos:        position{line: 1012, col: 5, offset: 29261},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 5, offset: 29288},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1013, col: 5, offset: 29288},
							val:        "\\",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 29317},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1014, col: 5, offset: 29317},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 29346},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 29346},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 29375},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 29375},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 29404},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 29404},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 29433},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 5, offset: 29433},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 29462},
						run: (*parser).callonSingleCharEscape18,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 29462},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1021, col: 1, offset: 29488},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 5, offset: 29506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 29506},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1022, col: 5, offset: 29506},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 29534},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 5, offset: 29534},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1024, col: 5, offset: 29564},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1026, col: 1, offset: 29570},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 5, offset: 29588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1027, col: 5, offset: 29588},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1027, col: 5, offset: 29588},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 5, offset: 29588},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 29592},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1027, col: 16, offset: 29599},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1027, col: 16, offset: 29599},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 25, offset: 29608},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 34, offset: 29617},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 43, offset: 29626},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 29689},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 29689},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1030, col: 5, offset: 29689},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1030, col: 9, offset: 29693},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 13, offset: 29697},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1030, col: 20, offset: 29704},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1030, col: 20, offset: 29704},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 29, offset: 29713},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 29, offset: 29713},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 39, offset: 29723},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 39, offset: 29723},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 49, offset: 29733},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 49, offset: 29733},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 59, offset: 29743},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 59, offset: 29743},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 69, offset: 29753},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 69, offset: 29753},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 80, offset: 29764},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1034, col: 1, offset: 29818},
			expr: &actionExpr{
				pos: position{line: 1035, col: 5, offset: 29829},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 5, offset: 29829},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1035, col: 5, offset: 29829},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 9, offset: 29833},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 14, offset: 29838},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1035, col: 25, offset: 29849},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1037, col: 1, offset: 29875},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 29890},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1038, col: 5, offset: 29890},
					expr: &choiceExpr{
						pos: position{line: 1038, col: 6, offset: 29891},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1038, col: 6, offset: 29891},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1038, col: 13, offset: 29898},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1040, col: 1, offset: 29938},
			expr: &charClassMatcher{
				pos:        position{line: 1041, col: 5, offset: 29954},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1043, col: 1, offset: 29969},
			expr: &oneOrMoreExpr{
				pos: position{line: 1043, col: 6, offset: 29974},
				expr: &ruleRefExpr{
					pos:  position{line: 1043, col: 6, offset: 29974},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1044, col: 1, offset: 29984},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1044, col: 6, offset: 29989},
				expr: &ruleRefExpr{
					pos:  position{line: 1044, col: 6, offset: 29989},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1046, col: 1, offset: 30000},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 30013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 30013},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 30028},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 5, offset: 30047},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1051, col: 1, offset: 30056},
			expr: &anyMatcher{
				line: 1052, col: 5, offset: 30076,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1054, col: 1, offset: 30079},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 30107},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1055, col: 5, offset: 30107},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1056, col: 5, offset: 30116},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1057, col: 5, offset: 30125},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1058, col: 5, offset: 30134},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1059, col: 5, offset: 30142},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1060, col: 5, offset: 30155},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1062, col: 1, offset: 30165},
			expr: &charClassMatcher{
				pos:        position{line: 1063, col: 5, offset: 30184},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1069, col: 1, offset: 30514},
			expr: &ruleRefExpr{
				pos:  position{line: 1072, col: 5, offset: 30585},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1074, col: 1, offset: 30604},
			expr: &seqExpr{
				pos: position{line: 1075, col: 5, offset: 30625},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1075, col: 5, offset: 30625},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1075, col: 10, offset: 30630},
						expr: &seqExpr{
							pos: position{line: 1075, col: 11, offset: 30631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1075, col: 11, offset: 30631},
									expr: &litMatcher{
										pos:        position{line: 1075, col: 12, offset: 30632},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1075, col: 17, offset: 30637},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1075, col: 35, offset: 30655},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1077, col: 1, offset: 30661},
			expr: &seqExpr{
				pos: position{line: 1078, col: 5, offset: 30683},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1078, col: 5, offset: 30683},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1078, col: 10, offset: 30688},
						expr: &seqExpr{
							pos: position{line: 1078, col: 11, offset: 30689},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1078, col: 11, offset: 30689},
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 12, offset: 30690},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1078, col: 27, offset: 30705},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1080, col: 1, offset: 30724},
			expr: &seqExpr{
				pos: position{line: 1080, col: 7, offset: 30730},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1080, col: 7, offset: 30730},
						expr: &ruleRefExpr{
							pos:  position{line: 1080, col: 7, offset: 30730},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 19, offset: 30742},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1081, col: 1, offset: 30757},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 7, offset: 30763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1081, col: 7, offset: 30763},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 30767},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1082, col: 1, offset: 30771},
			expr: &notExpr{
				pos: position{line: 1082, col: 7, offset: 30777},
				expr: &anyMatcher{
					line: 1082, col: 8, offset: 30778,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"op": "SequentialProc", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConstProc", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch1(filter, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"filter": filter, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch1(stack["filter"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onSwitchTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonSwitchTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SwitchProc", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation27(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation27(stack["f"])
}

func (c *current) onOperation33(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["a"])
}

func (c *current) onOperation39(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

					"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

					"rhs": v}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

					"lhs": v,

					"rhs": map[string]interface{}{"op": "Identifier", "name": "$"}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc18(key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc18(stack["key"], stack["columns"])
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc",

		"keys": []interface{}{map[string]interface{}{"op": "Assignment",

			"lhs": map[string]interface{}{"op": "Identifier", "name": "shape"},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "typeof",

				"args": []interface{}{e}}}},

		"reducers": []interface{}{map[string]interface{}{"op": "Assignment",

			"lhs": map[string]interface{}{"op": "Identifier", "name": "taste"},

			"rhs": map[string]interface{}{"op": "Reducer",

				"operator": "any",

				"expr": e,

				"where": nil}}},

		"duration": nil, "limit": 0}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr13(e interface{}) (interface{}, error) {
	return []interface{}{"@", e}, nil
}

func (p *parser) callonSelectExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr13(stack["e"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return makeBinaryExprChain(map[string]interface{}{"op": "SelectExpr", "selectors": args}, methods), nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": map[string]interface{}{"op": "Empty"}, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": map[string]interface{}{"op": "Empty"}}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeExpr", "type": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"op": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape2() (interface{}, error) {
	return "'", nil
}

func (p *parser) callonSingleCharEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape2()
}

func (c *current) onSingleCharEscape4() (interface{}, error) {
	return '"', nil
}

func (p *parser) callonSingleCharEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape4()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\\", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onSingleCharEscape18() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape18()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
