// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 743},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 763},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 768},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 796},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 809},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 809},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 817},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 819},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 822},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 837},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 840},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 844},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 847},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 852},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 859},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 859},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 859},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 862},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 868},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 968},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 968},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 975},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 977},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 980},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 995},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 998},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 1002},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1005},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1009},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1016},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1016},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1016},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1019},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1025},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1120},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1135},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1135},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1135},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1141},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1151},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1156},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1156},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1316},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1316},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1319},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1431},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1448},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1448},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1448},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 21, offset: 1451},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 25, offset: 1455},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 1458},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 30, offset: 1460},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1489},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1502},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1502},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1502},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1508},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1519},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1524},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1524},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1625},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1625},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1631},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1690},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1707},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1707},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1707},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1710},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1715},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1718},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1721},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 56, col: 1, offset: 1753},
			expr: &actionExpr{
				pos: position{line: 57, col: 5, offset: 1770},
				run: (*parser).callonSwitchBranch1,
				expr: &seqExpr{
					pos: position{line: 57, col: 5, offset: 1770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 57, col: 5, offset: 1770},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 12, offset: 1777},
								name: "SearchBoolean",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 26, offset: 1791},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 29, offset: 1794},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 34, offset: 1799},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 37, offset: 1802},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 42, offset: 1807},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 61, col: 1, offset: 1896},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1907},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1907},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 62, col: 5, offset: 1907},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1913},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 62, col: 24, offset: 1926},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 29, offset: 1931},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 29, offset: 1931},
											name: "SwitchTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 2030},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 65, col: 5, offset: 2030},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 11, offset: 2036},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchTail",
			pos:  position{line: 69, col: 1, offset: 2097},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 2112},
				run: (*parser).callonSwitchTail1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 2112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 70, col: 5, offset: 2112},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 8, offset: 2115},
							name: "CaseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 18, offset: 2125},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 70, col: 21, offset: 2128},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 24, offset: 2131},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 72, col: 1, offset: 2164},
			expr: &litMatcher{
				pos:        position{line: 72, col: 13, offset: 2176},
				val:        "case",
				ignoreCase: false,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2184},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2198},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2198},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2198},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2206},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2209},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2213},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2216},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2221},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2224},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2234},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2243},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2246},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2345},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2345},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2354},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2357},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2361},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 24, offset: 2364},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 34, offset: 2374},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 37, offset: 2377},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 47, offset: 2387},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 54, offset: 2394},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 57, offset: 2397},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2494},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2507},
						run: (*parser).callonOperation27,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2507},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2509},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2518},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2519},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2549},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2549},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2549},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2551},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2563},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2564},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2595},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2595},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2595},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2600},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2614},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2615},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2710},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2720},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2720},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2724},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 88, col: 15, offset: 2724},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 21, offset: 2730},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 28, offset: 2737},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 2743},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 90, col: 1, offset: 2749},
			expr: &seqExpr{
				pos: position{line: 90, col: 13, offset: 2761},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 13, offset: 2761},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 90, col: 17, offset: 2765},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 90, col: 18, offset: 2766},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 90, col: 18, offset: 2766},
										expr: &litMatcher{
											pos:        position{line: 90, col: 19, offset: 2767},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2772},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 38, offset: 2786},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 57, offset: 2805},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 90, col: 82, offset: 2830},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 90, col: 88, offset: 2836},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2842},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2853},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2854},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2854},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2857},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2857},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 2867},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 2876},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 2884},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 2884},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 2887},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 2893},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 2911},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 2911},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2911},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 2917},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 2927},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 2932},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 2932},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3006},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3021},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3021},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3021},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3023},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3031},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3033},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3035},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3085},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3099},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3099},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3105},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3127},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3128},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 103, col: 11, offset: 3128},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 103, col: 14, offset: 3131},
												expr: &seqExpr{
													pos: position{line: 103, col: 15, offset: 3132},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 15, offset: 3132},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 24, offset: 3141},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 28, offset: 3145},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 103, col: 31, offset: 3148},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 36, offset: 3153},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3269},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3286},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3286},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3287},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3287},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3287},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3296},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3300},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3300},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3304},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3308},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3310},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3426},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3439},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3454},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 5, offset: 3454},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 9, offset: 3458},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 12, offset: 3461},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 17, offset: 3466},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 31, offset: 3480},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 113, col: 34, offset: 3483},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 115, col: 1, offset: 3509},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3522},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 5, offset: 3522},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 9, offset: 3526},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 12, offset: 3529},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 22, offset: 3539},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 36, offset: 3553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 39, offset: 3556},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 41, offset: 3558},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4279},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4279},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 7, offset: 4281},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 12, offset: 4286},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 15, offset: 4289},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 20, offset: 4294},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 34, offset: 4308},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 37, offset: 4311},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 39, offset: 4313},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 143, col: 57, offset: 4331},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 58, offset: 4332},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4450},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4450},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 5, offset: 4450},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 7, offset: 4452},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 19, offset: 4464},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 21, offset: 4466},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 29, offset: 4474},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 146, col: 31, offset: 4476},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5190},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5190},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 173, col: 5, offset: 5190},
									expr: &seqExpr{
										pos: position{line: 173, col: 7, offset: 5192},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 173, col: 7, offset: 5192},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 173, col: 19, offset: 5204},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 173, col: 24, offset: 5209},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 26, offset: 5211},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 44, offset: 5229},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 45, offset: 5230},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5345},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 176, col: 5, offset: 5345},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 176, col: 9, offset: 5349},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 10, offset: 5350},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 180, col: 1, offset: 5460},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5476},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5488},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5488},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 7, offset: 5490},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 186, col: 1, offset: 5595},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 5617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 5617},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5629},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5629},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 7, offset: 5631},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 198, col: 1, offset: 5917},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 5932},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 5932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 5, offset: 5932},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 10, offset: 5937},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 10, offset: 5937},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 20, offset: 5947},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 199, col: 25, offset: 5952},
								expr: &litMatcher{
									pos:        position{line: 199, col: 26, offset: 5953},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 203, col: 1, offset: 6020},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 6033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6033},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6033},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 204, col: 5, offset: 6033},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 7, offset: 6035},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 13, offset: 6041},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 15, offset: 6043},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6093},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 207, col: 1, offset: 6102},
			expr: &actionExpr{
				pos: position{line: 207, col: 9, offset: 6110},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 207, col: 9, offset: 6110},
					expr: &litMatcher{
						pos:        position{line: 207, col: 9, offset: 6110},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6147},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6163},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6176},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6188},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6201},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6213},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6225},
						name: "CaseToken",
					},
					&litMatcher{
						pos:        position{line: 216, col: 5, offset: 6239},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 220, col: 1, offset: 6296},
			expr: &ruleRefExpr{
				pos:  position{line: 220, col: 14, offset: 6309},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 222, col: 1, offset: 6329},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 6342},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 222, col: 15, offset: 6343},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 15, offset: 6343},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 21, offset: 6349},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 28, offset: 6356},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 35, offset: 6363},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 42, offset: 6370},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 48, offset: 6376},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 55, offset: 6383},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 224, col: 1, offset: 6420},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6443},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6443},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 11, offset: 6449},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6467},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 10, offset: 6472},
								expr: &actionExpr{
									pos: position{line: 226, col: 11, offset: 6473},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 226, col: 11, offset: 6473},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 226, col: 11, offset: 6473},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 14, offset: 6476},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 17, offset: 6479},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 28, offset: 6490},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 31, offset: 6493},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 36, offset: 6498},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 230, col: 1, offset: 6615},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 6633},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 6633},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6633},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 11, offset: 6639},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6657},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 10, offset: 6662},
								expr: &actionExpr{
									pos: position{line: 232, col: 11, offset: 6663},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 232, col: 11, offset: 6663},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 11, offset: 6663},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 14, offset: 6666},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 17, offset: 6669},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 34, offset: 6686},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 37, offset: 6689},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 42, offset: 6694},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 236, col: 1, offset: 6811},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 6829},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 6829},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 6829},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 6835},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 6854},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 238, col: 10, offset: 6859},
								expr: &actionExpr{
									pos: position{line: 238, col: 11, offset: 6860},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 238, col: 11, offset: 6860},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 238, col: 11, offset: 6860},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 14, offset: 6863},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 17, offset: 6866},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 238, col: 40, offset: 6889},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 43, offset: 6892},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 48, offset: 6897},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 242, col: 1, offset: 7015},
			expr: &choiceExpr{
				pos: position{line: 243, col: 5, offset: 7034},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7034},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 243, col: 5, offset: 7034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 243, col: 5, offset: 7034},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 7, offset: 7036},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 22, offset: 7051},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 243, col: 25, offset: 7054},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 29, offset: 7058},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 243, col: 32, offset: 7061},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 36, offset: 7065},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7169},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 248, col: 1, offset: 7185},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 7204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7204},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7218},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 7234},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 251, col: 5, offset: 7234},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 5, offset: 7234},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 11, offset: 7240},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 251, col: 20, offset: 7249},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 251, col: 25, offset: 7254},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 26, offset: 7255},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7327},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7339},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 259, col: 1, offset: 7376},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 7392},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 7392},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 7392},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 260, col: 5, offset: 7392},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 260, col: 15, offset: 7402},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 21, offset: 7408},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 260, col: 30, offset: 7417},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 35, offset: 7422},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 260, col: 47, offset: 7434},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 53, offset: 7440},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 7589},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 7589},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 263, col: 5, offset: 7589},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 263, col: 15, offset: 7599},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 21, offset: 7605},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 263, col: 30, offset: 7614},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 39, offset: 7623},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 263, col: 48, offset: 7632},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 263, col: 53, offset: 7637},
										expr: &seqExpr{
											pos: position{line: 263, col: 54, offset: 7638},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 263, col: 54, offset: 7638},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 263, col: 56, offset: 7640},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 263, col: 70, offset: 7654},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 76, offset: 7660},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 271, col: 1, offset: 7901},
			expr: &choiceExpr{
				pos: position{line: 271, col: 13, offset: 7913},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 271, col: 13, offset: 7913},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 271, col: 13, offset: 7913},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 271, col: 25, offset: 7925},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 271, col: 29, offset: 7929},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 273, col: 1, offset: 7933},
			expr: &choiceExpr{
				pos: position{line: 274, col: 5, offset: 7946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 274, col: 5, offset: 7946},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 274, col: 5, offset: 7946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 274, col: 5, offset: 7946},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 14, offset: 7955},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 274, col: 16, offset: 7957},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 20, offset: 7961},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 29, offset: 7970},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 7996},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 275, col: 5, offset: 7996},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 277, col: 1, offset: 8021},
			expr: &actionExpr{
				pos: position{line: 278, col: 5, offset: 8037},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 278, col: 5, offset: 8037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 278, col: 5, offset: 8037},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 13, offset: 8045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 15, offset: 8047},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 23, offset: 8055},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 280, col: 1, offset: 8096},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 8109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 8109},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 281, col: 5, offset: 8109},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 281, col: 5, offset: 8109},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 281, col: 7, offset: 8111},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 281, col: 14, offset: 8118},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 281, col: 16, offset: 8120},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 281, col: 25, offset: 8129},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 281, col: 27, offset: 8131},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 281, col: 33, offset: 8137},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 282, col: 5, offset: 8168},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 282, col: 5, offset: 8168},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 287, col: 1, offset: 8428},
			expr: &choiceExpr{
				pos: position{line: 288, col: 5, offset: 8447},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8447},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 289, col: 5, offset: 8462},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 289, col: 5, offset: 8462},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 10, offset: 8467},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 291, col: 1, offset: 8557},
			expr: &actionExpr{
				pos: position{line: 292, col: 5, offset: 8577},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 292, col: 5, offset: 8577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 292, col: 5, offset: 8577},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 11, offset: 8583},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 26, offset: 8598},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 31, offset: 8603},
								expr: &actionExpr{
									pos: position{line: 292, col: 32, offset: 8604},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 292, col: 32, offset: 8604},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 292, col: 32, offset: 8604},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 292, col: 35, offset: 8607},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 292, col: 39, offset: 8611},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 292, col: 42, offset: 8614},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 292, col: 47, offset: 8619},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 296, col: 1, offset: 8741},
			expr: &choiceExpr{
				pos: position{line: 297, col: 5, offset: 8763},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 8763},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 297, col: 5, offset: 8763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 297, col: 5, offset: 8763},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 10, offset: 8768},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 15, offset: 8773},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 297, col: 18, offset: 8776},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 22, offset: 8780},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 297, col: 25, offset: 8783},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 33, offset: 8791},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 8901},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 300, col: 5, offset: 8901},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 13, offset: 8909},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 304, col: 1, offset: 9015},
			expr: &actionExpr{
				pos: position{line: 305, col: 5, offset: 9027},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 305, col: 5, offset: 9027},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 305, col: 5, offset: 9027},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 6, offset: 9028},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 16, offset: 9038},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 19, offset: 9041},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 31, offset: 9053},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 305, col: 34, offset: 9056},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 38, offset: 9060},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 9063},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 46, offset: 9068},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 46, offset: 9068},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 53, offset: 9075},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 305, col: 56, offset: 9078},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 305, col: 60, offset: 9082},
							expr: &seqExpr{
								pos: position{line: 305, col: 62, offset: 9084},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 305, col: 62, offset: 9084},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 305, col: 65, offset: 9087},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 70, offset: 9092},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 76, offset: 9098},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 76, offset: 9098},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 313, col: 1, offset: 9294},
			expr: &choiceExpr{
				pos: position{line: 314, col: 5, offset: 9310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 314, col: 5, offset: 9310},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9329},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9342},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 318, col: 1, offset: 9351},
			expr: &actionExpr{
				pos: position{line: 318, col: 15, offset: 9365},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 318, col: 15, offset: 9365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 318, col: 15, offset: 9365},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 318, col: 17, offset: 9367},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 25, offset: 9375},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 27, offset: 9377},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 32, offset: 9382},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 320, col: 1, offset: 9418},
			expr: &actionExpr{
				pos: position{line: 321, col: 5, offset: 9431},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 321, col: 5, offset: 9431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 9431},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 9437},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 29, offset: 9455},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 34, offset: 9460},
								expr: &seqExpr{
									pos: position{line: 321, col: 35, offset: 9461},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 321, col: 35, offset: 9461},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 321, col: 38, offset: 9464},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 321, col: 42, offset: 9468},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 321, col: 45, offset: 9471},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 329, col: 1, offset: 9676},
			expr: &choiceExpr{
				pos: position{line: 330, col: 5, offset: 9689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 330, col: 5, offset: 9689},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 9702},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9714},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9726},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9739},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9752},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9765},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9778},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9793},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9806},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9818},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9833},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 9846},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 9860},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 9873},
						name: "TasteProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 346, col: 1, offset: 9884},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 9897},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 9897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 9897},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 347, col: 13, offset: 9905},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 18, offset: 9910},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 27, offset: 9919},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 347, col: 32, offset: 9924},
								expr: &actionExpr{
									pos: position{line: 347, col: 33, offset: 9925},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 347, col: 33, offset: 9925},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 347, col: 33, offset: 9925},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 347, col: 35, offset: 9927},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 347, col: 37, offset: 9929},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 361, col: 1, offset: 10348},
			expr: &actionExpr{
				pos: position{line: 361, col: 12, offset: 10359},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 12, offset: 10359},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 361, col: 17, offset: 10364},
						expr: &actionExpr{
							pos: position{line: 361, col: 18, offset: 10365},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 361, col: 18, offset: 10365},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 361, col: 18, offset: 10365},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 361, col: 20, offset: 10367},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 361, col: 22, offset: 10369},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 363, col: 1, offset: 10425},
			expr: &choiceExpr{
				pos: position{line: 364, col: 5, offset: 10437},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10437},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 364, col: 5, offset: 10437},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10512},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10512},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 365, col: 14, offset: 10521},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 365, col: 16, offset: 10523},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 365, col: 23, offset: 10530},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 365, col: 24, offset: 10531},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 365, col: 24, offset: 10531},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 365, col: 34, offset: 10541},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 367, col: 1, offset: 10655},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 10667},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 10667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 10667},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 368, col: 12, offset: 10674},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 368, col: 18, offset: 10680},
								expr: &actionExpr{
									pos: position{line: 368, col: 19, offset: 10681},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 368, col: 19, offset: 10681},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 368, col: 19, offset: 10681},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 368, col: 21, offset: 10683},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 368, col: 23, offset: 10685},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 47, offset: 10709},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 368, col: 53, offset: 10715},
								expr: &seqExpr{
									pos: position{line: 368, col: 54, offset: 10716},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 368, col: 54, offset: 10716},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 368, col: 56, offset: 10718},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 67, offset: 10729},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 368, col: 74, offset: 10736},
								expr: &actionExpr{
									pos: position{line: 368, col: 75, offset: 10737},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 368, col: 75, offset: 10737},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 368, col: 75, offset: 10737},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 368, col: 77, offset: 10739},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 368, col: 79, offset: 10741},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 382, col: 1, offset: 11092},
			expr: &actionExpr{
				pos: position{line: 383, col: 5, offset: 11104},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 383, col: 5, offset: 11104},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 5, offset: 11104},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 12, offset: 11111},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 14, offset: 11113},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 22, offset: 11121},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 387, col: 1, offset: 11223},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11236},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 5, offset: 11236},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 13, offset: 11244},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 15, offset: 11246},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 23, offset: 11254},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 392, col: 1, offset: 11357},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 11370},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 11370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 11370},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 393, col: 13, offset: 11378},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 15, offset: 11380},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 23, offset: 11388},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 397, col: 1, offset: 11486},
			expr: &choiceExpr{
				pos: position{line: 398, col: 5, offset: 11499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 11499},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 11499},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 398, col: 5, offset: 11499},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 398, col: 13, offset: 11507},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 398, col: 15, offset: 11509},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 398, col: 21, offset: 11515},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11597},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 399, col: 5, offset: 11597},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 401, col: 1, offset: 11675},
			expr: &choiceExpr{
				pos: position{line: 402, col: 5, offset: 11688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 11688},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 402, col: 5, offset: 11688},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 402, col: 5, offset: 11688},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 402, col: 13, offset: 11696},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 402, col: 15, offset: 11698},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 402, col: 21, offset: 11704},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11786},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 11786},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 405, col: 1, offset: 11864},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11879},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11879},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11879},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 15, offset: 11889},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 17, offset: 11891},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 20, offset: 11894},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 410, col: 1, offset: 11931},
			expr: &actionExpr{
				pos: position{line: 411, col: 5, offset: 11942},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 411, col: 5, offset: 11942},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 411, col: 10, offset: 11947},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 415, col: 1, offset: 12047},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 12060},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12060},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 416, col: 5, offset: 12060},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 12068},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 416, col: 15, offset: 12070},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12161},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 419, col: 5, offset: 12161},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 423, col: 1, offset: 12253},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 12265},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 12265},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 424, col: 5, offset: 12265},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 424, col: 12, offset: 12272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 14, offset: 12274},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 22, offset: 12282},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 428, col: 1, offset: 12385},
			expr: &actionExpr{
				pos: position{line: 429, col: 5, offset: 12400},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 429, col: 5, offset: 12400},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 5, offset: 12400},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 429, col: 15, offset: 12410},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 17, offset: 12412},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 23, offset: 12418},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 34, offset: 12429},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 429, col: 39, offset: 12434},
								expr: &actionExpr{
									pos: position{line: 429, col: 40, offset: 12435},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 429, col: 40, offset: 12435},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 429, col: 40, offset: 12435},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 429, col: 43, offset: 12438},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 429, col: 47, offset: 12442},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 429, col: 50, offset: 12445},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 429, col: 53, offset: 12448},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 437, col: 1, offset: 12859},
			expr: &actionExpr{
				pos: position{line: 438, col: 5, offset: 12872},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 438, col: 5, offset: 12872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 438, col: 5, offset: 12872},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 438, col: 13, offset: 12880},
							expr: &seqExpr{
								pos: position{line: 438, col: 15, offset: 12882},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 438, col: 15, offset: 12882},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 438, col: 18, offset: 12885},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 442, col: 1, offset: 12958},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 12972},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 443, col: 5, offset: 12972},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 447, col: 1, offset: 13050},
			expr: &choiceExpr{
				pos: position{line: 448, col: 5, offset: 13063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 448, col: 5, offset: 13063},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 448, col: 5, offset: 13063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 448, col: 5, offset: 13063},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 448, col: 10, offset: 13068},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 448, col: 19, offset: 13077},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 27, offset: 13085},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 448, col: 29, offset: 13087},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 448, col: 37, offset: 13095},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 45, offset: 13103},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 448, col: 48, offset: 13106},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 52, offset: 13110},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 448, col: 55, offset: 13113},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 448, col: 64, offset: 13122},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 448, col: 72, offset: 13130},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 448, col: 80, offset: 13138},
										expr: &seqExpr{
											pos: position{line: 448, col: 81, offset: 13139},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 448, col: 81, offset: 13139},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 448, col: 83, offset: 13141},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13413},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 455, col: 5, offset: 13413},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 10, offset: 13418},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 455, col: 20, offset: 13428},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 28, offset: 13436},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 30, offset: 13438},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 34, offset: 13442},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 455, col: 42, offset: 13450},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 455, col: 50, offset: 13458},
										expr: &seqExpr{
											pos: position{line: 455, col: 51, offset: 13459},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 455, col: 51, offset: 13459},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 455, col: 53, offset: 13461},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKind",
			pos:  position{line: 463, col: 1, offset: 13721},
			expr: &choiceExpr{
				pos: position{line: 464, col: 5, offset: 13734},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13734},
						run: (*parser).callonJoinKind2,
						expr: &seqExpr{
							pos: position{line: 464, col: 5, offset: 13734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 464, col: 5, offset: 13734},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 464, col: 14, offset: 13743},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13773},
						run: (*parser).callonJoinKind6,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 465, col: 5, offset: 13773},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 465, col: 14, offset: 13782},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13811},
						run: (*parser).callonJoinKind10,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 13811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 466, col: 5, offset: 13811},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 14, offset: 13820},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13850},
						run: (*parser).callonJoinKind14,
						expr: &litMatcher{
							pos:        position{line: 467, col: 5, offset: 13850},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 469, col: 1, offset: 13886},
			expr: &choiceExpr{
				pos: position{line: 470, col: 5, offset: 13898},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 5, offset: 13898},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13907},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13907},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 471, col: 5, offset: 13907},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 471, col: 9, offset: 13911},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 14, offset: 13916},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 471, col: 19, offset: 13921},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 473, col: 1, offset: 13947},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 13961},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 13961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 474, col: 5, offset: 13961},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 474, col: 14, offset: 13970},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 16, offset: 13972},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 511, col: 1, offset: 15302},
			expr: &choiceExpr{
				pos: position{line: 512, col: 5, offset: 15316},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 512, col: 5, offset: 15316},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 512, col: 5, offset: 15316},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 512, col: 5, offset: 15316},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 512, col: 7, offset: 15318},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 512, col: 12, offset: 15323},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15352},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 513, col: 5, offset: 15352},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 515, col: 1, offset: 15414},
			expr: &ruleRefExpr{
				pos:  position{line: 515, col: 8, offset: 15421},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 517, col: 1, offset: 15432},
			expr: &ruleRefExpr{
				pos:  position{line: 517, col: 13, offset: 15444},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 519, col: 1, offset: 15450},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 15465},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 15465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 520, col: 5, offset: 15465},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 11, offset: 15471},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 21, offset: 15481},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 520, col: 26, offset: 15486},
								expr: &seqExpr{
									pos: position{line: 520, col: 27, offset: 15487},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 520, col: 27, offset: 15487},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 520, col: 30, offset: 15490},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 520, col: 34, offset: 15494},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 520, col: 37, offset: 15497},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 530, col: 1, offset: 15696},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15706},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 531, col: 5, offset: 15706},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 15712},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 531, col: 16, offset: 15717},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 531, col: 21, offset: 15722},
								expr: &seqExpr{
									pos: position{line: 531, col: 22, offset: 15723},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 531, col: 22, offset: 15723},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 531, col: 25, offset: 15726},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 531, col: 29, offset: 15730},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 531, col: 32, offset: 15733},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 541, col: 1, offset: 15927},
			expr: &actionExpr{
				pos: position{line: 542, col: 5, offset: 15942},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 542, col: 5, offset: 15942},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 542, col: 5, offset: 15942},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 9, offset: 15946},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 14, offset: 15951},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 542, col: 17, offset: 15954},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 21, offset: 15958},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 24, offset: 15961},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 28, offset: 15965},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 544, col: 1, offset: 16054},
			expr: &ruleRefExpr{
				pos:  position{line: 544, col: 8, offset: 16061},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 546, col: 1, offset: 16078},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16098},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16098},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 547, col: 5, offset: 16098},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 15, offset: 16108},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 29, offset: 16122},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 547, col: 32, offset: 16125},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 36, offset: 16129},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 39, offset: 16132},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 50, offset: 16143},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 55, offset: 16148},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 547, col: 58, offset: 16151},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 62, offset: 16155},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 65, offset: 16158},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 76, offset: 16169},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16316},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 552, col: 1, offset: 16331},
			expr: &actionExpr{
				pos: position{line: 553, col: 5, offset: 16349},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 553, col: 5, offset: 16349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 16349},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 11, offset: 16355},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16374},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 554, col: 10, offset: 16379},
								expr: &actionExpr{
									pos: position{line: 554, col: 11, offset: 16380},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 554, col: 11, offset: 16380},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 554, col: 11, offset: 16380},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 554, col: 14, offset: 16383},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 554, col: 17, offset: 16386},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 554, col: 25, offset: 16394},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 554, col: 28, offset: 16397},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 554, col: 33, offset: 16402},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 558, col: 1, offset: 16520},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16539},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 5, offset: 16539},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 11, offset: 16545},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 16569},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 10, offset: 16574},
								expr: &actionExpr{
									pos: position{line: 560, col: 11, offset: 16575},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 560, col: 11, offset: 16575},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 560, col: 11, offset: 16575},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 14, offset: 16578},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 17, offset: 16581},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 560, col: 26, offset: 16590},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 29, offset: 16593},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 34, offset: 16598},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 564, col: 1, offset: 16721},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16745},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16745},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 16745},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 11, offset: 16751},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16768},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 10, offset: 16773},
								expr: &actionExpr{
									pos: position{line: 566, col: 11, offset: 16774},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 566, col: 11, offset: 16774},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 566, col: 11, offset: 16774},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 14, offset: 16777},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 19, offset: 16782},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 566, col: 38, offset: 16801},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 41, offset: 16804},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 46, offset: 16809},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 570, col: 1, offset: 16927},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 16948},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 571, col: 6, offset: 16949},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 6, offset: 16949},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 571, col: 12, offset: 16955},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 573, col: 1, offset: 16993},
			expr: &choiceExpr{
				pos: position{line: 574, col: 5, offset: 17016},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 574, col: 5, offset: 17016},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 17037},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 575, col: 5, offset: 17037},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 577, col: 1, offset: 17074},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17091},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17091},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 5, offset: 17091},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 17097},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 17114},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 10, offset: 17119},
								expr: &actionExpr{
									pos: position{line: 579, col: 11, offset: 17120},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 579, col: 11, offset: 17120},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 579, col: 11, offset: 17120},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 14, offset: 17123},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 17, offset: 17126},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 579, col: 34, offset: 17143},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 37, offset: 17146},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 42, offset: 17151},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 583, col: 1, offset: 17267},
			expr: &actionExpr{
				pos: position{line: 583, col: 20, offset: 17286},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 583, col: 21, offset: 17287},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 21, offset: 17287},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 28, offset: 17294},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 34, offset: 17300},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 41, offset: 17307},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 585, col: 1, offset: 17344},
			expr: &actionExpr{
				pos: position{line: 586, col: 5, offset: 17361},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 586, col: 5, offset: 17361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 586, col: 5, offset: 17361},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 17367},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 17390},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 587, col: 10, offset: 17395},
								expr: &actionExpr{
									pos: position{line: 587, col: 11, offset: 17396},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 587, col: 11, offset: 17396},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 587, col: 11, offset: 17396},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 587, col: 14, offset: 17399},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 587, col: 17, offset: 17402},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 587, col: 34, offset: 17419},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 587, col: 37, offset: 17422},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 587, col: 42, offset: 17427},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 591, col: 1, offset: 17549},
			expr: &actionExpr{
				pos: position{line: 591, col: 20, offset: 17568},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 591, col: 21, offset: 17569},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 21, offset: 17569},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 591, col: 27, offset: 17575},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 593, col: 1, offset: 17612},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17635},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 17635},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 11, offset: 17641},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17653},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 595, col: 10, offset: 17658},
								expr: &actionExpr{
									pos: position{line: 595, col: 11, offset: 17659},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 595, col: 11, offset: 17659},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 595, col: 11, offset: 17659},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 595, col: 14, offset: 17662},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 595, col: 17, offset: 17665},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 595, col: 40, offset: 17688},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 595, col: 43, offset: 17691},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 595, col: 48, offset: 17696},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 599, col: 1, offset: 17807},
			expr: &actionExpr{
				pos: position{line: 599, col: 26, offset: 17832},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 599, col: 27, offset: 17833},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 599, col: 27, offset: 17833},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 599, col: 33, offset: 17839},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 601, col: 1, offset: 17876},
			expr: &choiceExpr{
				pos: position{line: 602, col: 5, offset: 17888},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 602, col: 5, offset: 17888},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 602, col: 5, offset: 17888},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 602, col: 5, offset: 17888},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 602, col: 9, offset: 17892},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 602, col: 12, offset: 17895},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 602, col: 14, offset: 17897},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 605, col: 5, offset: 18010},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 607, col: 1, offset: 18020},
			expr: &choiceExpr{
				pos: position{line: 608, col: 5, offset: 18033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 18033},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 18033},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 608, col: 5, offset: 18033},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 7, offset: 18035},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 16, offset: 18044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 19, offset: 18047},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 23, offset: 18051},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 26, offset: 18054},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 30, offset: 18058},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 611, col: 5, offset: 18162},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 613, col: 1, offset: 18172},
			expr: &choiceExpr{
				pos: position{line: 614, col: 5, offset: 18185},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 614, col: 5, offset: 18185},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18200},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18214},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 18230},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 617, col: 5, offset: 18230},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 617, col: 5, offset: 18230},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 11, offset: 18236},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 617, col: 20, offset: 18245},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 617, col: 25, offset: 18250},
										expr: &ruleRefExpr{
											pos:  position{line: 617, col: 26, offset: 18251},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 620, col: 5, offset: 18322},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 621, col: 5, offset: 18336},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 623, col: 1, offset: 18345},
			expr: &seqExpr{
				pos: position{line: 623, col: 13, offset: 18357},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 13, offset: 18357},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 623, col: 22, offset: 18366},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 623, col: 25, offset: 18369},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 625, col: 1, offset: 18374},
			expr: &choiceExpr{
				pos: position{line: 626, col: 5, offset: 18387},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 626, col: 5, offset: 18387},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 627, col: 5, offset: 18397},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 628, col: 5, offset: 18409},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 629, col: 5, offset: 18422},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 631, col: 1, offset: 18430},
			expr: &actionExpr{
				pos: position{line: 632, col: 5, offset: 18444},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 632, col: 5, offset: 18444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 5, offset: 18444},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 632, col: 13, offset: 18452},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 632, col: 16, offset: 18455},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 632, col: 20, offset: 18459},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 25, offset: 18464},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 39, offset: 18478},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 634, col: 1, offset: 18504},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 18519},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 18519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 635, col: 5, offset: 18519},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 14, offset: 18528},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 17, offset: 18531},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 21, offset: 18535},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 24, offset: 18538},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 29, offset: 18543},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 42, offset: 18556},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 45, offset: 18559},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 635, col: 49, offset: 18563},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 57, offset: 18571},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 643, col: 1, offset: 18967},
			expr: &choiceExpr{
				pos: position{line: 644, col: 5, offset: 18979},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 18979},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 5, offset: 18979},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 644, col: 13, offset: 18987},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 13, offset: 18987},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 19023},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 645, col: 5, offset: 19023},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 647, col: 1, offset: 19047},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 19058},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 19058},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 648, col: 5, offset: 19058},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 648, col: 8, offset: 19061},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 12, offset: 19065},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 15, offset: 19068},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 17, offset: 19070},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 650, col: 1, offset: 19098},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 19111},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 19111},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 651, col: 5, offset: 19111},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 19112},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 19122},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 19, offset: 19125},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 34, offset: 19140},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 37, offset: 19143},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 41, offset: 19147},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 44, offset: 19150},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 49, offset: 19155},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 62, offset: 19168},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 65, offset: 19171},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 655, col: 1, offset: 19277},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 19294},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 19294},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 19294},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 656, col: 5, offset: 19294},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 19300},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 656, col: 16, offset: 19305},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 656, col: 21, offset: 19310},
										expr: &actionExpr{
											pos: position{line: 656, col: 22, offset: 19311},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 656, col: 22, offset: 19311},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 656, col: 22, offset: 19311},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 656, col: 25, offset: 19314},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 656, col: 29, offset: 19318},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 656, col: 32, offset: 19321},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 34, offset: 19323},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19435},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 659, col: 5, offset: 19435},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 661, col: 1, offset: 19471},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 19485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19485},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19485},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 662, col: 5, offset: 19485},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 19491},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 662, col: 17, offset: 19497},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 662, col: 22, offset: 19502},
										expr: &ruleRefExpr{
											pos:  position{line: 662, col: 23, offset: 19503},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 19574},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 19574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 665, col: 5, offset: 19574},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 19580},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 665, col: 22, offset: 19591},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 665, col: 27, offset: 19596},
										expr: &ruleRefExpr{
											pos:  position{line: 665, col: 28, offset: 19597},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19668},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 668, col: 5, offset: 19668},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 672, col: 1, offset: 19741},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 19751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19751},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 19751},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 9, offset: 19755},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 15, offset: 19761},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 19985},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 19985},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 682, col: 5, offset: 19985},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 682, col: 9, offset: 19989},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 682, col: 13, offset: 19993},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 682, col: 18, offset: 19998},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 682, col: 23, offset: 20003},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 692, col: 1, offset: 20216},
			expr: &choiceExpr{
				pos: position{line: 693, col: 5, offset: 20226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20226},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 693, col: 5, offset: 20226},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 693, col: 9, offset: 20230},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 14, offset: 20235},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 27, offset: 20248},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 693, col: 30, offset: 20251},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 34, offset: 20255},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 693, col: 37, offset: 20258},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 40, offset: 20261},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 693, col: 53, offset: 20274},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20449},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 20449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 699, col: 5, offset: 20449},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 9, offset: 20453},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 699, col: 12, offset: 20456},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 16, offset: 20460},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 19, offset: 20463},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 22, offset: 20466},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 699, col: 35, offset: 20479},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20654},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 705, col: 5, offset: 20654},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 705, col: 9, offset: 20658},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 14, offset: 20663},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 27, offset: 20676},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 705, col: 30, offset: 20679},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 34, offset: 20683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 705, col: 37, offset: 20686},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20863},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 711, col: 5, offset: 20863},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 711, col: 9, offset: 20867},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 14, offset: 20872},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 711, col: 19, offset: 20877},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20926},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20926},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 712, col: 9, offset: 20930},
									expr: &litMatcher{
										pos:        position{line: 712, col: 11, offset: 20932},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 712, col: 16, offset: 20937},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 19, offset: 20940},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 714, col: 1, offset: 20991},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 21003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 715, col: 5, offset: 21003},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21015},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 21015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 21015},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 9, offset: 21019},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 716, col: 12, offset: 21022},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 17, offset: 21027},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 22, offset: 21032},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 716, col: 25, offset: 21035},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 718, col: 1, offset: 21061},
			expr: &choiceExpr{
				pos: position{line: 719, col: 5, offset: 21073},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21073},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 21089},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 21107},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 21125},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 21143},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 21162},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21179},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21198},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 21217},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 729, col: 1, offset: 21230},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 21248},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 730, col: 5, offset: 21248},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 730, col: 7, offset: 21250},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 734, col: 1, offset: 21360},
			expr: &actionExpr{
				pos: position{line: 735, col: 5, offset: 21378},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 735, col: 5, offset: 21378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 735, col: 5, offset: 21378},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 7, offset: 21380},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 735, col: 14, offset: 21387},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 15, offset: 21388},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 739, col: 1, offset: 21498},
			expr: &choiceExpr{
				pos: position{line: 740, col: 5, offset: 21516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21516},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21516},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 740, col: 5, offset: 21516},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 7, offset: 21518},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 740, col: 14, offset: 21525},
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 15, offset: 21526},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21638},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 743, col: 5, offset: 21638},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 7, offset: 21640},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 747, col: 1, offset: 21741},
			expr: &choiceExpr{
				pos: position{line: 748, col: 5, offset: 21760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 21760},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 748, col: 5, offset: 21760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 748, col: 5, offset: 21760},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 7, offset: 21762},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 748, col: 11, offset: 21766},
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 12, offset: 21767},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21878},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 751, col: 5, offset: 21878},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 7, offset: 21880},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 755, col: 1, offset: 21976},
			expr: &actionExpr{
				pos: position{line: 756, col: 5, offset: 21993},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 5, offset: 21993},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 756, col: 7, offset: 21995},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 760, col: 1, offset: 22105},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 22124},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 761, col: 5, offset: 22124},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 761, col: 7, offset: 22126},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 765, col: 1, offset: 22232},
			expr: &choiceExpr{
				pos: position{line: 766, col: 5, offset: 22251},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22251},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 766, col: 5, offset: 22251},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 22361},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 767, col: 5, offset: 22361},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 769, col: 1, offset: 22469},
			expr: &actionExpr{
				pos: position{line: 770, col: 5, offset: 22485},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 770, col: 5, offset: 22485},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 772, col: 1, offset: 22588},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22604},
				run: (*parser).callonTypeLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 773, col: 5, offset: 22604},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 773, col: 9, offset: 22608},
						name: "TypeExternal",
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 777, col: 1, offset: 22702},
			expr: &choiceExpr{
				pos: position{line: 778, col: 5, offset: 22715},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 22715},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 779, col: 5, offset: 22732},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 781, col: 1, offset: 22747},
			expr: &choiceExpr{
				pos: position{line: 782, col: 5, offset: 22764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 22764},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 22764},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 782, col: 5, offset: 22764},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 12, offset: 22771},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 782, col: 15, offset: 22774},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 19, offset: 22778},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 782, col: 22, offset: 22781},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 26, offset: 22785},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 31, offset: 22790},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 782, col: 34, offset: 22793},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 22820},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 22820},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 783, col: 5, offset: 22820},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 12, offset: 22827},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 15, offset: 22830},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 19, offset: 22834},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 22, offset: 22837},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 26, offset: 22841},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 36, offset: 22851},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 39, offset: 22854},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 22882},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 22898},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 22898},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 785, col: 5, offset: 22898},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 9, offset: 22902},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 785, col: 31, offset: 22924},
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 32, offset: 22925},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 787, col: 1, offset: 22961},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 22970},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 5, offset: 22970},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 22988},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 791, col: 1, offset: 23001},
			expr: &choiceExpr{
				pos: position{line: 792, col: 5, offset: 23019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 23019},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 792, col: 5, offset: 23019},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 795, col: 5, offset: 23097},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 795, col: 10, offset: 23102},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23120},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 796, col: 5, offset: 23120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 796, col: 5, offset: 23120},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 796, col: 10, offset: 23125},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 796, col: 25, offset: 23140},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 796, col: 28, offset: 23143},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 796, col: 32, offset: 23147},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 796, col: 35, offset: 23150},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 796, col: 39, offset: 23154},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 796, col: 42, offset: 23157},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 796, col: 46, offset: 23161},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 796, col: 51, offset: 23166},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 796, col: 54, offset: 23169},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 23268},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23268},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 10, offset: 23273},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 802, col: 5, offset: 23373},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 802, col: 5, offset: 23373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 802, col: 5, offset: 23373},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 802, col: 9, offset: 23377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 802, col: 12, offset: 23380},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 802, col: 14, offset: 23382},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 802, col: 25, offset: 23393},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 804, col: 1, offset: 23416},
			expr: &actionExpr{
				pos: position{line: 805, col: 5, offset: 23430},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 805, col: 5, offset: 23430},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 805, col: 11, offset: 23436},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 809, col: 1, offset: 23530},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 23543},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 810, col: 5, offset: 23543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 23543},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 23549},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 16, offset: 23554},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 810, col: 21, offset: 23559},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 21, offset: 23559},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 814, col: 1, offset: 23653},
			expr: &actionExpr{
				pos: position{line: 814, col: 16, offset: 23668},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 814, col: 16, offset: 23668},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 814, col: 16, offset: 23668},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 814, col: 19, offset: 23671},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 23, offset: 23675},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 814, col: 26, offset: 23678},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 30, offset: 23682},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 816, col: 1, offset: 23708},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 23724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23724},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 23724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 817, col: 5, offset: 23724},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 9, offset: 23728},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 817, col: 12, offset: 23731},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 19, offset: 23738},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 33, offset: 23752},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 817, col: 36, offset: 23755},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23848},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 820, col: 5, offset: 23848},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 9, offset: 23852},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 12, offset: 23855},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 16, offset: 23859},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 21, offset: 23864},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 820, col: 24, offset: 23867},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 23954},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 23954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 823, col: 5, offset: 23954},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 10, offset: 23959},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 823, col: 13, offset: 23962},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 17, offset: 23966},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 22, offset: 23971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 823, col: 25, offset: 23974},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 24060},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 826, col: 5, offset: 24060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 826, col: 5, offset: 24060},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 10, offset: 24065},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 826, col: 13, offset: 24068},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 21, offset: 24076},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 26, offset: 24081},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 826, col: 29, offset: 24084},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 33, offset: 24088},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 826, col: 36, offset: 24091},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 44, offset: 24099},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 49, offset: 24104},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 826, col: 52, offset: 24107},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 830, col: 1, offset: 24219},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 24237},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 831, col: 5, offset: 24237},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 832, col: 5, offset: 24263},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 838, col: 1, offset: 24522},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24548},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 839, col: 9, offset: 24552},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 9, offset: 24552},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 839, col: 19, offset: 24562},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 839, col: 30, offset: 24573},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 839, col: 41, offset: 24584},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 9, offset: 24601},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 18, offset: 24610},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 28, offset: 24620},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 38, offset: 24630},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 9, offset: 24646},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 9, offset: 24664},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 18, offset: 24673},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 851, col: 1, offset: 25155},
			expr: &actionExpr{
				pos: position{line: 852, col: 5, offset: 25181},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 852, col: 9, offset: 25185},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 852, col: 9, offset: 25185},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 852, col: 22, offset: 25198},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 853, col: 9, offset: 25213},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 854, col: 9, offset: 25229},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 855, col: 9, offset: 25247},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 855, col: 16, offset: 25254},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 856, col: 9, offset: 25268},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 856, col: 18, offset: 25277},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 860, col: 1, offset: 25392},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 25410},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 25410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 25410},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 11, offset: 25416},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 21, offset: 25426},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 861, col: 26, offset: 25431},
								expr: &ruleRefExpr{
									pos:  position{line: 861, col: 26, offset: 25431},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 865, col: 1, offset: 25530},
			expr: &actionExpr{
				pos: position{line: 865, col: 21, offset: 25550},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 865, col: 21, offset: 25550},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 865, col: 21, offset: 25550},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 865, col: 24, offset: 25553},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 865, col: 28, offset: 25557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 865, col: 31, offset: 25560},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 35, offset: 25564},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 867, col: 1, offset: 25595},
			expr: &actionExpr{
				pos: position{line: 868, col: 5, offset: 25609},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 868, col: 5, offset: 25609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 868, col: 5, offset: 25609},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 10, offset: 25614},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 868, col: 25, offset: 25629},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 868, col: 28, offset: 25632},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 868, col: 32, offset: 25636},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 868, col: 35, offset: 25639},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 39, offset: 25643},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 872, col: 1, offset: 25725},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 25743},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 873, col: 5, offset: 25743},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 873, col: 24, offset: 25762},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 875, col: 1, offset: 25780},
			expr: &actionExpr{
				pos: position{line: 875, col: 12, offset: 25791},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 875, col: 12, offset: 25791},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 877, col: 1, offset: 25821},
			expr: &actionExpr{
				pos: position{line: 877, col: 11, offset: 25831},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 877, col: 11, offset: 25831},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 879, col: 1, offset: 25859},
			expr: &actionExpr{
				pos: position{line: 879, col: 11, offset: 25869},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 879, col: 11, offset: 25869},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 881, col: 1, offset: 25897},
			expr: &actionExpr{
				pos: position{line: 881, col: 12, offset: 25908},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 881, col: 12, offset: 25908},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 883, col: 1, offset: 25938},
			expr: &actionExpr{
				pos: position{line: 883, col: 11, offset: 25948},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 883, col: 11, offset: 25948},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 885, col: 1, offset: 25976},
			expr: &charClassMatcher{
				pos:        position{line: 885, col: 19, offset: 25994},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 887, col: 1, offset: 26006},
			expr: &choiceExpr{
				pos: position{line: 887, col: 18, offset: 26023},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 887, col: 18, offset: 26023},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 887, col: 36, offset: 26041},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 889, col: 1, offset: 26048},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 26063},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 5, offset: 26063},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 890, col: 8, offset: 26066},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 892, col: 1, offset: 26153},
			expr: &choiceExpr{
				pos: position{line: 893, col: 5, offset: 26172},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 26172},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 26172},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 893, col: 5, offset: 26172},
									expr: &seqExpr{
										pos: position{line: 893, col: 7, offset: 26174},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 893, col: 7, offset: 26174},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 893, col: 15, offset: 26182},
												expr: &ruleRefExpr{
													pos:  position{line: 893, col: 16, offset: 26183},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 893, col: 32, offset: 26199},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 893, col: 48, offset: 26215},
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 48, offset: 26215},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 26267},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 894, col: 5, offset: 26267},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 26306},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 895, col: 5, offset: 26306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 895, col: 5, offset: 26306},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 895, col: 10, offset: 26311},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 13, offset: 26314},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 26405},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 897, col: 5, offset: 26405},
							val:        "type",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 900, col: 1, offset: 26445},
			expr: &choiceExpr{
				pos: position{line: 901, col: 5, offset: 26457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 901, col: 5, offset: 26457},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 902, col: 5, offset: 26476},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 26492},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 904, col: 5, offset: 26509},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 906, col: 1, offset: 26522},
			expr: &choiceExpr{
				pos: position{line: 907, col: 5, offset: 26535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 5, offset: 26535},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 908, col: 5, offset: 26547},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 909, col: 5, offset: 26559},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 910, col: 5, offset: 26569},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 910, col: 5, offset: 26569},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 910, col: 11, offset: 26575},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 910, col: 13, offset: 26577},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 910, col: 19, offset: 26583},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 910, col: 21, offset: 26585},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 5, offset: 26597},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 5, offset: 26606},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 914, col: 1, offset: 26613},
			expr: &choiceExpr{
				pos: position{line: 915, col: 5, offset: 26630},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 915, col: 5, offset: 26630},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 26644},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 26657},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 918, col: 5, offset: 26668},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 919, col: 5, offset: 26678},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 921, col: 1, offset: 26683},
			expr: &choiceExpr{
				pos: position{line: 922, col: 5, offset: 26700},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 922, col: 5, offset: 26700},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 923, col: 5, offset: 26714},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 924, col: 5, offset: 26727},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 925, col: 5, offset: 26738},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 926, col: 5, offset: 26748},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 928, col: 1, offset: 26753},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26768},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 929, col: 5, offset: 26768},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 930, col: 5, offset: 26780},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 931, col: 5, offset: 26790},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 932, col: 5, offset: 26799},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 933, col: 5, offset: 26807},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 935, col: 1, offset: 26815},
			expr: &choiceExpr{
				pos: position{line: 935, col: 13, offset: 26827},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 935, col: 13, offset: 26827},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 935, col: 20, offset: 26834},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 935, col: 26, offset: 26840},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 937, col: 1, offset: 26845},
			expr: &choiceExpr{
				pos: position{line: 937, col: 14, offset: 26858},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 937, col: 14, offset: 26858},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 937, col: 22, offset: 26866},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 937, col: 29, offset: 26873},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 937, col: 35, offset: 26879},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 937, col: 40, offset: 26884},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 939, col: 1, offset: 26889},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 26901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26901},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 940, col: 5, offset: 26901},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 26987},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 26987},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 941, col: 5, offset: 26987},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 9, offset: 26991},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 14, offset: 26996},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 17, offset: 26999},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 943, col: 1, offset: 27088},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 27100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 27100},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 944, col: 5, offset: 27100},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 27187},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 945, col: 5, offset: 27187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 27187},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 9, offset: 27191},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 945, col: 14, offset: 27196},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 945, col: 17, offset: 27199},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 947, col: 1, offset: 27297},
			expr: &choiceExpr{
				pos: position{line: 948, col: 5, offset: 27307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 27307},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 948, col: 5, offset: 27307},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 27394},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 949, col: 5, offset: 27394},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 5, offset: 27394},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 9, offset: 27398},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 949, col: 14, offset: 27403},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 949, col: 17, offset: 27406},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 951, col: 1, offset: 27504},
			expr: &choiceExpr{
				pos: position{line: 952, col: 5, offset: 27513},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 27513},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 952, col: 5, offset: 27513},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 27602},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 27602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 27602},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 9, offset: 27606},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 14, offset: 27611},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 17, offset: 27614},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 955, col: 1, offset: 27716},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 27726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 27726},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 956, col: 5, offset: 27726},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 27818},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 957, col: 5, offset: 27818},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 957, col: 5, offset: 27818},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 9, offset: 27822},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 957, col: 14, offset: 27827},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 957, col: 17, offset: 27830},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 960, col: 1, offset: 27961},
			expr: &actionExpr{
				pos: position{line: 961, col: 5, offset: 27968},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 961, col: 5, offset: 27968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 961, col: 5, offset: 27968},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 961, col: 10, offset: 27973},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 14, offset: 27977},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 961, col: 19, offset: 27982},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 23, offset: 27986},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 961, col: 28, offset: 27991},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 32, offset: 27995},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 963, col: 1, offset: 28032},
			expr: &actionExpr{
				pos: position{line: 964, col: 5, offset: 28040},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 964, col: 5, offset: 28040},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 964, col: 5, offset: 28040},
							expr: &seqExpr{
								pos: position{line: 964, col: 8, offset: 28043},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 964, col: 8, offset: 28043},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 964, col: 12, offset: 28047},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 16, offset: 28051},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 964, col: 20, offset: 28055},
										expr: &choiceExpr{
											pos: position{line: 964, col: 22, offset: 28057},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 964, col: 22, offset: 28057},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 964, col: 33, offset: 28068},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 964, col: 39, offset: 28074},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 41, offset: 28076},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 968, col: 1, offset: 28240},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 28258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 28258},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 28258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 5, offset: 28258},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 969, col: 7, offset: 28260},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 7, offset: 28260},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 969, col: 17, offset: 28270},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 19, offset: 28272},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 28336},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 28336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 28336},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 7, offset: 28338},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 972, col: 11, offset: 28342},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 972, col: 13, offset: 28344},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 13, offset: 28344},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 23, offset: 28354},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 972, col: 28, offset: 28359},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 972, col: 30, offset: 28361},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 30, offset: 28361},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 972, col: 40, offset: 28371},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 42, offset: 28373},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 28472},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 975, col: 5, offset: 28472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 975, col: 5, offset: 28472},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 975, col: 10, offset: 28477},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 975, col: 12, offset: 28479},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 12, offset: 28479},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 975, col: 22, offset: 28489},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 975, col: 24, offset: 28491},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 28562},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 978, col: 5, offset: 28562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 978, col: 5, offset: 28562},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 7, offset: 28564},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 978, col: 11, offset: 28568},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 978, col: 13, offset: 28570},
										expr: &ruleRefExpr{
											pos:  position{line: 978, col: 13, offset: 28570},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 978, col: 23, offset: 28580},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 28648},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 981, col: 5, offset: 28648},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 985, col: 1, offset: 28685},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 28697},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 28697},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 28704},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 989, col: 1, offset: 28709},
			expr: &actionExpr{
				pos: position{line: 989, col: 12, offset: 28720},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 989, col: 12, offset: 28720},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 989, col: 12, offset: 28720},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 989, col: 16, offset: 28724},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 18, offset: 28726},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 991, col: 1, offset: 28764},
			expr: &actionExpr{
				pos: position{line: 991, col: 12, offset: 28775},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 991, col: 12, offset: 28775},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 991, col: 12, offset: 28775},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 14, offset: 28777},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 991, col: 18, offset: 28781},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 993, col: 1, offset: 28819},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28830},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 994, col: 5, offset: 28830},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 994, col: 5, offset: 28830},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 7, offset: 28832},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 994, col: 10, offset: 28835},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 994, col: 14, offset: 28839},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 16, offset: 28841},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 998, col: 1, offset: 28914},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 28925},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 999, col: 5, offset: 28925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 999, col: 5, offset: 28925},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 7, offset: 28927},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 11, offset: 28931},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 999, col: 15, offset: 28935},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 17, offset: 28937},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1003, col: 1, offset: 29000},
			expr: &actionExpr{
				pos: position{line: 1004, col: 4, offset: 29008},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 4, offset: 29008},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1004, col: 6, offset: 29010},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1006, col: 1, offset: 29050},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 29064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 29064},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 29079},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1010, col: 1, offset: 29095},
			expr: &actionExpr{
				pos: position{line: 1010, col: 14, offset: 29108},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1010, col: 14, offset: 29108},
					expr: &charClassMatcher{
						pos:        position{line: 1010, col: 14, offset: 29108},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1012, col: 1, offset: 29147},
			expr: &actionExpr{
				pos: position{line: 1013, col: 5, offset: 29166},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 5, offset: 29166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1013, col: 5, offset: 29166},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1013, col: 9, offset: 29170},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1015, col: 1, offset: 29213},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 29229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 29229},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 5, offset: 29229},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1016, col: 5, offset: 29229},
									expr: &litMatcher{
										pos:        position{line: 1016, col: 5, offset: 29229},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1016, col: 10, offset: 29234},
									expr: &charClassMatcher{
										pos:        position{line: 1016, col: 10, offset: 29234},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1016, col: 17, offset: 29241},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1016, col: 21, offset: 29245},
									expr: &charClassMatcher{
										pos:        position{line: 1016, col: 21, offset: 29245},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1016, col: 28, offset: 29252},
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 28, offset: 29252},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 29311},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 29311},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1019, col: 5, offset: 29311},
									expr: &litMatcher{
										pos:        position{line: 1019, col: 5, offset: 29311},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 10, offset: 29316},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1019, col: 14, offset: 29320},
									expr: &charClassMatcher{
										pos:        position{line: 1019, col: 14, offset: 29320},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1019, col: 21, offset: 29327},
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 21, offset: 29327},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1023, col: 1, offset: 29383},
			expr: &seqExpr{
				pos: position{line: 1023, col: 16, offset: 29398},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1023, col: 16, offset: 29398},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1023, col: 21, offset: 29403},
						expr: &charClassMatcher{
							pos:        position{line: 1023, col: 21, offset: 29403},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 27, offset: 29409},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1025, col: 1, offset: 29421},
			expr: &actionExpr{
				pos: position{line: 1025, col: 7, offset: 29427},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1025, col: 7, offset: 29427},
					expr: &ruleRefExpr{
						pos:  position{line: 1025, col: 7, offset: 29427},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1027, col: 1, offset: 29469},
			expr: &charClassMatcher{
				pos:        position{line: 1027, col: 12, offset: 29480},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1030, col: 1, offset: 29494},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 5, offset: 29511},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29511},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 29511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1031, col: 5, offset: 29511},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 9, offset: 29515},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1031, col: 11, offset: 29517},
										expr: &ruleRefExpr{
											pos:  position{line: 1031, col: 11, offset: 29517},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1031, col: 29, offset: 29535},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 29572},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1032, col: 5, offset: 29572},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1032, col: 5, offset: 29572},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 9, offset: 29576},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1032, col: 11, offset: 29578},
										expr: &ruleRefExpr{
											pos:  position{line: 1032, col: 11, offset: 29578},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 29, offset: 29596},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1034, col: 1, offset: 29630},
			expr: &choiceExpr{
				pos: position{line: 1035, col: 5, offset: 29651},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29651},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1035, col: 5, offset: 29651},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1035, col: 5, offset: 29651},
									expr: &choiceExpr{
										pos: position{line: 1035, col: 7, offset: 29653},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1035, col: 7, offset: 29653},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1035, col: 13, offset: 29659},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1035, col: 26, offset: 29672,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29709},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 29709},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1036, col: 5, offset: 29709},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1036, col: 10, offset: 29714},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 12, offset: 29716},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1038, col: 1, offset: 29750},
			expr: &actionExpr{
				pos: position{line: 1039, col: 5, offset: 29762},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 5, offset: 29762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 5, offset: 29762},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 10, offset: 29767},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 23, offset: 29780},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1039, col: 28, offset: 29785},
								expr: &ruleRefExpr{
									pos:  position{line: 1039, col: 28, offset: 29785},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1041, col: 1, offset: 29847},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 29864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 29864},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 1042, col: 5, offset: 29864},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 29916},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1045, col: 1, offset: 29928},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 29944},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29944},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1047, col: 5, offset: 29961},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1049, col: 1, offset: 29968},
			expr: &actionExpr{
				pos: position{line: 1049, col: 14, offset: 29981},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 14, offset: 29981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1049, col: 14, offset: 29981},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 19, offset: 29986},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1049, col: 22, offset: 29989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1049, col: 22, offset: 29989},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 38, offset: 30005},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1051, col: 1, offset: 30041},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 30062},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 30062},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 30062},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 5, offset: 30062},
									expr: &choiceExpr{
										pos: position{line: 1052, col: 7, offset: 30064},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1052, col: 7, offset: 30064},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1052, col: 13, offset: 30070},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1052, col: 26, offset: 30083,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 30120},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1053, col: 5, offset: 30120},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1053, col: 5, offset: 30120},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1053, col: 10, offset: 30125},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1053, col: 12, offset: 30127},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1055, col: 1, offset: 30161},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 30180},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 30180},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 30180},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1056, col: 5, offset: 30180},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 9, offset: 30184},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 18, offset: 30193},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 5, offset: 30244},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 5, offset: 30265},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1060, col: 1, offset: 30280},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 30301},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1061, col: 5, offset: 30301},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1062, col: 5, offset: 30309},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1063, col: 5, offset: 30318},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 30327},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1064, col: 5, offset: 30327},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 30356},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1065, col: 5, offset: 30356},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 30385},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1066, col: 5, offset: 30385},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 30414},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1067, col: 5, offset: 30414},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 30443},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1068, col: 5, offset: 30443},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30472},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1069, col: 5, offset: 30472},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1071, col: 1, offset: 30498},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 5, offset: 30516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 30516},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1072, col: 5, offset: 30516},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30544},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1073, col: 5, offset: 30544},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1074, col: 5, offset: 30574},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1076, col: 1, offset: 30580},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 30598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30598},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 30598},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 5, offset: 30598},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 9, offset: 30602},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1077, col: 16, offset: 30609},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1077, col: 16, offset: 30609},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1077, col: 25, offset: 30618},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1077, col: 34, offset: 30627},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1077, col: 43, offset: 30636},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30699},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30699},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1080, col: 9, offset: 30703},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 13, offset: 30707},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1080, col: 20, offset: 30714},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1080, col: 20, offset: 30714},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1080, col: 29, offset: 30723},
												expr: &ruleRefExpr{
													pos:  position{line: 1080, col: 29, offset: 30723},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1080, col: 39, offset: 30733},
												expr: &ruleRefExpr{
													pos:  position{line: 1080, col: 39, offset: 30733},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1080, col: 49, offset: 30743},
												expr: &ruleRefExpr{
													pos:  position{line: 1080, col: 49, offset: 30743},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1080, col: 59, offset: 30753},
												expr: &ruleRefExpr{
													pos:  position{line: 1080, col: 59, offset: 30753},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1080, col: 69, offset: 30763},
												expr: &ruleRefExpr{
													pos:  position{line: 1080, col: 69, offset: 30763},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1080, col: 80, offset: 30774},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1084, col: 1, offset: 30828},
			expr: &actionExpr{
				pos: position{line: 1085, col: 5, offset: 30839},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 5, offset: 30839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1085, col: 5, offset: 30839},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1085, col: 9, offset: 30843},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1085, col: 14, offset: 30848},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1085, col: 25, offset: 30859},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1087, col: 1, offset: 30885},
			expr: &actionExpr{
				pos: position{line: 1088, col: 5, offset: 30900},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1088, col: 5, offset: 30900},
					expr: &choiceExpr{
						pos: position{line: 1088, col: 6, offset: 30901},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1088, col: 6, offset: 30901},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1088, col: 13, offset: 30908},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1090, col: 1, offset: 30948},
			expr: &charClassMatcher{
				pos:        position{line: 1091, col: 5, offset: 30964},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1093, col: 1, offset: 30979},
			expr: &oneOrMoreExpr{
				pos: position{line: 1093, col: 6, offset: 30984},
				expr: &ruleRefExpr{
					pos:  position{line: 1093, col: 6, offset: 30984},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1095, col: 1, offset: 30995},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1095, col: 6, offset: 31000},
				expr: &ruleRefExpr{
					pos:  position{line: 1095, col: 6, offset: 31000},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1097, col: 1, offset: 31011},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 31024},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1098, col: 5, offset: 31024},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 5, offset: 31039},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 5, offset: 31058},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1102, col: 1, offset: 31067},
			expr: &anyMatcher{
				line: 1103, col: 5, offset: 31087,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1105, col: 1, offset: 31090},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 5, offset: 31118},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1106, col: 5, offset: 31118},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1107, col: 5, offset: 31127},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1108, col: 5, offset: 31136},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1109, col: 5, offset: 31145},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1110, col: 5, offset: 31153},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1111, col: 5, offset: 31166},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1113, col: 1, offset: 31176},
			expr: &charClassMatcher{
				pos:        position{line: 1114, col: 5, offset: 31195},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1120, col: 1, offset: 31525},
			expr: &ruleRefExpr{
				pos:  position{line: 1123, col: 5, offset: 31596},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1125, col: 1, offset: 31615},
			expr: &seqExpr{
				pos: position{line: 1126, col: 5, offset: 31636},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1126, col: 5, offset: 31636},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1126, col: 10, offset: 31641},
						expr: &seqExpr{
							pos: position{line: 1126, col: 11, offset: 31642},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1126, col: 11, offset: 31642},
									expr: &litMatcher{
										pos:        position{line: 1126, col: 12, offset: 31643},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1126, col: 17, offset: 31648},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1126, col: 35, offset: 31666},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1128, col: 1, offset: 31672},
			expr: &seqExpr{
				pos: position{line: 1129, col: 5, offset: 31694},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1129, col: 5, offset: 31694},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1129, col: 10, offset: 31699},
						expr: &seqExpr{
							pos: position{line: 1129, col: 11, offset: 31700},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1129, col: 11, offset: 31700},
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 12, offset: 31701},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1129, col: 27, offset: 31716},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1131, col: 1, offset: 31735},
			expr: &seqExpr{
				pos: position{line: 1131, col: 7, offset: 31741},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1131, col: 7, offset: 31741},
						expr: &ruleRefExpr{
							pos:  position{line: 1131, col: 7, offset: 31741},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 19, offset: 31753},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1133, col: 1, offset: 31769},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 7, offset: 31775},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 7, offset: 31775},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 31779},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1135, col: 1, offset: 31784},
			expr: &notExpr{
				pos: position{line: 1135, col: 7, offset: 31790},
				expr: &anyMatcher{
					line: 1135, col: 8, offset: 31791,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"op": "SequentialProc", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConstProc", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch1(filter, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"filter": filter, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch1(stack["filter"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onSwitchTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonSwitchTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SwitchProc", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation27(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation27(stack["f"])
}

func (c *current) onOperation33(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["a"])
}

func (c *current) onOperation39(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

							"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

							"rhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"op": "ShapeProc"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(kind, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["kind"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(kind, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["kind"], stack["key"], stack["columns"])
}

func (c *current) onJoinKind2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind2()
}

func (c *current) onJoinKind6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind6()
}

func (c *current) onJoinKind10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind10()
}

func (c *current) onJoinKind14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{

		map[string]interface{}{"op": "GroupByProc",

			"keys": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "shape"},

				"rhs": map[string]interface{}{"op": "FunctionCall", "function": "typeof",

					"args": []interface{}{e}}}},

			"reducers": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "taste"},

				"rhs": map[string]interface{}{"op": "Reducer",

					"operator": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"op": "CutProc",

			"fields": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"op": "Identifier", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeExpr", "type": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"op": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
