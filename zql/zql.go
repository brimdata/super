// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 11, col: 1, offset: 27},
			expr: &actionExpr{
				pos: position{line: 11, col: 9, offset: 35},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 11, col: 9, offset: 35},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 11, col: 9, offset: 35},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 9, offset: 35},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 11, col: 12, offset: 38},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 16, offset: 42},
								name: "query",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 11, col: 22, offset: 48},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 22, offset: 48},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 25, offset: 51},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "query",
			pos:  position{line: 13, col: 1, offset: 76},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 86},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 86},
						run: (*parser).callonquery2,
						expr: &labeledExpr{
							pos:   position{line: 14, col: 5, offset: 86},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 11, offset: 92},
								name: "procChain",
							},
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 358},
						run: (*parser).callonquery5,
						expr: &seqExpr{
							pos: position{line: 18, col: 5, offset: 358},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 18, col: 5, offset: 358},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 7, offset: 360},
										name: "search",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 18, col: 14, offset: 367},
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 14, offset: 367},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 18, col: 17, offset: 370},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 18, col: 22, offset: 375},
										expr: &ruleRefExpr{
											pos:  position{line: 18, col: 22, offset: 375},
											name: "chainedProc",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 25, col: 5, offset: 623},
						run: (*parser).callonquery14,
						expr: &labeledExpr{
							pos:   position{line: 25, col: 5, offset: 623},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 7, offset: 625},
								name: "search",
							},
						},
					},
				},
			},
		},
		{
			name: "procChain",
			pos:  position{line: 29, col: 1, offset: 733},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 747},
				run: (*parser).callonprocChain1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 747},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 30, col: 5, offset: 747},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 11, offset: 753},
								name: "proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 16, offset: 758},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 21, offset: 763},
								expr: &ruleRefExpr{
									pos:  position{line: 30, col: 21, offset: 763},
									name: "chainedProc",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainedProc",
			pos:  position{line: 38, col: 1, offset: 949},
			expr: &actionExpr{
				pos: position{line: 38, col: 15, offset: 963},
				run: (*parser).callonchainedProc1,
				expr: &seqExpr{
					pos: position{line: 38, col: 15, offset: 963},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 38, col: 15, offset: 963},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 15, offset: 963},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 38, col: 18, offset: 966},
							val:        "|",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 38, col: 22, offset: 970},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 22, offset: 970},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 25, offset: 973},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 27, offset: 975},
								name: "proc",
							},
						},
					},
				},
			},
		},
		{
			name: "search",
			pos:  position{line: 40, col: 1, offset: 999},
			expr: &actionExpr{
				pos: position{line: 41, col: 5, offset: 1010},
				run: (*parser).callonsearch1,
				expr: &labeledExpr{
					pos:   position{line: 41, col: 5, offset: 1010},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 41, col: 10, offset: 1015},
						name: "searchExpr",
					},
				},
			},
		},
		{
			name: "searchExpr",
			pos:  position{line: 45, col: 1, offset: 1112},
			expr: &actionExpr{
				pos: position{line: 46, col: 5, offset: 1127},
				run: (*parser).callonsearchExpr1,
				expr: &seqExpr{
					pos: position{line: 46, col: 5, offset: 1127},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 46, col: 5, offset: 1127},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 11, offset: 1133},
								name: "searchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 22, offset: 1144},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 46, col: 27, offset: 1149},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 27, offset: 1149},
									name: "oredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "oredSearchTerm",
			pos:  position{line: 50, col: 1, offset: 1228},
			expr: &actionExpr{
				pos: position{line: 50, col: 18, offset: 1245},
				run: (*parser).callonoredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 50, col: 18, offset: 1245},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 50, col: 18, offset: 1245},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 20, offset: 1247},
							name: "orToken",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 28, offset: 1255},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 30, offset: 1257},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 32, offset: 1259},
								name: "searchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "searchTerm",
			pos:  position{line: 52, col: 1, offset: 1289},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1304},
				run: (*parser).callonsearchTerm1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1304},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 53, col: 5, offset: 1304},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 11, offset: 1310},
								name: "searchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 53, col: 24, offset: 1323},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 53, col: 29, offset: 1328},
								expr: &ruleRefExpr{
									pos:  position{line: 53, col: 29, offset: 1328},
									name: "andedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andedSearchTerm",
			pos:  position{line: 57, col: 1, offset: 1409},
			expr: &actionExpr{
				pos: position{line: 57, col: 19, offset: 1427},
				run: (*parser).callonandedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 57, col: 19, offset: 1427},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 57, col: 19, offset: 1427},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 21, offset: 1429},
							expr: &seqExpr{
								pos: position{line: 57, col: 22, offset: 1430},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 57, col: 22, offset: 1430},
										name: "andToken",
									},
									&ruleRefExpr{
										pos:  position{line: 57, col: 31, offset: 1439},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 35, offset: 1443},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 37, offset: 1445},
								name: "searchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "searchFactor",
			pos:  position{line: 59, col: 1, offset: 1477},
			expr: &choiceExpr{
				pos: position{line: 60, col: 5, offset: 1494},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1494},
						run: (*parser).callonsearchFactor2,
						expr: &seqExpr{
							pos: position{line: 60, col: 5, offset: 1494},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 60, col: 6, offset: 1495},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 60, col: 6, offset: 1495},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 60, col: 6, offset: 1495},
													name: "notToken",
												},
												&ruleRefExpr{
													pos:  position{line: 60, col: 15, offset: 1504},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 60, col: 19, offset: 1508},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 60, col: 19, offset: 1508},
													val:        "!",
													ignoreCase: false,
												},
												&zeroOrOneExpr{
													pos: position{line: 60, col: 23, offset: 1512},
													expr: &ruleRefExpr{
														pos:  position{line: 60, col: 23, offset: 1512},
														name: "_",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 60, col: 27, offset: 1516},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 60, col: 29, offset: 1518},
										name: "searchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1613},
						run: (*parser).callonsearchFactor14,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1613},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 63, col: 5, offset: 1613},
									expr: &litMatcher{
										pos:        position{line: 63, col: 7, offset: 1615},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 63, col: 12, offset: 1620},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 14, offset: 1622},
										name: "searchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1655},
						run: (*parser).callonsearchFactor20,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 1655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 5, offset: 1655},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 9, offset: 1659},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 9, offset: 1659},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 12, offset: 1662},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 17, offset: 1667},
										name: "searchExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 28, offset: 1678},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 28, offset: 1678},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 64, col: 31, offset: 1681},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchPred",
			pos:  position{line: 66, col: 1, offset: 1707},
			expr: &choiceExpr{
				pos: position{line: 67, col: 5, offset: 1722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1722},
						run: (*parser).callonsearchPred2,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 67, col: 5, offset: 1722},
									val:        "*",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 9, offset: 1726},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1726},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 12, offset: 1729},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 17, offset: 1734},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 31, offset: 1748},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 31, offset: 1748},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 34, offset: 1751},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 36, offset: 1753},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1890},
						run: (*parser).callonsearchPred13,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1890},
									val:        "**",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 10, offset: 1895},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 10, offset: 1895},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 13, offset: 1898},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 18, offset: 1903},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 32, offset: 1917},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 32, offset: 1917},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 35, offset: 1920},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 37, offset: 1922},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2058},
						run: (*parser).callonsearchPred24,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2058},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 73, col: 5, offset: 2058},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 7, offset: 2060},
										name: "fieldExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 17, offset: 2070},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 17, offset: 2070},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 20, offset: 2073},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 25, offset: 2078},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 39, offset: 2092},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 39, offset: 2092},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 42, offset: 2095},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 44, offset: 2097},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2228},
						run: (*parser).callonsearchPred36,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2228},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2228},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 10, offset: 2233},
										name: "FunctionExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 23, offset: 2246},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 23, offset: 2246},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 76, col: 26, offset: 2249},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 31, offset: 2254},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 45, offset: 2268},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 45, offset: 2268},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 76, col: 48, offset: 2271},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 50, offset: 2273},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2405},
						run: (*parser).callonsearchPred48,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 79, col: 5, offset: 2405},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 7, offset: 2407},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 19, offset: 2419},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 19, offset: 2419},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 22, offset: 2422},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 30, offset: 2430},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 30, offset: 2430},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 79, col: 33, offset: 2433},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2562},
						run: (*parser).callonsearchPred58,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2562},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2564},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 82, col: 19, offset: 2576},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 19, offset: 2576},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 22, offset: 2579},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 82, col: 30, offset: 2587},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 30, offset: 2587},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 82, col: 33, offset: 2590},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 35, offset: 2592},
										name: "fieldExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2721},
						run: (*parser).callonsearchPred69,
						expr: &labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2721},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 7, offset: 2723},
								name: "searchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2842},
						run: (*parser).callonsearchPred72,
						expr: &seqExpr{
							pos: position{line: 88, col: 5, offset: 2842},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 88, col: 5, offset: 2842},
									expr: &seqExpr{
										pos: position{line: 88, col: 7, offset: 2844},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 88, col: 8, offset: 2845},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 88, col: 24, offset: 2861},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 88, col: 28, offset: 2865},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 30, offset: 2867},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchLiteral",
			pos:  position{line: 101, col: 1, offset: 3319},
			expr: &choiceExpr{
				pos: position{line: 102, col: 5, offset: 3337},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 102, col: 5, offset: 3337},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3355},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 3373},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3389},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 3407},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 3426},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3593},
						run: (*parser).callonsearchLiteral8,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3593},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 111, col: 5, offset: 3593},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 7, offset: 3595},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 111, col: 22, offset: 3610},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 23, offset: 3611},
										name: "searchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3645},
						run: (*parser).callonsearchLiteral14,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3645},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 113, col: 5, offset: 3645},
									expr: &seqExpr{
										pos: position{line: 113, col: 7, offset: 3647},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 113, col: 7, offset: 3647},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 113, col: 22, offset: 3662},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 113, col: 25, offset: 3665},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 27, offset: 3667},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 114, col: 5, offset: 3704},
						run: (*parser).callonsearchLiteral22,
						expr: &seqExpr{
							pos: position{line: 114, col: 5, offset: 3704},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 114, col: 5, offset: 3704},
									expr: &seqExpr{
										pos: position{line: 114, col: 7, offset: 3706},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 114, col: 7, offset: 3706},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 114, col: 22, offset: 3721},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 25, offset: 3724},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 27, offset: 3726},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchValue",
			pos:  position{line: 117, col: 1, offset: 3758},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3774},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 118, col: 5, offset: 3774},
						name: "searchLiteral",
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3792},
						run: (*parser).callonsearchValue3,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3792},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 119, col: 5, offset: 3792},
									expr: &seqExpr{
										pos: position{line: 119, col: 7, offset: 3794},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 119, col: 8, offset: 3795},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 119, col: 24, offset: 3811},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 119, col: 27, offset: 3814},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 29, offset: 3816},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 123, col: 1, offset: 3924},
			expr: &actionExpr{
				pos: position{line: 124, col: 5, offset: 3942},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 124, col: 5, offset: 3942},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 124, col: 7, offset: 3944},
						name: "quotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 128, col: 1, offset: 4054},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 4072},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 129, col: 5, offset: 4072},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 129, col: 7, offset: 4074},
						name: "reString",
					},
				},
			},
		},
		{
			name: "PortLiteral",
			pos:  position{line: 133, col: 1, offset: 4180},
			expr: &actionExpr{
				pos: position{line: 134, col: 5, offset: 4196},
				run: (*parser).callonPortLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 134, col: 5, offset: 4196},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 134, col: 7, offset: 4198},
						name: "port",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 138, col: 1, offset: 4298},
			expr: &choiceExpr{
				pos: position{line: 139, col: 5, offset: 4316},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4316},
						run: (*parser).callonSubnetLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 139, col: 5, offset: 4316},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 7, offset: 4318},
								name: "ip6subnet",
							},
						},
					},
					&actionExpr{
						pos: position{line: 142, col: 5, offset: 4425},
						run: (*parser).callonSubnetLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 142, col: 5, offset: 4425},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 7, offset: 4427},
								name: "subnet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 146, col: 1, offset: 4528},
			expr: &choiceExpr{
				pos: position{line: 147, col: 5, offset: 4547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4547},
						run: (*parser).callonAddressLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 147, col: 5, offset: 4547},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 7, offset: 4549},
								name: "ip6addr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4653},
						run: (*parser).callonAddressLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 150, col: 5, offset: 4653},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 7, offset: 4655},
								name: "addr",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 154, col: 1, offset: 4753},
			expr: &actionExpr{
				pos: position{line: 155, col: 5, offset: 4770},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 155, col: 5, offset: 4770},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 155, col: 7, offset: 4772},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 159, col: 1, offset: 4878},
			expr: &actionExpr{
				pos: position{line: 160, col: 5, offset: 4897},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 160, col: 5, offset: 4897},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 160, col: 7, offset: 4899},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 164, col: 1, offset: 5004},
			expr: &choiceExpr{
				pos: position{line: 165, col: 5, offset: 5023},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 165, col: 5, offset: 5023},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 165, col: 5, offset: 5023},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5133},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 166, col: 5, offset: 5133},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 168, col: 1, offset: 5241},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 5257},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 169, col: 5, offset: 5257},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "searchKeywords",
			pos:  position{line: 171, col: 1, offset: 5347},
			expr: &choiceExpr{
				pos: position{line: 172, col: 5, offset: 5366},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 172, col: 5, offset: 5366},
						name: "andToken",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 5379},
						name: "orToken",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 5391},
						name: "inToken",
					},
				},
			},
		},
		{
			name: "procList",
			pos:  position{line: 176, col: 1, offset: 5400},
			expr: &actionExpr{
				pos: position{line: 177, col: 5, offset: 5413},
				run: (*parser).callonprocList1,
				expr: &seqExpr{
					pos: position{line: 177, col: 5, offset: 5413},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 5413},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 11, offset: 5419},
								name: "procChain",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 21, offset: 5429},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 26, offset: 5434},
								expr: &ruleRefExpr{
									pos:  position{line: 177, col: 26, offset: 5434},
									name: "parallelChain",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parallelChain",
			pos:  position{line: 186, col: 1, offset: 5734},
			expr: &actionExpr{
				pos: position{line: 187, col: 5, offset: 5752},
				run: (*parser).callonparallelChain1,
				expr: &seqExpr{
					pos: position{line: 187, col: 5, offset: 5752},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 187, col: 5, offset: 5752},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 5, offset: 5752},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 8, offset: 5755},
							val:        ";",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 187, col: 12, offset: 5759},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 12, offset: 5759},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 187, col: 15, offset: 5762},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 18, offset: 5765},
								name: "procChain",
							},
						},
					},
				},
			},
		},
		{
			name: "proc",
			pos:  position{line: 189, col: 1, offset: 5852},
			expr: &choiceExpr{
				pos: position{line: 190, col: 5, offset: 5861},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 5861},
						name: "simpleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 5876},
						name: "groupByProc",
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5892},
						run: (*parser).callonproc4,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 5892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 192, col: 5, offset: 5892},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 192, col: 9, offset: 5896},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 5896},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 12, offset: 5899},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 17, offset: 5904},
										name: "procList",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 192, col: 26, offset: 5913},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 26, offset: 5913},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 192, col: 29, offset: 5916},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKeys",
			pos:  position{line: 196, col: 1, offset: 5952},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5968},
				run: (*parser).callongroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 5, offset: 5968},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 11, offset: 5974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 13, offset: 5976},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 19, offset: 5982},
								name: "groupByKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 5993},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 35, offset: 5998},
								expr: &actionExpr{
									pos: position{line: 197, col: 36, offset: 5999},
									run: (*parser).callongroupByKeys9,
									expr: &seqExpr{
										pos: position{line: 197, col: 36, offset: 5999},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 36, offset: 5999},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 197, col: 39, offset: 6002},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 43, offset: 6006},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 46, offset: 6009},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 49, offset: 6012},
													name: "groupByKey",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKey",
			pos:  position{line: 202, col: 1, offset: 6129},
			expr: &choiceExpr{
				pos: position{line: 203, col: 5, offset: 6144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6144},
						name: "ExpressionAssignment",
					},
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6169},
						run: (*parser).callongroupByKey3,
						expr: &labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6169},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 11, offset: 6175},
								name: "fieldExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "everyDur",
			pos:  position{line: 207, col: 1, offset: 6303},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 6316},
				run: (*parser).calloneveryDur1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 6316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 5, offset: 6316},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 208, col: 14, offset: 6325},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 16, offset: 6327},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 20, offset: 6331},
								name: "duration",
							},
						},
					},
				},
			},
		},
		{
			name: "equalityToken",
			pos:  position{line: 210, col: 1, offset: 6361},
			expr: &choiceExpr{
				pos: position{line: 211, col: 5, offset: 6379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6379},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6398},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "andToken",
			pos:  position{line: 213, col: 1, offset: 6416},
			expr: &actionExpr{
				pos: position{line: 213, col: 12, offset: 6427},
				run: (*parser).callonandToken1,
				expr: &litMatcher{
					pos:        position{line: 213, col: 12, offset: 6427},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "orToken",
			pos:  position{line: 214, col: 1, offset: 6465},
			expr: &actionExpr{
				pos: position{line: 214, col: 11, offset: 6475},
				run: (*parser).callonorToken1,
				expr: &litMatcher{
					pos:        position{line: 214, col: 11, offset: 6475},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "inToken",
			pos:  position{line: 215, col: 1, offset: 6512},
			expr: &actionExpr{
				pos: position{line: 215, col: 11, offset: 6522},
				run: (*parser).calloninToken1,
				expr: &litMatcher{
					pos:        position{line: 215, col: 11, offset: 6522},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "notToken",
			pos:  position{line: 216, col: 1, offset: 6559},
			expr: &actionExpr{
				pos: position{line: 216, col: 12, offset: 6570},
				run: (*parser).callonnotToken1,
				expr: &litMatcher{
					pos:        position{line: 216, col: 12, offset: 6570},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldName",
			pos:  position{line: 218, col: 1, offset: 6609},
			expr: &actionExpr{
				pos: position{line: 218, col: 13, offset: 6621},
				run: (*parser).callonfieldName1,
				expr: &seqExpr{
					pos: position{line: 218, col: 13, offset: 6621},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 218, col: 13, offset: 6621},
							name: "fieldNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 218, col: 28, offset: 6636},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 28, offset: 6636},
								name: "fieldNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "fieldNameStart",
			pos:  position{line: 220, col: 1, offset: 6683},
			expr: &charClassMatcher{
				pos:        position{line: 220, col: 18, offset: 6700},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "fieldNameRest",
			pos:  position{line: 221, col: 1, offset: 6711},
			expr: &choiceExpr{
				pos: position{line: 221, col: 17, offset: 6727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 17, offset: 6727},
						name: "fieldNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 221, col: 34, offset: 6744},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 223, col: 1, offset: 6751},
			expr: &actionExpr{
				pos: position{line: 224, col: 5, offset: 6761},
				run: (*parser).callonField1,
				expr: &labeledExpr{
					pos:   position{line: 224, col: 5, offset: 6761},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 224, col: 10, offset: 6766},
						name: "fieldName",
					},
				},
			},
		},
		{
			name: "fieldExpr",
			pos:  position{line: 226, col: 1, offset: 6847},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 6859},
				run: (*parser).callonfieldExpr1,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 6859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 6859},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 18, offset: 6864},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 24, offset: 6870},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 31, offset: 6877},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 32, offset: 6878},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DotExpr",
			pos:  position{line: 230, col: 1, offset: 6943},
			expr: &actionExpr{
				pos: position{line: 230, col: 11, offset: 6953},
				run: (*parser).callonDotExpr1,
				expr: &seqExpr{
					pos: position{line: 230, col: 11, offset: 6953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 11, offset: 6953},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 16, offset: 6958},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 22, offset: 6964},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 230, col: 29, offset: 6971},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 30, offset: 6972},
									name: "DotField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DotExprText",
			pos:  position{line: 234, col: 1, offset: 7040},
			expr: &actionExpr{
				pos: position{line: 234, col: 15, offset: 7054},
				run: (*parser).callonDotExprText1,
				expr: &ruleRefExpr{
					pos:  position{line: 234, col: 15, offset: 7054},
					name: "DotExpr",
				},
			},
		},
		{
			name: "FunctionExpr",
			pos:  position{line: 240, col: 1, offset: 7354},
			expr: &actionExpr{
				pos: position{line: 241, col: 7, offset: 7373},
				run: (*parser).callonFunctionExpr1,
				expr: &seqExpr{
					pos: position{line: 241, col: 7, offset: 7373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 241, col: 7, offset: 7373},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 10, offset: 7376},
								name: "FunctionName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 23, offset: 7389},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 241, col: 26, offset: 7392},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 241, col: 30, offset: 7396},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 35, offset: 7401},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 241, col: 48, offset: 7414},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldExprList",
			pos:  position{line: 245, col: 1, offset: 7526},
			expr: &actionExpr{
				pos: position{line: 246, col: 5, offset: 7544},
				run: (*parser).callonfieldExprList1,
				expr: &seqExpr{
					pos: position{line: 246, col: 5, offset: 7544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 246, col: 5, offset: 7544},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 11, offset: 7550},
								name: "fieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 21, offset: 7560},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 246, col: 26, offset: 7565},
								expr: &seqExpr{
									pos: position{line: 246, col: 27, offset: 7566},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 246, col: 27, offset: 7566},
											expr: &ruleRefExpr{
												pos:  position{line: 246, col: 27, offset: 7566},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 246, col: 30, offset: 7569},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 246, col: 34, offset: 7573},
											expr: &ruleRefExpr{
												pos:  position{line: 246, col: 34, offset: 7573},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 246, col: 37, offset: 7576},
											name: "fieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "countOp",
			pos:  position{line: 256, col: 1, offset: 7773},
			expr: &actionExpr{
				pos: position{line: 257, col: 5, offset: 7785},
				run: (*parser).calloncountOp1,
				expr: &litMatcher{
					pos:        position{line: 257, col: 5, offset: 7785},
					val:        "count",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldReducerOp",
			pos:  position{line: 259, col: 1, offset: 7819},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 7838},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 7838},
						run: (*parser).callonfieldReducerOp2,
						expr: &litMatcher{
							pos:        position{line: 260, col: 5, offset: 7838},
							val:        "sum",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7872},
						run: (*parser).callonfieldReducerOp4,
						expr: &litMatcher{
							pos:        position{line: 261, col: 5, offset: 7872},
							val:        "avg",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7906},
						run: (*parser).callonfieldReducerOp6,
						expr: &litMatcher{
							pos:        position{line: 262, col: 5, offset: 7906},
							val:        "stdev",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 7943},
						run: (*parser).callonfieldReducerOp8,
						expr: &litMatcher{
							pos:        position{line: 263, col: 5, offset: 7943},
							val:        "sd",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7979},
						run: (*parser).callonfieldReducerOp10,
						expr: &litMatcher{
							pos:        position{line: 264, col: 5, offset: 7979},
							val:        "var",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 8013},
						run: (*parser).callonfieldReducerOp12,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 8013},
							val:        "entropy",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 8054},
						run: (*parser).callonfieldReducerOp14,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 8054},
							val:        "min",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 8088},
						run: (*parser).callonfieldReducerOp16,
						expr: &litMatcher{
							pos:        position{line: 267, col: 5, offset: 8088},
							val:        "max",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 5, offset: 8122},
						run: (*parser).callonfieldReducerOp18,
						expr: &litMatcher{
							pos:        position{line: 268, col: 5, offset: 8122},
							val:        "first",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 5, offset: 8160},
						run: (*parser).callonfieldReducerOp20,
						expr: &litMatcher{
							pos:        position{line: 269, col: 5, offset: 8160},
							val:        "last",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 270, col: 5, offset: 8196},
						run: (*parser).callonfieldReducerOp22,
						expr: &litMatcher{
							pos:        position{line: 270, col: 5, offset: 8196},
							val:        "countdistinct",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "paddedFieldExpr",
			pos:  position{line: 272, col: 1, offset: 8246},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 8264},
				run: (*parser).callonpaddedFieldExpr1,
				expr: &seqExpr{
					pos: position{line: 272, col: 19, offset: 8264},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 272, col: 19, offset: 8264},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 19, offset: 8264},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 22, offset: 8267},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 28, offset: 8273},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 272, col: 38, offset: 8283},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 38, offset: 8283},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "countReducer",
			pos:  position{line: 274, col: 1, offset: 8309},
			expr: &actionExpr{
				pos: position{line: 275, col: 5, offset: 8326},
				run: (*parser).calloncountReducer1,
				expr: &seqExpr{
					pos: position{line: 275, col: 5, offset: 8326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 275, col: 5, offset: 8326},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 8, offset: 8329},
								name: "countOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 275, col: 16, offset: 8337},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 16, offset: 8337},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 19, offset: 8340},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 275, col: 23, offset: 8344},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 275, col: 29, offset: 8350},
								expr: &ruleRefExpr{
									pos:  position{line: 275, col: 29, offset: 8350},
									name: "paddedFieldExpr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 275, col: 47, offset: 8368},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 47, offset: 8368},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 50, offset: 8371},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldReducer",
			pos:  position{line: 283, col: 1, offset: 8514},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8531},
				run: (*parser).callonfieldReducer1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 8531},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 8, offset: 8534},
								name: "fieldReducerOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 23, offset: 8549},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 23, offset: 8549},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 26, offset: 8552},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 30, offset: 8556},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 30, offset: 8556},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 33, offset: 8559},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 39, offset: 8565},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 50, offset: 8576},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 50, offset: 8576},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 53, offset: 8579},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "groupByProc",
			pos:  position{line: 292, col: 1, offset: 8730},
			expr: &actionExpr{
				pos: position{line: 293, col: 5, offset: 8746},
				run: (*parser).callongroupByProc1,
				expr: &seqExpr{
					pos: position{line: 293, col: 5, offset: 8746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8746},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 11, offset: 8752},
								expr: &seqExpr{
									pos: position{line: 293, col: 12, offset: 8753},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 293, col: 12, offset: 8753},
											name: "everyDur",
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 21, offset: 8762},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 25, offset: 8766},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 34, offset: 8775},
								name: "reducerList",
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 46, offset: 8787},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 51, offset: 8792},
								expr: &seqExpr{
									pos: position{line: 293, col: 52, offset: 8793},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 293, col: 52, offset: 8793},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 54, offset: 8795},
											name: "groupByKeys",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 68, offset: 8809},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 74, offset: 8815},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 74, offset: 8815},
									name: "procLimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reducerExpr",
			pos:  position{line: 310, col: 1, offset: 9280},
			expr: &choiceExpr{
				pos: position{line: 311, col: 5, offset: 9296},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 9296},
						run: (*parser).callonreducerExpr2,
						expr: &seqExpr{
							pos: position{line: 311, col: 5, offset: 9296},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 311, col: 5, offset: 9296},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 11, offset: 9302},
										name: "fieldName",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 311, col: 21, offset: 9312},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 21, offset: 9312},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 311, col: 24, offset: 9315},
									val:        "=",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 311, col: 28, offset: 9319},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 28, offset: 9319},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 311, col: 31, offset: 9322},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 33, offset: 9324},
										name: "reducer",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9420},
						name: "reducer",
					},
				},
			},
		},
		{
			name: "reducer",
			pos:  position{line: 318, col: 1, offset: 9429},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 9441},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 319, col: 5, offset: 9441},
						name: "countReducer",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9458},
						name: "fieldReducer",
					},
				},
			},
		},
		{
			name: "reducerList",
			pos:  position{line: 322, col: 1, offset: 9472},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 9488},
				run: (*parser).callonreducerList1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 9488},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 9488},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 9494},
								name: "reducerExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 23, offset: 9506},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 323, col: 28, offset: 9511},
								expr: &seqExpr{
									pos: position{line: 323, col: 29, offset: 9512},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 323, col: 29, offset: 9512},
											expr: &ruleRefExpr{
												pos:  position{line: 323, col: 29, offset: 9512},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 323, col: 32, offset: 9515},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 323, col: 36, offset: 9519},
											expr: &ruleRefExpr{
												pos:  position{line: 323, col: 36, offset: 9519},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 323, col: 39, offset: 9522},
											name: "reducerExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleProc",
			pos:  position{line: 331, col: 1, offset: 9721},
			expr: &choiceExpr{
				pos: position{line: 332, col: 5, offset: 9736},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9736},
						name: "sort",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9745},
						name: "top",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9753},
						name: "cut",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9761},
						name: "head",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9770},
						name: "tail",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9779},
						name: "filter",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9790},
						name: "uniq",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9799},
						name: "put",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9807},
						name: "rename",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9818},
						name: "fuse",
					},
				},
			},
		},
		{
			name: "sort",
			pos:  position{line: 343, col: 1, offset: 9824},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 9833},
				run: (*parser).callonsort1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 9833},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 9833},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 13, offset: 9841},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 18, offset: 9846},
								name: "sortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 27, offset: 9855},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 32, offset: 9860},
								expr: &actionExpr{
									pos: position{line: 344, col: 33, offset: 9861},
									run: (*parser).callonsort8,
									expr: &seqExpr{
										pos: position{line: 344, col: 33, offset: 9861},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 344, col: 33, offset: 9861},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 344, col: 35, offset: 9863},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 344, col: 37, offset: 9865},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArgs",
			pos:  position{line: 358, col: 1, offset: 10268},
			expr: &actionExpr{
				pos: position{line: 358, col: 12, offset: 10279},
				run: (*parser).callonsortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 358, col: 12, offset: 10279},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 358, col: 17, offset: 10284},
						expr: &actionExpr{
							pos: position{line: 358, col: 18, offset: 10285},
							run: (*parser).callonsortArgs4,
							expr: &seqExpr{
								pos: position{line: 358, col: 18, offset: 10285},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 358, col: 18, offset: 10285},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 358, col: 20, offset: 10287},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 358, col: 22, offset: 10289},
											name: "sortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArg",
			pos:  position{line: 362, col: 1, offset: 10349},
			expr: &choiceExpr{
				pos: position{line: 363, col: 5, offset: 10361},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10361},
						run: (*parser).callonsortArg2,
						expr: &litMatcher{
							pos:        position{line: 363, col: 5, offset: 10361},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10436},
						run: (*parser).callonsortArg4,
						expr: &seqExpr{
							pos: position{line: 364, col: 5, offset: 10436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 364, col: 5, offset: 10436},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 364, col: 14, offset: 10445},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 364, col: 16, offset: 10447},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 364, col: 23, offset: 10454},
										run: (*parser).callonsortArg9,
										expr: &choiceExpr{
											pos: position{line: 364, col: 24, offset: 10455},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 364, col: 24, offset: 10455},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 364, col: 34, offset: 10465},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "top",
			pos:  position{line: 366, col: 1, offset: 10579},
			expr: &actionExpr{
				pos: position{line: 367, col: 5, offset: 10587},
				run: (*parser).callontop1,
				expr: &seqExpr{
					pos: position{line: 367, col: 5, offset: 10587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 5, offset: 10587},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 12, offset: 10594},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 367, col: 18, offset: 10600},
								expr: &actionExpr{
									pos: position{line: 367, col: 19, offset: 10601},
									run: (*parser).callontop6,
									expr: &seqExpr{
										pos: position{line: 367, col: 19, offset: 10601},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 367, col: 19, offset: 10601},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 367, col: 21, offset: 10603},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 23, offset: 10605},
													name: "unsignedInteger",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 58, offset: 10640},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 367, col: 64, offset: 10646},
								expr: &seqExpr{
									pos: position{line: 367, col: 65, offset: 10647},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 65, offset: 10647},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 367, col: 67, offset: 10649},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 78, offset: 10660},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 367, col: 85, offset: 10667},
								expr: &actionExpr{
									pos: position{line: 367, col: 86, offset: 10668},
									run: (*parser).callontop18,
									expr: &seqExpr{
										pos: position{line: 367, col: 86, offset: 10668},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 367, col: 86, offset: 10668},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 367, col: 88, offset: 10670},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 90, offset: 10672},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "procLimitArg",
			pos:  position{line: 381, col: 1, offset: 10959},
			expr: &actionExpr{
				pos: position{line: 382, col: 5, offset: 10976},
				run: (*parser).callonprocLimitArg1,
				expr: &seqExpr{
					pos: position{line: 382, col: 5, offset: 10976},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 382, col: 5, offset: 10976},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 382, col: 7, offset: 10978},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 16, offset: 10987},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 18, offset: 10989},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 24, offset: 10995},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "cutArgs",
			pos:  position{line: 384, col: 1, offset: 11034},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 11046},
				run: (*parser).calloncutArgs1,
				expr: &labeledExpr{
					pos:   position{line: 385, col: 5, offset: 11046},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 385, col: 10, offset: 11051},
						expr: &actionExpr{
							pos: position{line: 385, col: 11, offset: 11052},
							run: (*parser).calloncutArgs4,
							expr: &seqExpr{
								pos: position{line: 385, col: 11, offset: 11052},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 11, offset: 11052},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 385, col: 13, offset: 11054},
										val:        "-c",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "cutAssignment",
			pos:  position{line: 389, col: 1, offset: 11162},
			expr: &choiceExpr{
				pos: position{line: 390, col: 5, offset: 11180},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 390, col: 5, offset: 11180},
						name: "FieldAssignment",
					},
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 11200},
						run: (*parser).calloncutAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 391, col: 5, offset: 11200},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 11206},
								name: "DotExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "cut",
			pos:  position{line: 395, col: 1, offset: 11291},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11299},
				run: (*parser).calloncut1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11299},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 396, col: 12, offset: 11306},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 17, offset: 11311},
								name: "cutArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 25, offset: 11319},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 27, offset: 11321},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 33, offset: 11327},
								name: "cutAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 47, offset: 11341},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 396, col: 52, offset: 11346},
								expr: &actionExpr{
									pos: position{line: 396, col: 53, offset: 11347},
									run: (*parser).calloncut11,
									expr: &seqExpr{
										pos: position{line: 396, col: 53, offset: 11347},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 396, col: 53, offset: 11347},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 396, col: 56, offset: 11350},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 60, offset: 11354},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 396, col: 63, offset: 11357},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 396, col: 66, offset: 11360},
													name: "cutAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "head",
			pos:  position{line: 404, col: 1, offset: 11682},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 11691},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11691},
						run: (*parser).callonhead2,
						expr: &seqExpr{
							pos: position{line: 405, col: 5, offset: 11691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 5, offset: 11691},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 13, offset: 11699},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 15, offset: 11701},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 405, col: 21, offset: 11707},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 406, col: 5, offset: 11800},
						run: (*parser).callonhead8,
						expr: &litMatcher{
							pos:        position{line: 406, col: 5, offset: 11800},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "tail",
			pos:  position{line: 407, col: 1, offset: 11877},
			expr: &choiceExpr{
				pos: position{line: 408, col: 5, offset: 11886},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 408, col: 5, offset: 11886},
						run: (*parser).callontail2,
						expr: &seqExpr{
							pos: position{line: 408, col: 5, offset: 11886},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 408, col: 5, offset: 11886},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 408, col: 13, offset: 11894},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 408, col: 15, offset: 11896},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 408, col: 21, offset: 11902},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 11995},
						run: (*parser).callontail8,
						expr: &litMatcher{
							pos:        position{line: 409, col: 5, offset: 11995},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "filter",
			pos:  position{line: 411, col: 1, offset: 12073},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 12084},
				run: (*parser).callonfilter1,
				expr: &seqExpr{
					pos: position{line: 412, col: 5, offset: 12084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 5, offset: 12084},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 412, col: 15, offset: 12094},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 17, offset: 12096},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 22, offset: 12101},
								name: "searchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "uniq",
			pos:  position{line: 415, col: 1, offset: 12197},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 12206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12206},
						run: (*parser).callonuniq2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 416, col: 5, offset: 12206},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 12214},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 416, col: 15, offset: 12216},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12307},
						run: (*parser).callonuniq7,
						expr: &litMatcher{
							pos:        position{line: 419, col: 5, offset: 12307},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "put",
			pos:  position{line: 423, col: 1, offset: 12399},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 12407},
				run: (*parser).callonput1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 12407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 424, col: 5, offset: 12407},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 424, col: 12, offset: 12414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 14, offset: 12416},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 20, offset: 12422},
								name: "ExpressionAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 41, offset: 12443},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 424, col: 46, offset: 12448},
								expr: &actionExpr{
									pos: position{line: 424, col: 47, offset: 12449},
									run: (*parser).callonput9,
									expr: &seqExpr{
										pos: position{line: 424, col: 47, offset: 12449},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 424, col: 47, offset: 12449},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 424, col: 50, offset: 12452},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 424, col: 54, offset: 12456},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 424, col: 57, offset: 12459},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 424, col: 60, offset: 12462},
													name: "ExpressionAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "rename",
			pos:  position{line: 428, col: 1, offset: 12640},
			expr: &actionExpr{
				pos: position{line: 429, col: 5, offset: 12651},
				run: (*parser).callonrename1,
				expr: &seqExpr{
					pos: position{line: 429, col: 5, offset: 12651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 5, offset: 12651},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 429, col: 15, offset: 12661},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 17, offset: 12663},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 23, offset: 12669},
								name: "FieldAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 39, offset: 12685},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 429, col: 44, offset: 12690},
								expr: &actionExpr{
									pos: position{line: 429, col: 45, offset: 12691},
									run: (*parser).callonrename9,
									expr: &seqExpr{
										pos: position{line: 429, col: 45, offset: 12691},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 429, col: 45, offset: 12691},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 429, col: 48, offset: 12694},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 429, col: 52, offset: 12698},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 429, col: 55, offset: 12701},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 429, col: 58, offset: 12704},
													name: "FieldAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fuse",
			pos:  position{line: 433, col: 1, offset: 12879},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 12888},
				run: (*parser).callonfuse1,
				expr: &litMatcher{
					pos:        position{line: 434, col: 5, offset: 12888},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExpressionAssignment",
			pos:  position{line: 438, col: 1, offset: 12962},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12987},
				run: (*parser).callonExpressionAssignment1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 12987},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 7, offset: 12989},
								name: "fieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 17, offset: 12999},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 439, col: 20, offset: 13002},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 24, offset: 13006},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 439, col: 27, offset: 13009},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 29, offset: 13011},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldAssignment",
			pos:  position{line: 443, col: 1, offset: 13102},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 13122},
				run: (*parser).callonFieldAssignment1,
				expr: &seqExpr{
					pos: position{line: 444, col: 5, offset: 13122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 444, col: 5, offset: 13122},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 7, offset: 13124},
								name: "DotExprText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 19, offset: 13136},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 444, col: 22, offset: 13139},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 26, offset: 13143},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 29, offset: 13146},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 31, offset: 13148},
								name: "DotExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "PrimaryExpression",
			pos:  position{line: 448, col: 1, offset: 13232},
			expr: &choiceExpr{
				pos: position{line: 449, col: 5, offset: 13254},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 5, offset: 13254},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 5, offset: 13272},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 451, col: 5, offset: 13290},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 452, col: 5, offset: 13306},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 5, offset: 13324},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 5, offset: 13343},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 455, col: 5, offset: 13360},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 5, offset: 13379},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 457, col: 5, offset: 13398},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 458, col: 5, offset: 13414},
						name: "Field",
					},
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 13424},
						run: (*parser).callonPrimaryExpression12,
						expr: &seqExpr{
							pos: position{line: 459, col: 5, offset: 13424},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 459, col: 5, offset: 13424},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 9, offset: 13428},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 459, col: 12, offset: 13431},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 459, col: 17, offset: 13436},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 28, offset: 13447},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 459, col: 31, offset: 13450},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 467, col: 1, offset: 13652},
			expr: &ruleRefExpr{
				pos:  position{line: 467, col: 14, offset: 13665},
				name: "ConditionalExpression",
			},
		},
		{
			name: "ConditionalExpression",
			pos:  position{line: 469, col: 1, offset: 13688},
			expr: &choiceExpr{
				pos: position{line: 470, col: 5, offset: 13714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 470, col: 5, offset: 13714},
						run: (*parser).callonConditionalExpression2,
						expr: &seqExpr{
							pos: position{line: 470, col: 5, offset: 13714},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 470, col: 5, offset: 13714},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 15, offset: 13724},
										name: "LogicalORExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 470, col: 35, offset: 13744},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 470, col: 38, offset: 13747},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 470, col: 42, offset: 13751},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 470, col: 45, offset: 13754},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 56, offset: 13765},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 470, col: 67, offset: 13776},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 470, col: 70, offset: 13779},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 470, col: 74, offset: 13783},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 470, col: 77, offset: 13786},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 88, offset: 13797},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 5, offset: 13946},
						name: "LogicalORExpression",
					},
				},
			},
		},
		{
			name: "LogicalORExpression",
			pos:  position{line: 475, col: 1, offset: 13967},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 13991},
				run: (*parser).callonLogicalORExpression1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 13991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 13991},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 13997},
								name: "LogicalANDExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14022},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 477, col: 10, offset: 14027},
								expr: &actionExpr{
									pos: position{line: 477, col: 11, offset: 14028},
									run: (*parser).callonLogicalORExpression7,
									expr: &seqExpr{
										pos: position{line: 477, col: 11, offset: 14028},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 477, col: 11, offset: 14028},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 477, col: 14, offset: 14031},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 477, col: 17, offset: 14034},
													name: "orToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 477, col: 25, offset: 14042},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 477, col: 28, offset: 14045},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 477, col: 33, offset: 14050},
													name: "LogicalANDExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpression",
			pos:  position{line: 481, col: 1, offset: 14174},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14199},
				run: (*parser).callonLogicalANDExpression1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 482, col: 5, offset: 14199},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 14205},
								name: "EqualityCompareExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 483, col: 5, offset: 14235},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 483, col: 10, offset: 14240},
								expr: &actionExpr{
									pos: position{line: 483, col: 11, offset: 14241},
									run: (*parser).callonLogicalANDExpression7,
									expr: &seqExpr{
										pos: position{line: 483, col: 11, offset: 14241},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 483, col: 11, offset: 14241},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 483, col: 14, offset: 14244},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 483, col: 17, offset: 14247},
													name: "andToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 483, col: 26, offset: 14256},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 483, col: 29, offset: 14259},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 483, col: 34, offset: 14264},
													name: "EqualityCompareExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpression",
			pos:  position{line: 487, col: 1, offset: 14393},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14423},
				run: (*parser).callonEqualityCompareExpression1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 14423},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 14429},
								name: "RelativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 14452},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 489, col: 10, offset: 14457},
								expr: &actionExpr{
									pos: position{line: 489, col: 11, offset: 14458},
									run: (*parser).callonEqualityCompareExpression7,
									expr: &seqExpr{
										pos: position{line: 489, col: 11, offset: 14458},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 489, col: 11, offset: 14458},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 14, offset: 14461},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 19, offset: 14466},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 38, offset: 14485},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 41, offset: 14488},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 46, offset: 14493},
													name: "RelativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 493, col: 1, offset: 14617},
			expr: &actionExpr{
				pos: position{line: 493, col: 20, offset: 14636},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 493, col: 21, offset: 14637},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 493, col: 21, offset: 14637},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 493, col: 28, offset: 14644},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 493, col: 35, offset: 14651},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 493, col: 41, offset: 14657},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 495, col: 1, offset: 14695},
			expr: &choiceExpr{
				pos: position{line: 496, col: 5, offset: 14718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 496, col: 5, offset: 14718},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 497, col: 5, offset: 14739},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 497, col: 5, offset: 14739},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpression",
			pos:  position{line: 499, col: 1, offset: 14776},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14799},
				run: (*parser).callonRelativeExpression1,
				expr: &seqExpr{
					pos: position{line: 500, col: 5, offset: 14799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 500, col: 5, offset: 14799},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 14805},
								name: "AdditiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 5, offset: 14828},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 501, col: 10, offset: 14833},
								expr: &actionExpr{
									pos: position{line: 501, col: 11, offset: 14834},
									run: (*parser).callonRelativeExpression7,
									expr: &seqExpr{
										pos: position{line: 501, col: 11, offset: 14834},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 501, col: 11, offset: 14834},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 501, col: 14, offset: 14837},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 501, col: 17, offset: 14840},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 501, col: 34, offset: 14857},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 501, col: 37, offset: 14860},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 501, col: 42, offset: 14865},
													name: "AdditiveExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 505, col: 1, offset: 14987},
			expr: &actionExpr{
				pos: position{line: 505, col: 20, offset: 15006},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 505, col: 21, offset: 15007},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 21, offset: 15007},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 505, col: 28, offset: 15014},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 505, col: 34, offset: 15020},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 505, col: 41, offset: 15027},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpression",
			pos:  position{line: 507, col: 1, offset: 15064},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 15087},
				run: (*parser).callonAdditiveExpression1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 15087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 508, col: 5, offset: 15087},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 15093},
								name: "MultiplicativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 5, offset: 15122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 509, col: 10, offset: 15127},
								expr: &actionExpr{
									pos: position{line: 509, col: 11, offset: 15128},
									run: (*parser).callonAdditiveExpression7,
									expr: &seqExpr{
										pos: position{line: 509, col: 11, offset: 15128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 509, col: 11, offset: 15128},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 509, col: 14, offset: 15131},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 509, col: 17, offset: 15134},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 509, col: 34, offset: 15151},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 509, col: 37, offset: 15154},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 509, col: 42, offset: 15159},
													name: "MultiplicativeExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 513, col: 1, offset: 15287},
			expr: &actionExpr{
				pos: position{line: 513, col: 20, offset: 15306},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 513, col: 21, offset: 15307},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 21, offset: 15307},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 27, offset: 15313},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpression",
			pos:  position{line: 515, col: 1, offset: 15350},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15379},
				run: (*parser).callonMultiplicativeExpression1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 15379},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 15385},
								name: "NotExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 5, offset: 15403},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 517, col: 10, offset: 15408},
								expr: &actionExpr{
									pos: position{line: 517, col: 11, offset: 15409},
									run: (*parser).callonMultiplicativeExpression7,
									expr: &seqExpr{
										pos: position{line: 517, col: 11, offset: 15409},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 517, col: 11, offset: 15409},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 517, col: 14, offset: 15412},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 517, col: 17, offset: 15415},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 517, col: 40, offset: 15438},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 517, col: 43, offset: 15441},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 517, col: 48, offset: 15446},
													name: "NotExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 521, col: 1, offset: 15563},
			expr: &actionExpr{
				pos: position{line: 521, col: 26, offset: 15588},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 521, col: 27, offset: 15589},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 27, offset: 15589},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 521, col: 33, offset: 15595},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 523, col: 1, offset: 15632},
			expr: &choiceExpr{
				pos: position{line: 524, col: 5, offset: 15650},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 524, col: 5, offset: 15650},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 524, col: 5, offset: 15650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 524, col: 5, offset: 15650},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 9, offset: 15654},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 12, offset: 15657},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 14, offset: 15659},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 527, col: 5, offset: 15778},
						name: "CastExpression",
					},
				},
			},
		},
		{
			name: "CastExpression",
			pos:  position{line: 529, col: 1, offset: 15794},
			expr: &actionExpr{
				pos: position{line: 530, col: 5, offset: 15813},
				run: (*parser).callonCastExpression1,
				expr: &seqExpr{
					pos: position{line: 530, col: 5, offset: 15813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 530, col: 5, offset: 15813},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 7, offset: 15815},
								name: "CallExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 22, offset: 15830},
							label: "t",
							expr: &zeroOrOneExpr{
								pos: position{line: 530, col: 24, offset: 15832},
								expr: &actionExpr{
									pos: position{line: 530, col: 25, offset: 15833},
									run: (*parser).callonCastExpression7,
									expr: &seqExpr{
										pos: position{line: 530, col: 25, offset: 15833},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 530, col: 25, offset: 15833},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 530, col: 28, offset: 15836},
												val:        ":",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 530, col: 32, offset: 15840},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 530, col: 35, offset: 15843},
												label: "ct",
												expr: &ruleRefExpr{
													pos:  position{line: 530, col: 38, offset: 15846},
													name: "ZngType",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ZngType",
			pos:  position{line: 538, col: 1, offset: 16020},
			expr: &actionExpr{
				pos: position{line: 539, col: 4, offset: 16031},
				run: (*parser).callonZngType1,
				expr: &choiceExpr{
					pos: position{line: 539, col: 5, offset: 16032},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 5, offset: 16032},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 15, offset: 16042},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 24, offset: 16051},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 34, offset: 16061},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 45, offset: 16072},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 539, col: 55, offset: 16082},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 4, offset: 16094},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 14, offset: 16104},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 25, offset: 16115},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 37, offset: 16127},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 540, col: 48, offset: 16138},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 541, col: 4, offset: 16151},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 541, col: 11, offset: 16158},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 541, col: 19, offset: 16166},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 541, col: 28, offset: 16175},
							val:        "duration",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CallExpression",
			pos:  position{line: 543, col: 1, offset: 16219},
			expr: &choiceExpr{
				pos: position{line: 544, col: 5, offset: 16238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 16238},
						run: (*parser).callonCallExpression2,
						expr: &seqExpr{
							pos: position{line: 544, col: 5, offset: 16238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 544, col: 5, offset: 16238},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 544, col: 8, offset: 16241},
										name: "FunctionName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 544, col: 21, offset: 16254},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 544, col: 24, offset: 16257},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 544, col: 28, offset: 16261},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 544, col: 33, offset: 16266},
										name: "ArgumentList",
									},
								},
								&litMatcher{
									pos:        position{line: 544, col: 46, offset: 16279},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 16390},
						name: "DereferenceExpression",
					},
				},
			},
		},
		{
			name: "FunctionName",
			pos:  position{line: 549, col: 1, offset: 16413},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16430},
				run: (*parser).callonFunctionName1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16430},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 550, col: 5, offset: 16430},
							name: "FunctionNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 23, offset: 16448},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 23, offset: 16448},
								name: "FunctionNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionNameStart",
			pos:  position{line: 552, col: 1, offset: 16498},
			expr: &charClassMatcher{
				pos:        position{line: 552, col: 21, offset: 16518},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FunctionNameRest",
			pos:  position{line: 553, col: 1, offset: 16527},
			expr: &choiceExpr{
				pos: position{line: 553, col: 20, offset: 16546},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 20, offset: 16546},
						name: "FunctionNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 553, col: 40, offset: 16566},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 555, col: 1, offset: 16574},
			expr: &choiceExpr{
				pos: position{line: 556, col: 5, offset: 16591},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16591},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 556, col: 5, offset: 16591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 556, col: 5, offset: 16591},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 16597},
										name: "Expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 556, col: 22, offset: 16608},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 556, col: 27, offset: 16613},
										expr: &actionExpr{
											pos: position{line: 556, col: 28, offset: 16614},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 556, col: 28, offset: 16614},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 556, col: 28, offset: 16614},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 556, col: 31, offset: 16617},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 556, col: 35, offset: 16621},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 556, col: 38, offset: 16624},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 556, col: 40, offset: 16626},
															name: "Expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 559, col: 5, offset: 16742},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 559, col: 5, offset: 16742},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DereferenceExpression",
			pos:  position{line: 561, col: 1, offset: 16778},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16804},
				run: (*parser).callonDereferenceExpression1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 562, col: 5, offset: 16804},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 10, offset: 16809},
								name: "PrimaryExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16831},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 563, col: 12, offset: 16838},
								expr: &ruleRefExpr{
									pos:  position{line: 563, col: 13, offset: 16839},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 567, col: 1, offset: 16909},
			expr: &choiceExpr{
				pos: position{line: 567, col: 9, offset: 16917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 567, col: 9, offset: 16917},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 567, col: 9, offset: 16917},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 567, col: 9, offset: 16917},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 567, col: 12, offset: 16920},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 16, offset: 16924},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 567, col: 19, offset: 16927},
									label: "index",
									expr: &ruleRefExpr{
										pos:  position{line: 567, col: 25, offset: 16933},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 36, offset: 16944},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 567, col: 39, offset: 16947},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 17003},
						run: (*parser).callonDeref11,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 17003},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 570, col: 5, offset: 17003},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 8, offset: 17006},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 10, offset: 17008},
										name: "DotField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DotField",
			pos:  position{line: 572, col: 1, offset: 17036},
			expr: &actionExpr{
				pos: position{line: 572, col: 13, offset: 17048},
				run: (*parser).callonDotField1,
				expr: &seqExpr{
					pos: position{line: 572, col: 13, offset: 17048},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 13, offset: 17048},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 17, offset: 17052},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 20, offset: 17055},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 26, offset: 17061},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "duration",
			pos:  position{line: 576, col: 1, offset: 17116},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 17129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 17129},
						name: "seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 17141},
						name: "minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 17153},
						name: "hours",
					},
					&seqExpr{
						pos: position{line: 580, col: 5, offset: 17163},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 580, col: 5, offset: 17163},
								name: "hours",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 17169},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 580, col: 13, offset: 17171},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 19, offset: 17177},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 21, offset: 17179},
								name: "minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 581, col: 5, offset: 17191},
						name: "days",
					},
					&ruleRefExpr{
						pos:  position{line: 582, col: 5, offset: 17200},
						name: "weeks",
					},
				},
			},
		},
		{
			name: "sec_abbrev",
			pos:  position{line: 584, col: 1, offset: 17207},
			expr: &choiceExpr{
				pos: position{line: 585, col: 5, offset: 17222},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 585, col: 5, offset: 17222},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 586, col: 5, offset: 17236},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 587, col: 5, offset: 17249},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 588, col: 5, offset: 17260},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 589, col: 5, offset: 17270},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "min_abbrev",
			pos:  position{line: 591, col: 1, offset: 17275},
			expr: &choiceExpr{
				pos: position{line: 592, col: 5, offset: 17290},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 592, col: 5, offset: 17290},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 593, col: 5, offset: 17304},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 594, col: 5, offset: 17317},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 595, col: 5, offset: 17328},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 596, col: 5, offset: 17338},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "hour_abbrev",
			pos:  position{line: 598, col: 1, offset: 17343},
			expr: &choiceExpr{
				pos: position{line: 599, col: 5, offset: 17359},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 599, col: 5, offset: 17359},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 600, col: 5, offset: 17371},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 601, col: 5, offset: 17381},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 602, col: 5, offset: 17390},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 603, col: 5, offset: 17398},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "day_abbrev",
			pos:  position{line: 605, col: 1, offset: 17406},
			expr: &choiceExpr{
				pos: position{line: 605, col: 14, offset: 17419},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 605, col: 14, offset: 17419},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 605, col: 21, offset: 17426},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 605, col: 27, offset: 17432},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "week_abbrev",
			pos:  position{line: 606, col: 1, offset: 17436},
			expr: &choiceExpr{
				pos: position{line: 606, col: 15, offset: 17450},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 606, col: 15, offset: 17450},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 606, col: 23, offset: 17458},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 606, col: 30, offset: 17465},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 606, col: 36, offset: 17471},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 606, col: 41, offset: 17476},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "seconds",
			pos:  position{line: 608, col: 1, offset: 17481},
			expr: &choiceExpr{
				pos: position{line: 609, col: 5, offset: 17493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 17493},
						run: (*parser).callonseconds2,
						expr: &litMatcher{
							pos:        position{line: 609, col: 5, offset: 17493},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 5, offset: 17579},
						run: (*parser).callonseconds4,
						expr: &seqExpr{
							pos: position{line: 610, col: 5, offset: 17579},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 610, col: 5, offset: 17579},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 9, offset: 17583},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 610, col: 16, offset: 17590},
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 16, offset: 17590},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 610, col: 19, offset: 17593},
									name: "sec_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "minutes",
			pos:  position{line: 612, col: 1, offset: 17680},
			expr: &choiceExpr{
				pos: position{line: 613, col: 5, offset: 17692},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 17692},
						run: (*parser).callonminutes2,
						expr: &litMatcher{
							pos:        position{line: 613, col: 5, offset: 17692},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 614, col: 5, offset: 17779},
						run: (*parser).callonminutes4,
						expr: &seqExpr{
							pos: position{line: 614, col: 5, offset: 17779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 614, col: 5, offset: 17779},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 9, offset: 17783},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 614, col: 16, offset: 17790},
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 16, offset: 17790},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 614, col: 19, offset: 17793},
									name: "min_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hours",
			pos:  position{line: 616, col: 1, offset: 17889},
			expr: &choiceExpr{
				pos: position{line: 617, col: 5, offset: 17899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 17899},
						run: (*parser).callonhours2,
						expr: &litMatcher{
							pos:        position{line: 617, col: 5, offset: 17899},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 17986},
						run: (*parser).callonhours4,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 17986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 618, col: 5, offset: 17986},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 9, offset: 17990},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 618, col: 16, offset: 17997},
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 16, offset: 17997},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 19, offset: 18000},
									name: "hour_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "days",
			pos:  position{line: 620, col: 1, offset: 18099},
			expr: &choiceExpr{
				pos: position{line: 621, col: 5, offset: 18108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 18108},
						run: (*parser).callondays2,
						expr: &litMatcher{
							pos:        position{line: 621, col: 5, offset: 18108},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18197},
						run: (*parser).callondays4,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18197},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18197},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 9, offset: 18201},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 622, col: 16, offset: 18208},
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 16, offset: 18208},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 19, offset: 18211},
									name: "day_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "weeks",
			pos:  position{line: 624, col: 1, offset: 18314},
			expr: &choiceExpr{
				pos: position{line: 625, col: 5, offset: 18324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18324},
						run: (*parser).callonweeks2,
						expr: &litMatcher{
							pos:        position{line: 625, col: 5, offset: 18324},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 18416},
						run: (*parser).callonweeks4,
						expr: &seqExpr{
							pos: position{line: 626, col: 5, offset: 18416},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 626, col: 5, offset: 18416},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 626, col: 9, offset: 18420},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 626, col: 16, offset: 18427},
									expr: &ruleRefExpr{
										pos:  position{line: 626, col: 16, offset: 18427},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 626, col: 19, offset: 18430},
									name: "week_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 628, col: 1, offset: 18534},
			expr: &ruleRefExpr{
				pos:  position{line: 628, col: 10, offset: 18543},
				name: "unsignedInteger",
			},
		},
		{
			name: "addr",
			pos:  position{line: 632, col: 1, offset: 18589},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18598},
				run: (*parser).callonaddr1,
				expr: &labeledExpr{
					pos:   position{line: 633, col: 5, offset: 18598},
					label: "a",
					expr: &seqExpr{
						pos: position{line: 633, col: 8, offset: 18601},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 633, col: 8, offset: 18601},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 633, col: 24, offset: 18617},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 633, col: 28, offset: 18621},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 633, col: 44, offset: 18637},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 633, col: 48, offset: 18641},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 633, col: 64, offset: 18657},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 633, col: 68, offset: 18661},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "port",
			pos:  position{line: 635, col: 1, offset: 18710},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18719},
				run: (*parser).callonport1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18719},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 636, col: 9, offset: 18723},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 11, offset: 18725},
								name: "suint",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6addr",
			pos:  position{line: 640, col: 1, offset: 18881},
			expr: &choiceExpr{
				pos: position{line: 641, col: 5, offset: 18893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18893},
						run: (*parser).callonip6addr2,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 18893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 641, col: 5, offset: 18893},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 641, col: 7, offset: 18895},
										expr: &ruleRefExpr{
											pos:  position{line: 641, col: 8, offset: 18896},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 641, col: 20, offset: 18908},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 22, offset: 18910},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 18974},
						run: (*parser).callonip6addr9,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 18974},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 18974},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 644, col: 7, offset: 18976},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 644, col: 11, offset: 18980},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 644, col: 13, offset: 18982},
										expr: &ruleRefExpr{
											pos:  position{line: 644, col: 14, offset: 18983},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 644, col: 25, offset: 18994},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 30, offset: 18999},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 644, col: 32, offset: 19001},
										expr: &ruleRefExpr{
											pos:  position{line: 644, col: 33, offset: 19002},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 644, col: 45, offset: 19014},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 644, col: 47, offset: 19016},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 19115},
						run: (*parser).callonip6addr22,
						expr: &seqExpr{
							pos: position{line: 647, col: 5, offset: 19115},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 647, col: 5, offset: 19115},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 647, col: 10, offset: 19120},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 647, col: 12, offset: 19122},
										expr: &ruleRefExpr{
											pos:  position{line: 647, col: 13, offset: 19123},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 647, col: 25, offset: 19135},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 647, col: 27, offset: 19137},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 19208},
						run: (*parser).callonip6addr30,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 19208},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 650, col: 5, offset: 19208},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 7, offset: 19210},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 650, col: 11, offset: 19214},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 650, col: 13, offset: 19216},
										expr: &ruleRefExpr{
											pos:  position{line: 650, col: 14, offset: 19217},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 650, col: 25, offset: 19228},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 19296},
						run: (*parser).callonip6addr38,
						expr: &litMatcher{
							pos:        position{line: 653, col: 5, offset: 19296},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ip6tail",
			pos:  position{line: 657, col: 1, offset: 19333},
			expr: &choiceExpr{
				pos: position{line: 658, col: 5, offset: 19345},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 658, col: 5, offset: 19345},
						name: "addr",
					},
					&ruleRefExpr{
						pos:  position{line: 659, col: 5, offset: 19354},
						name: "h16",
					},
				},
			},
		},
		{
			name: "h_append",
			pos:  position{line: 661, col: 1, offset: 19359},
			expr: &actionExpr{
				pos: position{line: 661, col: 12, offset: 19370},
				run: (*parser).callonh_append1,
				expr: &seqExpr{
					pos: position{line: 661, col: 12, offset: 19370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 661, col: 12, offset: 19370},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 661, col: 16, offset: 19374},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 18, offset: 19376},
								name: "h16",
							},
						},
					},
				},
			},
		},
		{
			name: "h_prepend",
			pos:  position{line: 662, col: 1, offset: 19413},
			expr: &actionExpr{
				pos: position{line: 662, col: 13, offset: 19425},
				run: (*parser).callonh_prepend1,
				expr: &seqExpr{
					pos: position{line: 662, col: 13, offset: 19425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 662, col: 13, offset: 19425},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 15, offset: 19427},
								name: "h16",
							},
						},
						&litMatcher{
							pos:        position{line: 662, col: 19, offset: 19431},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "subnet",
			pos:  position{line: 664, col: 1, offset: 19469},
			expr: &actionExpr{
				pos: position{line: 665, col: 5, offset: 19480},
				run: (*parser).callonsubnet1,
				expr: &seqExpr{
					pos: position{line: 665, col: 5, offset: 19480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19480},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 7, offset: 19482},
								name: "addr",
							},
						},
						&litMatcher{
							pos:        position{line: 665, col: 12, offset: 19487},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 665, col: 16, offset: 19491},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 18, offset: 19493},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6subnet",
			pos:  position{line: 669, col: 1, offset: 19577},
			expr: &actionExpr{
				pos: position{line: 670, col: 5, offset: 19591},
				run: (*parser).callonip6subnet1,
				expr: &seqExpr{
					pos: position{line: 670, col: 5, offset: 19591},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 19591},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 7, offset: 19593},
								name: "ip6addr",
							},
						},
						&litMatcher{
							pos:        position{line: 670, col: 15, offset: 19601},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 670, col: 19, offset: 19605},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 21, offset: 19607},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "unsignedInteger",
			pos:  position{line: 674, col: 1, offset: 19681},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19701},
				run: (*parser).callonunsignedInteger1,
				expr: &labeledExpr{
					pos:   position{line: 675, col: 5, offset: 19701},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 675, col: 7, offset: 19703},
						name: "suint",
					},
				},
			},
		},
		{
			name: "suint",
			pos:  position{line: 677, col: 1, offset: 19738},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 19748},
				run: (*parser).callonsuint1,
				expr: &oneOrMoreExpr{
					pos: position{line: 678, col: 5, offset: 19748},
					expr: &charClassMatcher{
						pos:        position{line: 678, col: 5, offset: 19748},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "integer",
			pos:  position{line: 680, col: 1, offset: 19787},
			expr: &actionExpr{
				pos: position{line: 681, col: 5, offset: 19799},
				run: (*parser).calloninteger1,
				expr: &labeledExpr{
					pos:   position{line: 681, col: 5, offset: 19799},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 681, col: 7, offset: 19801},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "sinteger",
			pos:  position{line: 683, col: 1, offset: 19839},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 19852},
				run: (*parser).callonsinteger1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 19852},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 684, col: 5, offset: 19852},
							expr: &charClassMatcher{
								pos:        position{line: 684, col: 5, offset: 19852},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 11, offset: 19858},
							name: "suint",
						},
					},
				},
			},
		},
		{
			name: "double",
			pos:  position{line: 686, col: 1, offset: 19896},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 19907},
				run: (*parser).callondouble1,
				expr: &labeledExpr{
					pos:   position{line: 687, col: 5, offset: 19907},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 687, col: 7, offset: 19909},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "sdouble",
			pos:  position{line: 691, col: 1, offset: 19956},
			expr: &choiceExpr{
				pos: position{line: 692, col: 5, offset: 19968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 19968},
						run: (*parser).callonsdouble2,
						expr: &seqExpr{
							pos: position{line: 692, col: 5, offset: 19968},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 692, col: 5, offset: 19968},
									expr: &litMatcher{
										pos:        position{line: 692, col: 5, offset: 19968},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 692, col: 10, offset: 19973},
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 10, offset: 19973},
										name: "doubleInteger",
									},
								},
								&litMatcher{
									pos:        position{line: 692, col: 25, offset: 19988},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 692, col: 29, offset: 19992},
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 29, offset: 19992},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 692, col: 42, offset: 20005},
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 42, offset: 20005},
										name: "exponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 20064},
						run: (*parser).callonsdouble13,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 20064},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 695, col: 5, offset: 20064},
									expr: &litMatcher{
										pos:        position{line: 695, col: 5, offset: 20064},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 10, offset: 20069},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 695, col: 14, offset: 20073},
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 14, offset: 20073},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 695, col: 27, offset: 20086},
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 27, offset: 20086},
										name: "exponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleInteger",
			pos:  position{line: 699, col: 1, offset: 20142},
			expr: &choiceExpr{
				pos: position{line: 700, col: 5, offset: 20160},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 700, col: 5, offset: 20160},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 701, col: 5, offset: 20168},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 701, col: 5, offset: 20168},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 701, col: 11, offset: 20174},
								expr: &charClassMatcher{
									pos:        position{line: 701, col: 11, offset: 20174},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleDigit",
			pos:  position{line: 703, col: 1, offset: 20182},
			expr: &charClassMatcher{
				pos:        position{line: 703, col: 15, offset: 20196},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "exponentPart",
			pos:  position{line: 705, col: 1, offset: 20203},
			expr: &seqExpr{
				pos: position{line: 705, col: 16, offset: 20218},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 705, col: 16, offset: 20218},
						val:        "e",
						ignoreCase: true,
					},
					&ruleRefExpr{
						pos:  position{line: 705, col: 21, offset: 20223},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "h16",
			pos:  position{line: 707, col: 1, offset: 20233},
			expr: &actionExpr{
				pos: position{line: 707, col: 7, offset: 20239},
				run: (*parser).callonh161,
				expr: &labeledExpr{
					pos:   position{line: 707, col: 7, offset: 20239},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 707, col: 13, offset: 20245},
						expr: &ruleRefExpr{
							pos:  position{line: 707, col: 13, offset: 20245},
							name: "hexdigit",
						},
					},
				},
			},
		},
		{
			name: "hexdigit",
			pos:  position{line: 709, col: 1, offset: 20287},
			expr: &charClassMatcher{
				pos:        position{line: 709, col: 12, offset: 20298},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "searchWord",
			pos:  position{line: 711, col: 1, offset: 20311},
			expr: &actionExpr{
				pos: position{line: 712, col: 5, offset: 20326},
				run: (*parser).callonsearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 712, col: 5, offset: 20326},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 712, col: 11, offset: 20332},
						expr: &ruleRefExpr{
							pos:  position{line: 712, col: 11, offset: 20332},
							name: "searchWordPart",
						},
					},
				},
			},
		},
		{
			name: "searchWordPart",
			pos:  position{line: 714, col: 1, offset: 20382},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20401},
						run: (*parser).callonsearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20401},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 715, col: 5, offset: 20401},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 715, col: 10, offset: 20406},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 715, col: 13, offset: 20409},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 715, col: 13, offset: 20409},
												name: "escapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 715, col: 30, offset: 20426},
												name: "searchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20463},
						run: (*parser).callonsearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20463},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 716, col: 5, offset: 20463},
									expr: &choiceExpr{
										pos: position{line: 716, col: 7, offset: 20465},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 716, col: 7, offset: 20465},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;:]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';', ':'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 43, offset: 20501},
												name: "ws",
											},
										},
									},
								},
								&anyMatcher{
									line: 716, col: 47, offset: 20505,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "quotedString",
			pos:  position{line: 718, col: 1, offset: 20539},
			expr: &choiceExpr{
				pos: position{line: 719, col: 5, offset: 20556},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 20556},
						run: (*parser).callonquotedString2,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 20556},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 719, col: 5, offset: 20556},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 719, col: 9, offset: 20560},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 719, col: 11, offset: 20562},
										expr: &ruleRefExpr{
											pos:  position{line: 719, col: 11, offset: 20562},
											name: "doubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 719, col: 29, offset: 20580},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20617},
						run: (*parser).callonquotedString9,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 20617},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 20617},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 720, col: 9, offset: 20621},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 720, col: 11, offset: 20623},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 11, offset: 20623},
											name: "singleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 720, col: 29, offset: 20641},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleQuotedChar",
			pos:  position{line: 722, col: 1, offset: 20675},
			expr: &choiceExpr{
				pos: position{line: 723, col: 5, offset: 20696},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 723, col: 5, offset: 20696},
						run: (*parser).callondoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 723, col: 5, offset: 20696},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 723, col: 5, offset: 20696},
									expr: &choiceExpr{
										pos: position{line: 723, col: 7, offset: 20698},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 723, col: 7, offset: 20698},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 723, col: 13, offset: 20704},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 723, col: 26, offset: 20717,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 20754},
						run: (*parser).callondoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 20754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 724, col: 5, offset: 20754},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 724, col: 10, offset: 20759},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 12, offset: 20761},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleQuotedChar",
			pos:  position{line: 726, col: 1, offset: 20795},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 20816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 20816},
						run: (*parser).callonsingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 20816},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 727, col: 5, offset: 20816},
									expr: &choiceExpr{
										pos: position{line: 727, col: 7, offset: 20818},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 727, col: 7, offset: 20818},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 727, col: 13, offset: 20824},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 727, col: 26, offset: 20837,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 20874},
						run: (*parser).callonsingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 20874},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 728, col: 5, offset: 20874},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 728, col: 10, offset: 20879},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 12, offset: 20881},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "escapeSequence",
			pos:  position{line: 730, col: 1, offset: 20915},
			expr: &choiceExpr{
				pos: position{line: 731, col: 5, offset: 20934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 20934},
						run: (*parser).callonescapeSequence2,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 20934},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 731, col: 5, offset: 20934},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 731, col: 9, offset: 20938},
									name: "hexdigit",
								},
								&ruleRefExpr{
									pos:  position{line: 731, col: 18, offset: 20947},
									name: "hexdigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 20998},
						name: "singleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 733, col: 5, offset: 21019},
						name: "unicodeEscape",
					},
				},
			},
		},
		{
			name: "singleCharEscape",
			pos:  position{line: 735, col: 1, offset: 21034},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 21055},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 736, col: 5, offset: 21055},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 737, col: 5, offset: 21063},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 738, col: 5, offset: 21071},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21080},
						run: (*parser).callonsingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 739, col: 5, offset: 21080},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21109},
						run: (*parser).callonsingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 740, col: 5, offset: 21109},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 21138},
						run: (*parser).callonsingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 741, col: 5, offset: 21138},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21167},
						run: (*parser).callonsingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 742, col: 5, offset: 21167},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21196},
						run: (*parser).callonsingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 743, col: 5, offset: 21196},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21225},
						run: (*parser).callonsingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 744, col: 5, offset: 21225},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "searchEscape",
			pos:  position{line: 746, col: 1, offset: 21251},
			expr: &choiceExpr{
				pos: position{line: 747, col: 5, offset: 21268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 747, col: 5, offset: 21268},
						run: (*parser).callonsearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 747, col: 5, offset: 21268},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 21296},
						run: (*parser).callonsearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 748, col: 5, offset: 21296},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "unicodeEscape",
			pos:  position{line: 750, col: 1, offset: 21323},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21341},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21341},
						run: (*parser).callonunicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21341},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21341},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 9, offset: 21345},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 751, col: 16, offset: 21352},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 751, col: 16, offset: 21352},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 751, col: 25, offset: 21361},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 751, col: 34, offset: 21370},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 751, col: 43, offset: 21379},
												name: "hexdigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 21442},
						run: (*parser).callonunicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 754, col: 5, offset: 21442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 754, col: 5, offset: 21442},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 754, col: 9, offset: 21446},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 754, col: 13, offset: 21450},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 754, col: 20, offset: 21457},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 754, col: 20, offset: 21457},
												name: "hexdigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 754, col: 29, offset: 21466},
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 29, offset: 21466},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 754, col: 39, offset: 21476},
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 39, offset: 21476},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 754, col: 49, offset: 21486},
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 49, offset: 21486},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 754, col: 59, offset: 21496},
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 59, offset: 21496},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 754, col: 69, offset: 21506},
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 69, offset: 21506},
													name: "hexdigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 754, col: 80, offset: 21517},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reString",
			pos:  position{line: 758, col: 1, offset: 21571},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 21584},
				run: (*parser).callonreString1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 21584},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 759, col: 5, offset: 21584},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 759, col: 9, offset: 21588},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 11, offset: 21590},
								name: "reBody",
							},
						},
						&litMatcher{
							pos:        position{line: 759, col: 18, offset: 21597},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reBody",
			pos:  position{line: 761, col: 1, offset: 21620},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 21631},
				run: (*parser).callonreBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 762, col: 5, offset: 21631},
					expr: &choiceExpr{
						pos: position{line: 762, col: 6, offset: 21632},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 762, col: 6, offset: 21632},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 762, col: 13, offset: 21639},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "escapedChar",
			pos:  position{line: 764, col: 1, offset: 21679},
			expr: &charClassMatcher{
				pos:        position{line: 765, col: 5, offset: 21695},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "ws",
			pos:  position{line: 767, col: 1, offset: 21710},
			expr: &choiceExpr{
				pos: position{line: 768, col: 5, offset: 21717},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 768, col: 5, offset: 21717},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 769, col: 5, offset: 21726},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 770, col: 5, offset: 21735},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 771, col: 5, offset: 21744},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 772, col: 5, offset: 21752},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 773, col: 5, offset: 21765},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 775, col: 1, offset: 21775},
			expr: &oneOrMoreExpr{
				pos: position{line: 775, col: 18, offset: 21792},
				expr: &ruleRefExpr{
					pos:  position{line: 775, col: 18, offset: 21792},
					name: "ws",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 776, col: 1, offset: 21796},
			expr: &zeroOrMoreExpr{
				pos: position{line: 776, col: 6, offset: 21801},
				expr: &ruleRefExpr{
					pos:  position{line: 776, col: 6, offset: 21801},
					name: "ws",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 778, col: 1, offset: 21806},
			expr: &notExpr{
				pos: position{line: 778, col: 7, offset: 21812},
				expr: &anyMatcher{
					line: 778, col: 8, offset: 21813,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onquery2(procs interface{}) (interface{}, error) {
	var filt = map[string]interface{}{"op": "FilterProc", "filter": map[string]interface{}{"op": "MatchAll"}}
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{filt}, (procs.([]interface{}))...)}, nil

}

func (p *parser) callonquery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery2(stack["procs"])
}

func (c *current) onquery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{s}, (rest.([]interface{}))...)}, nil
	}

}

func (p *parser) callonquery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery5(stack["s"], stack["rest"])
}

func (c *current) onquery14(s interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{s}}, nil

}

func (p *parser) callonquery14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery14(stack["s"])
}

func (c *current) onprocChain1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonprocChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocChain1(stack["first"], stack["rest"])
}

func (c *current) onchainedProc1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonchainedProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainedProc1(stack["p"])
}

func (c *current) onsearch1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonsearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearch1(stack["expr"])
}

func (c *current) onsearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalOr"), nil

}

func (p *parser) callonsearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onoredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonoredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoredSearchTerm1(stack["t"])
}

func (c *current) onsearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalAnd"), nil

}

func (p *parser) callonsearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onandedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonandedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandedSearchTerm1(stack["f"])
}

func (c *current) onsearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "LogicalNot", "expr": e}, nil

}

func (p *parser) callonsearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor2(stack["e"])
}

func (c *current) onsearchFactor14(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor14(stack["s"])
}

func (c *current) onsearchFactor20(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonsearchFactor20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor20(stack["expr"])
}

func (c *current) onsearchPred2(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred2(stack["comp"], stack["v"])
}

func (c *current) onsearchPred13(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": true, "value": v}, nil

}

func (p *parser) callonsearchPred13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred13(stack["comp"], stack["v"])
}

func (c *current) onsearchPred24(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": comp, "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred24(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred36(expr, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpression", "operator": comp, "lhs": expr, "rhs": v}, nil

}

func (p *parser) callonsearchPred36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred36(stack["expr"], stack["comp"], stack["v"])
}

func (c *current) onsearchPred48(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": "in", "recursive": false, "value": v}, nil

}

func (p *parser) callonsearchPred48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred48(stack["v"])
}

func (c *current) onsearchPred58(v, f interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": "in", "field": f, "value": v}, nil

}

func (p *parser) callonsearchPred58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred58(stack["v"], stack["f"])
}

func (c *current) onsearchPred69(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonsearchPred69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred69(stack["v"])
}

func (c *current) onsearchPred72(v interface{}) (interface{}, error) {
	var str = v.(string)
	if str == "*" {
		return map[string]interface{}{"op": "MatchAll"}, nil
	}
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": literal}, nil

}

func (p *parser) callonsearchPred72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred72(stack["v"])
}

func (c *current) onsearchLiteral8(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonsearchLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral8(stack["i"])
}

func (c *current) onsearchLiteral14(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral14(stack["v"])
}

func (c *current) onsearchLiteral22(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral22(stack["v"])
}

func (c *current) onsearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonsearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchValue3(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onPortLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "port", "value": v}, nil

}

func (p *parser) callonPortLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral5(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral5(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null"}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onprocList1(first, rest interface{}) (interface{}, error) {
	var fp = map[string]interface{}{"op": "SequentialProc", "procs": first}
	if rest != nil {
		return map[string]interface{}{"op": "ParallelProc", "procs": append([]interface{}{fp}, (rest.([]interface{}))...)}, nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonprocList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocList1(stack["first"], stack["rest"])
}

func (c *current) onparallelChain1(ch interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": ch}, nil
}

func (p *parser) callonparallelChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparallelChain1(stack["ch"])
}

func (c *current) onproc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonproc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onproc4(stack["proc"])
}

func (c *current) ongroupByKeys9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callongroupByKeys9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys9(stack["cl"])
}

func (c *current) ongroupByKeys1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callongroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys1(stack["first"], stack["rest"])
}

func (c *current) ongroupByKey3(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ExpressionAssignment", "target": string(c.text), "expression": field}, nil
}

func (p *parser) callongroupByKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKey3(stack["field"])
}

func (c *current) oneveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) calloneveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneveryDur1(stack["dur"])
}

func (c *current) onandToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonandToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandToken1()
}

func (c *current) onorToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonorToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onorToken1()
}

func (c *current) oninToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) calloninToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninToken1()
}

func (c *current) onnotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonnotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotToken1()
}

func (c *current) onfieldName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonfieldName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldName1()
}

func (c *current) onField1(name interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Field", "field": name}, nil
}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"])
}

func (c *current) onfieldExpr1(base, derefs interface{}) (interface{}, error) {
	return makeBinaryExprChain(base, derefs), nil

}

func (p *parser) callonfieldExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExpr1(stack["base"], stack["derefs"])
}

func (c *current) onDotExpr1(base, derefs interface{}) (interface{}, error) {
	return makeBinaryExprChain(base, derefs), nil

}

func (p *parser) callonDotExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotExpr1(stack["base"], stack["derefs"])
}

func (c *current) onDotExprText1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDotExprText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotExprText1()
}

func (c *current) onFunctionExpr1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunctionExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionExpr1(stack["fn"], stack["args"])
}

func (c *current) onfieldExprList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonfieldExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExprList1(stack["first"], stack["rest"])
}

func (c *current) oncountOp1() (interface{}, error) {
	return "Count", nil
}

func (p *parser) calloncountOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountOp1()
}

func (c *current) onfieldReducerOp2() (interface{}, error) {
	return "Sum", nil
}

func (p *parser) callonfieldReducerOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp2()
}

func (c *current) onfieldReducerOp4() (interface{}, error) {
	return "Avg", nil
}

func (p *parser) callonfieldReducerOp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp4()
}

func (c *current) onfieldReducerOp6() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp6()
}

func (c *current) onfieldReducerOp8() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp8()
}

func (c *current) onfieldReducerOp10() (interface{}, error) {
	return "Var", nil
}

func (p *parser) callonfieldReducerOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp10()
}

func (c *current) onfieldReducerOp12() (interface{}, error) {
	return "Entropy", nil
}

func (p *parser) callonfieldReducerOp12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp12()
}

func (c *current) onfieldReducerOp14() (interface{}, error) {
	return "Min", nil
}

func (p *parser) callonfieldReducerOp14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp14()
}

func (c *current) onfieldReducerOp16() (interface{}, error) {
	return "Max", nil
}

func (p *parser) callonfieldReducerOp16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp16()
}

func (c *current) onfieldReducerOp18() (interface{}, error) {
	return "First", nil
}

func (p *parser) callonfieldReducerOp18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp18()
}

func (c *current) onfieldReducerOp20() (interface{}, error) {
	return "Last", nil
}

func (p *parser) callonfieldReducerOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp20()
}

func (c *current) onfieldReducerOp22() (interface{}, error) {
	return "CountDistinct", nil
}

func (p *parser) callonfieldReducerOp22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp22()
}

func (c *current) onpaddedFieldExpr1(field interface{}) (interface{}, error) {
	return field, nil
}

func (p *parser) callonpaddedFieldExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpaddedFieldExpr1(stack["field"])
}

func (c *current) oncountReducer1(op, field interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": op, "var": "count"}
	if field != nil {
		r["field"] = field
	}
	return r, nil

}

func (p *parser) calloncountReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountReducer1(stack["op"], stack["field"])
}

func (c *current) onfieldReducer1(op, field interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": op, "var": toLowerCase(op)}
	if field != nil {
		r["field"] = field
	}
	return r, nil

}

func (p *parser) callonfieldReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducer1(stack["op"], stack["field"])
}

func (c *current) ongroupByProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	if OR(keys, every) != nil {
		if keys != nil {
			keys = keys.([]interface{})[1]
		} else {
			keys = []interface{}{}
		}

		if every != nil {
			every = every.([]interface{})[0]
		}

		return map[string]interface{}{"op": "GroupByProc", "duration": every, "limit": limit, "keys": keys, "reducers": reducers}, nil
	}
	return map[string]interface{}{"op": "GroupByProc", "reducers": reducers}, nil

}

func (p *parser) callongroupByProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onreducerExpr2(field, f interface{}) (interface{}, error) {
	var r = f.(map[string]interface{})
	r["var"] = field
	return r, nil

}

func (p *parser) callonreducerExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerExpr2(stack["field"], stack["f"])
}

func (c *current) onreducerList1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonreducerList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerList1(stack["first"], stack["rest"])
}

func (c *current) onsort8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonsort8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort8(stack["l"])
}

func (c *current) onsort1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonsort1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort1(stack["args"], stack["list"])
}

func (c *current) onsortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonsortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs4(stack["a"])
}

func (c *current) onsortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonsortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs1(stack["args"])
}

func (c *current) onsortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonsortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg2()
}

func (c *current) onsortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg9()
}

func (c *current) onsortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonsortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg4(stack["where"])
}

func (c *current) ontop6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callontop6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop6(stack["n"])
}

func (c *current) ontop18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callontop18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop18(stack["f"])
}

func (c *current) ontop1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc"}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callontop1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onprocLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonprocLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocLimitArg1(stack["limit"])
}

func (c *current) oncutArgs4() (interface{}, error) {
	return map[string]interface{}{"name": "c", "value": nil}, nil
}

func (p *parser) calloncutArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs4()
}

func (c *current) oncutArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)

}

func (p *parser) calloncutArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArgs1(stack["args"])
}

func (c *current) oncutAssignment3(field interface{}) (interface{}, error) {
	return map[string]interface{}{"target": "", "source": field}, nil

}

func (p *parser) calloncutAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutAssignment3(stack["field"])
}

func (c *current) oncut11(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) calloncut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut11(stack["cl"])
}

func (c *current) oncut1(args, first, rest interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "CutProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...), "complement": false}
	if _, ok := argm["c"]; ok {
		proc["complement"] = true
	}
	return proc, nil

}

func (p *parser) calloncut1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut1(stack["args"], stack["first"], stack["rest"])
}

func (c *current) onhead2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonhead2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead2(stack["count"])
}

func (c *current) onhead8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonhead8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead8()
}

func (c *current) ontail2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callontail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail2(stack["count"])
}

func (c *current) ontail8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callontail8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail8()
}

func (c *current) onfilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonfilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilter1(stack["expr"])
}

func (c *current) onuniq2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonuniq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq2()
}

func (c *current) onuniq7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonuniq7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq7()
}

func (c *current) onput9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonput9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput9(stack["cl"])
}

func (c *current) onput1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput1(stack["first"], stack["rest"])
}

func (c *current) onrename9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonrename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename9(stack["cl"])
}

func (c *current) onrename1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonrename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename1(stack["first"], stack["rest"])
}

func (c *current) onfuse1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonfuse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuse1()
}

func (c *current) onExpressionAssignment1(f, e interface{}) (interface{}, error) {
	return map[string]interface{}{"target": f, "expression": e}, nil

}

func (p *parser) callonExpressionAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionAssignment1(stack["f"], stack["e"])
}

func (c *current) onFieldAssignment1(l, r interface{}) (interface{}, error) {
	return map[string]interface{}{"target": l, "source": r}, nil

}

func (p *parser) callonFieldAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldAssignment1(stack["l"], stack["r"])
}

func (c *current) onPrimaryExpression12(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimaryExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpression12(stack["expr"])
}

func (c *current) onConditionalExpression2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpression2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalORExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalORExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalANDExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression7(stack["op"], stack["expr"])
}

func (c *current) onLogicalANDExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpression7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpression7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpression2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["e"])
}

func (c *current) onCastExpression7(ct interface{}) (interface{}, error) {
	return ct, nil
}

func (p *parser) callonCastExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression7(stack["ct"])
}

func (c *current) onCastExpression1(e, t interface{}) (interface{}, error) {
	if t != nil {
		return map[string]interface{}{"op": "CastExpr", "expr": e, "type": t}, nil
	} else {
		return e, nil
	}

}

func (p *parser) callonCastExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression1(stack["e"], stack["t"])
}

func (c *current) onZngType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonZngType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZngType1()
}

func (c *current) onCallExpression2(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonCallExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression2(stack["fn"], stack["args"])
}

func (c *current) onFunctionName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFunctionName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDereferenceExpression1(base, derefs interface{}) (interface{}, error) {
	return makeBinaryExprChain(base, derefs), nil

}

func (p *parser) callonDereferenceExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDereferenceExpression1(stack["base"], stack["derefs"])
}

func (c *current) onDeref2(index interface{}) (interface{}, error) {
	return []interface{}{"[", index}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["index"])
}

func (c *current) onDeref11(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonDeref11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref11(stack["p"])
}

func (c *current) onDotField1(field interface{}) (interface{}, error) {
	return []interface{}{".", field}, nil

}

func (p *parser) callonDotField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotField1(stack["field"])
}

func (c *current) onseconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonseconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds2()
}

func (c *current) onseconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonseconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds4(stack["num"])
}

func (c *current) onminutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonminutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes2()
}

func (c *current) onminutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonminutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes4(stack["num"])
}

func (c *current) onhours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonhours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours2()
}

func (c *current) onhours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonhours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours4(stack["num"])
}

func (c *current) ondays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callondays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays2()
}

func (c *current) ondays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callondays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays4(stack["num"])
}

func (c *current) onweeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks2()
}

func (c *current) onweeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonweeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks4(stack["num"])
}

func (c *current) onaddr1(a interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonaddr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onaddr1(stack["a"])
}

func (c *current) onport1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonport1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onport1(stack["v"])
}

func (c *current) onip6addr2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr2(stack["a"], stack["b"])
}

func (c *current) onip6addr9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonip6addr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onip6addr22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr22(stack["a"], stack["b"])
}

func (c *current) onip6addr30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonip6addr30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr30(stack["a"], stack["b"])
}

func (c *current) onip6addr38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonip6addr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr38()
}

func (c *current) onh_append1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonh_append1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_append1(stack["v"])
}

func (c *current) onh_prepend1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonh_prepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_prepend1(stack["v"])
}

func (c *current) onsubnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonsubnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsubnet1(stack["a"], stack["m"])
}

func (c *current) onip6subnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonip6subnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6subnet1(stack["a"], stack["m"])
}

func (c *current) onunsignedInteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonunsignedInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunsignedInteger1(stack["s"])
}

func (c *current) onsuint1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsuint1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuint1()
}

func (c *current) oninteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) calloninteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninteger1(stack["s"])
}

func (c *current) onsinteger1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsinteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsinteger1()
}

func (c *current) ondouble1(s interface{}) (interface{}, error) {
	return parseFloat(s), nil

}

func (p *parser) callondouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondouble1(stack["s"])
}

func (c *current) onsdouble2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble2()
}

func (c *current) onsdouble13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble13()
}

func (c *current) onh161(chars interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonh161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh161(stack["chars"])
}

func (c *current) onsearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonsearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWord1(stack["chars"])
}

func (c *current) onsearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart2(stack["s"])
}

func (c *current) onsearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart9()
}

func (c *current) onquotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString2(stack["v"])
}

func (c *current) onquotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString9(stack["v"])
}

func (c *current) ondoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar2()
}

func (c *current) ondoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callondoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar9(stack["s"])
}

func (c *current) onsingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar2()
}

func (c *current) onsingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar9(stack["s"])
}

func (c *current) onescapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonescapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescapeSequence2()
}

func (c *current) onsingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonsingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape5()
}

func (c *current) onsingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonsingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape7()
}

func (c *current) onsingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonsingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape9()
}

func (c *current) onsingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonsingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape11()
}

func (c *current) onsingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonsingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape13()
}

func (c *current) onsingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonsingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape15()
}

func (c *current) onsearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonsearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape2()
}

func (c *current) onsearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonsearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape4()
}

func (c *current) onunicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape2(stack["chars"])
}

func (c *current) onunicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape11(stack["chars"])
}

func (c *current) onreString1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonreString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreString1(stack["v"])
}

func (c *current) onreBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonreBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
